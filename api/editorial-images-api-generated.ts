/* tslint:disable */
/* eslint-disable */
/*
Shutterstock API Explorer

The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

The version of the OpenAPI document: 1.1.32


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DownloadHistoryDataList } from '../models';
// @ts-ignore
import { EditorialCategoryResults } from '../models';
// @ts-ignore
import { EditorialContent } from '../models';
// @ts-ignore
import { EditorialContentDataList } from '../models';
// @ts-ignore
import { EditorialImageCategoryResults } from '../models';
// @ts-ignore
import { EditorialImageContentDataList } from '../models';
// @ts-ignore
import { EditorialImageLivefeed } from '../models';
// @ts-ignore
import { EditorialImageLivefeedList } from '../models';
// @ts-ignore
import { EditorialLivefeed } from '../models';
// @ts-ignore
import { EditorialLivefeedList } from '../models';
// @ts-ignore
import { EditorialSearchResults } from '../models';
// @ts-ignore
import { EditorialUpdatedResults } from '../models';
// @ts-ignore
import { ISOCountryCode } from '../models';
// @ts-ignore
import { LicenseEditorialContent } from '../models';
// @ts-ignore
import { LicenseEditorialContentRequest } from '../models';
// @ts-ignore
import { LicenseEditorialContentResults } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EditorialImagesApi - axios parameter creator
 * @export
 */
export const EditorialImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deprecated; use `GET /v2/editorial/images/{id}` instead to show information about an editorial image, including a URL to a preview image and the sizes that it is available in.
         * @summary (Deprecated) Get editorial content details
         * @param {string} id Editorial ID
         * @param {string} country Returns only if the content is available for distribution in a certain country
         * @param {string} [searchId] The ID of the search that is related to this request
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getDetails: async (id: string, country: string, searchId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDetails', 'id', id)
            // verify required parameter 'country' is not null or undefined
            assertParamExists('getDetails', 'country', country)
            const localVarPath = `/v2/editorial/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
         * @summary Get editorial content details
         * @param {string} id Editorial ID
         * @param {string} country Returns only if the content is available for distribution in a certain country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageDetails: async (id: string, country: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getImageDetails', 'id', id)
            // verify required parameter 'country' is not null or undefined
            assertParamExists('getImageDetails', 'country', country)
            const localVarPath = `/v2/editorial/images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/images/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get editorial livefeed
         * @param {string} id Editorial livefeed ID; must be an URI encoded string
         * @param {string} country Returns only if the livefeed is available for distribution in a certain country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLivefeedImages: async (id: string, country: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLivefeedImages', 'id', id)
            // verify required parameter 'country' is not null or undefined
            assertParamExists('getLivefeedImages', 'country', country)
            const localVarPath = `/v2/editorial/images/livefeeds/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/images/livefeeds/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get editorial livefeed items
         * @param {string} id Editorial livefeed ID; must be an URI encoded string
         * @param {string} country Returns only if the livefeed items are available for distribution in a certain country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLivefeedItems: async (id: string, country: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLivefeedItems', 'id', id)
            // verify required parameter 'country' is not null or undefined
            assertParamExists('getLivefeedItems', 'country', country)
            const localVarPath = `/v2/editorial/images/livefeeds/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/images/livefeeds/{id}/items',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deprecated: use `GET /v2/editorial/images/livefeeds/{id}` instead to get an editorial livefeed.
         * @summary (Deprecated) Get editorial livefeed
         * @param {string} id Editorial livefeed ID; must be an URI encoded string
         * @param {string} country Returns only if the livefeed is available for distribution in a certain country
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getLivefeedItems_1: async (id: string, country: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLivefeedItems_1', 'id', id)
            // verify required parameter 'country' is not null or undefined
            assertParamExists('getLivefeedItems_1', 'country', country)
            const localVarPath = `/v2/editorial/livefeeds/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/livefeeds/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deprecated; use `GET /v2/editorial/images/livefeeds/{id}/items` instead to get editorial livefeed items.
         * @summary (Deprecated) Get editorial livefeed items
         * @param {string} id Editorial livefeed ID; must be an URI encoded string
         * @param {string} country Returns only if the livefeed items are available for distribution in a certain country
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getLivefeedItems_2: async (id: string, country: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLivefeedItems_2', 'id', id)
            // verify required parameter 'country' is not null or undefined
            assertParamExists('getLivefeedItems_2', 'country', country)
            const localVarPath = `/v2/editorial/livefeeds/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/livefeeds/{id}/items',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deprecated; use `GET /v2/editorial/images/livefeeds` instead to get a list of editorial livefeeds.
         * @summary (Deprecated) Get editorial livefeed list
         * @param {string} country Returns only livefeeds that are available for distribution in a certain country
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getLivefeedList: async (country: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'country' is not null or undefined
            assertParamExists('getLivefeedList', 'country', country)
            const localVarPath = `/v2/editorial/livefeeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/livefeeds',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gets licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
         * @summary License editorial content
         * @param {LicenseEditorialContentRequest} licenseEditorialContentRequest License editorial content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        licenseContent: async (licenseEditorialContentRequest: LicenseEditorialContentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'licenseEditorialContentRequest' is not null or undefined
            assertParamExists('licenseContent', 'licenseEditorialContentRequest', licenseEditorialContentRequest)
            const localVarPath = `/v2/editorial/images/licenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["licenses.create", "purchases.view"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: licenseEditorialContentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/images/licenses',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(licenseEditorialContentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deprecated; use `POST /v2/editorial/images/licenses` instead to get licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
         * @summary (Deprecated) License editorial content
         * @param {LicenseEditorialContentRequest} licenseEditorialContentRequest License editorial content
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        licenseContent_3: async (licenseEditorialContentRequest: LicenseEditorialContentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'licenseEditorialContentRequest' is not null or undefined
            assertParamExists('licenseContent_3', 'licenseEditorialContentRequest', licenseEditorialContentRequest)
            const localVarPath = `/v2/editorial/licenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["licenses.create"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: licenseEditorialContentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/licenses',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(licenseEditorialContentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deprecated; use `GET /v2/editorial/images/categories` instead. This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
         * @summary (Deprecated) List editorial categories
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listCategories: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/editorial/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/categories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
         * @summary List editorial categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories_4: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/editorial/images/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/images/categories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists existing editorial image licenses.
         * @summary List editorial image licenses
         * @param {string} [imageId] Show licenses for the specified editorial image ID
         * @param {string} [license] Show editorial images that are available with the specified license name
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {'newest' | 'oldest'} [sort] Sort order
         * @param {string} [username] Filter licenses by username of licensee
         * @param {string} [startDate] Show licenses created on or after the specified date
         * @param {string} [endDate] Show licenses created before the specified date
         * @param {'all' | 'downloadable' | 'non_downloadable'} [downloadAvailability] Filter licenses by download availability
         * @param {boolean} [teamHistory] Set to true to see license history for all members of your team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLicenses: async (imageId?: string, license?: string, page?: number, perPage?: number, sort?: 'newest' | 'oldest', username?: string, startDate?: string, endDate?: string, downloadAvailability?: 'all' | 'downloadable' | 'non_downloadable', teamHistory?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/editorial/images/licenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["licenses.view"], configuration)
            if (imageId !== undefined) {
                localVarQueryParameter['image_id'] = imageId;
            }

            if (license !== undefined) {
                localVarQueryParameter['license'] = license;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (downloadAvailability !== undefined) {
                localVarQueryParameter['download_availability'] = downloadAvailability;
            }

            if (teamHistory !== undefined) {
                localVarQueryParameter['team_history'] = teamHistory;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/images/licenses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get editorial livefeed list
         * @param {string} country Returns only livefeeds that are available for distribution in a certain country
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLivefeedImages: async (country: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'country' is not null or undefined
            assertParamExists('listLivefeedImages', 'country', country)
            const localVarPath = `/v2/editorial/images/livefeeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/images/livefeeds',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists editorial images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the date_updated_start and date_updated_end parameters to specify a range updates based on when the updates happened. You can also use the date_taken_start and date_taken_end parameters to specify a range of updates based on when the image was taken.
         * @summary List updated content
         * @param {'edit' | 'addition'} type Specify &#x60;addition&#x60; to return only images that were added or &#x60;edit&#x60; to return only images that were edited or deleted
         * @param {string} dateUpdatedStart Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
         * @param {string} dateUpdatedEnd Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
         * @param {string} country Show only editorial content that is available for distribution in a certain country
         * @param {string | Date} [dateTakenStart] Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets
         * @param {string | Date} [dateTakenEnd] Show images that were taken before the specified date
         * @param {string} [cursor] The cursor of the page with which to start fetching results; this cursor is returned from previous requests
         * @param {'newest' | 'oldest'} [sort] Sort by
         * @param {Array<string>} [supplierCode] Show only editorial content from certain suppliers
         * @param {number} [perPage] Number of results per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUpdatedContent: async (type: 'edit' | 'addition', dateUpdatedStart: string, dateUpdatedEnd: string, country: string, dateTakenStart?: string | Date, dateTakenEnd?: string | Date, cursor?: string, sort?: 'newest' | 'oldest', supplierCode?: Array<string>, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('listUpdatedContent', 'type', type)
            // verify required parameter 'dateUpdatedStart' is not null or undefined
            assertParamExists('listUpdatedContent', 'dateUpdatedStart', dateUpdatedStart)
            // verify required parameter 'dateUpdatedEnd' is not null or undefined
            assertParamExists('listUpdatedContent', 'dateUpdatedEnd', dateUpdatedEnd)
            // verify required parameter 'country' is not null or undefined
            assertParamExists('listUpdatedContent', 'country', country)
            const localVarPath = `/v2/editorial/images/updated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (dateUpdatedStart !== undefined) {
                localVarQueryParameter['date_updated_start'] = (dateUpdatedStart as any instanceof Date) ?
                    (dateUpdatedStart as any).toISOString() :
                    dateUpdatedStart;
            }

            if (dateUpdatedEnd !== undefined) {
                localVarQueryParameter['date_updated_end'] = (dateUpdatedEnd as any instanceof Date) ?
                    (dateUpdatedEnd as any).toISOString() :
                    dateUpdatedEnd;
            }

            if (dateTakenStart !== undefined) {
                localVarQueryParameter['date_taken_start'] = (dateTakenStart as any instanceof Date) ?
                    (dateTakenStart as any).toISOString().substr(0,10) :
                    dateTakenStart;
            }

            if (dateTakenEnd !== undefined) {
                localVarQueryParameter['date_taken_end'] = (dateTakenEnd as any instanceof Date) ?
                    (dateTakenEnd as any).toISOString().substr(0,10) :
                    dateTakenEnd;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (supplierCode) {
                localVarQueryParameter['supplier_code'] = supplierCode;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/images/updated',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deprecated; use `GET /v2/editorial/images/updated` instead to get recently updated items.
         * @summary (Deprecated) List updated content
         * @param {'edit' | 'addition'} type Specify &#x60;addition&#x60; to return only images that were added or &#x60;edit&#x60; to return only images that were edited or deleted
         * @param {string} dateUpdatedStart Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
         * @param {string} dateUpdatedEnd Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
         * @param {string} country Show only editorial content that is available for distribution in a certain country
         * @param {string | Date} [dateTakenStart] Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets
         * @param {string | Date} [dateTakenEnd] Show images that were taken before the specified date
         * @param {string} [cursor] The cursor of the page with which to start fetching results; this cursor is returned from previous requests
         * @param {'newest' | 'oldest'} [sort] Sort by
         * @param {Array<string>} [supplierCode] Show only editorial content from certain suppliers
         * @param {number} [perPage] Number of results per page
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listUpdatedContent_5: async (type: 'edit' | 'addition', dateUpdatedStart: string, dateUpdatedEnd: string, country: string, dateTakenStart?: string | Date, dateTakenEnd?: string | Date, cursor?: string, sort?: 'newest' | 'oldest', supplierCode?: Array<string>, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('listUpdatedContent_5', 'type', type)
            // verify required parameter 'dateUpdatedStart' is not null or undefined
            assertParamExists('listUpdatedContent_5', 'dateUpdatedStart', dateUpdatedStart)
            // verify required parameter 'dateUpdatedEnd' is not null or undefined
            assertParamExists('listUpdatedContent_5', 'dateUpdatedEnd', dateUpdatedEnd)
            // verify required parameter 'country' is not null or undefined
            assertParamExists('listUpdatedContent_5', 'country', country)
            const localVarPath = `/v2/editorial/updated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (dateUpdatedStart !== undefined) {
                localVarQueryParameter['date_updated_start'] = (dateUpdatedStart as any instanceof Date) ?
                    (dateUpdatedStart as any).toISOString() :
                    dateUpdatedStart;
            }

            if (dateUpdatedEnd !== undefined) {
                localVarQueryParameter['date_updated_end'] = (dateUpdatedEnd as any instanceof Date) ?
                    (dateUpdatedEnd as any).toISOString() :
                    dateUpdatedEnd;
            }

            if (dateTakenStart !== undefined) {
                localVarQueryParameter['date_taken_start'] = (dateTakenStart as any instanceof Date) ?
                    (dateTakenStart as any).toISOString().substr(0,10) :
                    dateTakenStart;
            }

            if (dateTakenEnd !== undefined) {
                localVarQueryParameter['date_taken_end'] = (dateTakenEnd as any instanceof Date) ?
                    (dateTakenEnd as any).toISOString().substr(0,10) :
                    dateTakenEnd;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (supplierCode) {
                localVarQueryParameter['supplier_code'] = supplierCode;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/updated',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint searches for editorial images. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the `category` parameter to \"Alone,Performing\" and also specify a `query` parameter, the results include only images that match the query and are in both the Alone and Performing categories. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
         * @summary Search editorial images
         * @param {string} country Show only editorial content that is available for distribution in a certain country
         * @param {string} [query] One or more search terms separated by spaces
         * @param {'relevant' | 'newest' | 'oldest'} [sort] Sort by
         * @param {string} [category] Show editorial content with each of the specified editorial categories; specify category names in a comma-separated list
         * @param {Array<string>} [supplierCode] Show only editorial content from certain suppliers
         * @param {string | Date} [dateStart] Show only editorial content generated on or after a specific date
         * @param {string | Date} [dateEnd] Show only editorial content generated on or before a specific date
         * @param {number} [perPage] Number of results per page
         * @param {string} [cursor] The cursor of the page with which to start fetching results; this cursor is returned from previous requests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: async (country: string, query?: string, sort?: 'relevant' | 'newest' | 'oldest', category?: string, supplierCode?: Array<string>, dateStart?: string | Date, dateEnd?: string | Date, perPage?: number, cursor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'country' is not null or undefined
            assertParamExists('search', 'country', country)
            const localVarPath = `/v2/editorial/images/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (supplierCode) {
                localVarQueryParameter['supplier_code'] = supplierCode;
            }

            if (dateStart !== undefined) {
                localVarQueryParameter['date_start'] = (dateStart as any instanceof Date) ?
                    (dateStart as any).toISOString().substr(0,10) :
                    dateStart;
            }

            if (dateEnd !== undefined) {
                localVarQueryParameter['date_end'] = (dateEnd as any instanceof Date) ?
                    (dateEnd as any).toISOString().substr(0,10) :
                    dateEnd;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/images/search',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deprecated; use `GET /v2/editorial/images/search` instead to search for editorial images.
         * @summary (Deprecated) Search editorial content
         * @param {string} country Show only editorial content that is available for distribution in a certain country
         * @param {string} [query] One or more search terms separated by spaces
         * @param {'relevant' | 'newest' | 'oldest'} [sort] Sort by
         * @param {string} [category] Show editorial content within a certain editorial category; specify by category name
         * @param {Array<string>} [supplierCode] Show only editorial content from certain suppliers
         * @param {string | Date} [dateStart] Show only editorial content generated on or after a specific date
         * @param {string | Date} [dateEnd] Show only editorial content generated on or before a specific date
         * @param {number} [perPage] Number of results per page
         * @param {string} [cursor] The cursor of the page with which to start fetching results; this cursor is returned from previous requests
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        searchContent: async (country: string, query?: string, sort?: 'relevant' | 'newest' | 'oldest', category?: string, supplierCode?: Array<string>, dateStart?: string | Date, dateEnd?: string | Date, perPage?: number, cursor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'country' is not null or undefined
            assertParamExists('searchContent', 'country', country)
            const localVarPath = `/v2/editorial/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (supplierCode) {
                localVarQueryParameter['supplier_code'] = supplierCode;
            }

            if (dateStart !== undefined) {
                localVarQueryParameter['date_start'] = (dateStart as any instanceof Date) ?
                    (dateStart as any).toISOString().substr(0,10) :
                    dateStart;
            }

            if (dateEnd !== undefined) {
                localVarQueryParameter['date_end'] = (dateEnd as any instanceof Date) ?
                    (dateEnd as any).toISOString().substr(0,10) :
                    dateEnd;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/search',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EditorialImagesApi - functional programming interface
 * @export
 */
export const EditorialImagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EditorialImagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Deprecated; use `GET /v2/editorial/images/{id}` instead to show information about an editorial image, including a URL to a preview image and the sizes that it is available in.
         * @summary (Deprecated) Get editorial content details
         * @param {EditorialImagesApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: EditorialImagesApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditorialContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.id, requestParameters.country, requestParameters.searchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
         * @summary Get editorial content details
         * @param {EditorialImagesApiGetImageDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageDetails(requestParameters: EditorialImagesApiGetImageDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditorialContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageDetails(requestParameters.id, requestParameters.country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get editorial livefeed
         * @param {EditorialImagesApiGetLivefeedImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLivefeedImages(requestParameters: EditorialImagesApiGetLivefeedImagesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditorialImageLivefeed>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLivefeedImages(requestParameters.id, requestParameters.country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get editorial livefeed items
         * @param {EditorialImagesApiGetLivefeedItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLivefeedItems(requestParameters: EditorialImagesApiGetLivefeedItemsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditorialImageContentDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLivefeedItems(requestParameters.id, requestParameters.country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deprecated: use `GET /v2/editorial/images/livefeeds/{id}` instead to get an editorial livefeed.
         * @summary (Deprecated) Get editorial livefeed
         * @param {EditorialImagesApiGetLivefeedItems0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getLivefeedItems_1(requestParameters: EditorialImagesApiGetLivefeedItems0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditorialLivefeed>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLivefeedItems_1(requestParameters.id, requestParameters.country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deprecated; use `GET /v2/editorial/images/livefeeds/{id}/items` instead to get editorial livefeed items.
         * @summary (Deprecated) Get editorial livefeed items
         * @param {EditorialImagesApiGetLivefeedItems1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getLivefeedItems_2(requestParameters: EditorialImagesApiGetLivefeedItems1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditorialContentDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLivefeedItems_2(requestParameters.id, requestParameters.country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deprecated; use `GET /v2/editorial/images/livefeeds` instead to get a list of editorial livefeeds.
         * @summary (Deprecated) Get editorial livefeed list
         * @param {EditorialImagesApiGetLivefeedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getLivefeedList(requestParameters: EditorialImagesApiGetLivefeedListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditorialLivefeedList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLivefeedList(requestParameters.country, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gets licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
         * @summary License editorial content
         * @param {EditorialImagesApiLicenseContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async licenseContent(requestParameters: EditorialImagesApiLicenseContentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LicenseEditorialContentResults>> {
            const licenseEditorialContentRequest: LicenseEditorialContentRequest = {
                country: requestParameters.country,
                editorial: requestParameters.editorial
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.licenseContent(licenseEditorialContentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deprecated; use `POST /v2/editorial/images/licenses` instead to get licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
         * @summary (Deprecated) License editorial content
         * @param {EditorialImagesApiLicenseContent0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async licenseContent_3(requestParameters: EditorialImagesApiLicenseContent0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LicenseEditorialContentResults>> {
            const licenseEditorialContentRequest: LicenseEditorialContentRequest = {
                country: requestParameters.country,
                editorial: requestParameters.editorial
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.licenseContent_3(licenseEditorialContentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deprecated; use `GET /v2/editorial/images/categories` instead. This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
         * @summary (Deprecated) List editorial categories
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async listCategories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditorialCategoryResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCategories(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
         * @summary List editorial categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCategories_4(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditorialImageCategoryResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCategories_4(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists existing editorial image licenses.
         * @summary List editorial image licenses
         * @param {EditorialImagesApiListLicensesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLicenses(requestParameters: EditorialImagesApiListLicensesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadHistoryDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLicenses(requestParameters.imageId, requestParameters.license, requestParameters.page, requestParameters.perPage, requestParameters.sort, requestParameters.username, requestParameters.startDate, requestParameters.endDate, requestParameters.downloadAvailability, requestParameters.teamHistory, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get editorial livefeed list
         * @param {EditorialImagesApiListLivefeedImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLivefeedImages(requestParameters: EditorialImagesApiListLivefeedImagesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditorialImageLivefeedList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLivefeedImages(requestParameters.country, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists editorial images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the date_updated_start and date_updated_end parameters to specify a range updates based on when the updates happened. You can also use the date_taken_start and date_taken_end parameters to specify a range of updates based on when the image was taken.
         * @summary List updated content
         * @param {EditorialImagesApiListUpdatedContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUpdatedContent(requestParameters: EditorialImagesApiListUpdatedContentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditorialUpdatedResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUpdatedContent(requestParameters.type, requestParameters.dateUpdatedStart, requestParameters.dateUpdatedEnd, requestParameters.country, requestParameters.dateTakenStart, requestParameters.dateTakenEnd, requestParameters.cursor, requestParameters.sort, requestParameters.supplierCode, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deprecated; use `GET /v2/editorial/images/updated` instead to get recently updated items.
         * @summary (Deprecated) List updated content
         * @param {EditorialImagesApiListUpdatedContent0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async listUpdatedContent_5(requestParameters: EditorialImagesApiListUpdatedContent0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditorialUpdatedResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUpdatedContent_5(requestParameters.type, requestParameters.dateUpdatedStart, requestParameters.dateUpdatedEnd, requestParameters.country, requestParameters.dateTakenStart, requestParameters.dateTakenEnd, requestParameters.cursor, requestParameters.sort, requestParameters.supplierCode, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint searches for editorial images. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the `category` parameter to \"Alone,Performing\" and also specify a `query` parameter, the results include only images that match the query and are in both the Alone and Performing categories. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
         * @summary Search editorial images
         * @param {EditorialImagesApiSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async search(requestParameters: EditorialImagesApiSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditorialSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(requestParameters.country, requestParameters.query, requestParameters.sort, requestParameters.category, requestParameters.supplierCode, requestParameters.dateStart, requestParameters.dateEnd, requestParameters.perPage, requestParameters.cursor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deprecated; use `GET /v2/editorial/images/search` instead to search for editorial images.
         * @summary (Deprecated) Search editorial content
         * @param {EditorialImagesApiSearchContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async searchContent(requestParameters: EditorialImagesApiSearchContentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditorialSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchContent(requestParameters.country, requestParameters.query, requestParameters.sort, requestParameters.category, requestParameters.supplierCode, requestParameters.dateStart, requestParameters.dateEnd, requestParameters.perPage, requestParameters.cursor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EditorialImagesApi - factory interface
 * @export
 */
export const EditorialImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EditorialImagesApiFp(configuration)
    return {
        /**
         * Deprecated; use `GET /v2/editorial/images/{id}` instead to show information about an editorial image, including a URL to a preview image and the sizes that it is available in.
         * @summary (Deprecated) Get editorial content details
         * @param {EditorialImagesApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getDetails(requestParameters: EditorialImagesApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<EditorialContent> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
         * @summary Get editorial content details
         * @param {EditorialImagesApiGetImageDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageDetails(requestParameters: EditorialImagesApiGetImageDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<EditorialContent> {
            return localVarFp.getImageDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get editorial livefeed
         * @param {EditorialImagesApiGetLivefeedImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLivefeedImages(requestParameters: EditorialImagesApiGetLivefeedImagesRequest, options?: AxiosRequestConfig): AxiosPromise<EditorialImageLivefeed> {
            return localVarFp.getLivefeedImages(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get editorial livefeed items
         * @param {EditorialImagesApiGetLivefeedItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLivefeedItems(requestParameters: EditorialImagesApiGetLivefeedItemsRequest, options?: AxiosRequestConfig): AxiosPromise<EditorialImageContentDataList> {
            return localVarFp.getLivefeedItems(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deprecated: use `GET /v2/editorial/images/livefeeds/{id}` instead to get an editorial livefeed.
         * @summary (Deprecated) Get editorial livefeed
         * @param {EditorialImagesApiGetLivefeedItems0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getLivefeedItems_1(requestParameters: EditorialImagesApiGetLivefeedItems0Request, options?: AxiosRequestConfig): AxiosPromise<EditorialLivefeed> {
            return localVarFp.getLivefeedItems_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deprecated; use `GET /v2/editorial/images/livefeeds/{id}/items` instead to get editorial livefeed items.
         * @summary (Deprecated) Get editorial livefeed items
         * @param {EditorialImagesApiGetLivefeedItems1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getLivefeedItems_2(requestParameters: EditorialImagesApiGetLivefeedItems1Request, options?: AxiosRequestConfig): AxiosPromise<EditorialContentDataList> {
            return localVarFp.getLivefeedItems_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deprecated; use `GET /v2/editorial/images/livefeeds` instead to get a list of editorial livefeeds.
         * @summary (Deprecated) Get editorial livefeed list
         * @param {EditorialImagesApiGetLivefeedListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getLivefeedList(requestParameters: EditorialImagesApiGetLivefeedListRequest, options?: AxiosRequestConfig): AxiosPromise<EditorialLivefeedList> {
            return localVarFp.getLivefeedList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gets licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
         * @summary License editorial content
         * @param {EditorialImagesApiLicenseContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        licenseContent(requestParameters: EditorialImagesApiLicenseContentRequest, options?: AxiosRequestConfig): AxiosPromise<LicenseEditorialContentResults> {
            return localVarFp.licenseContent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deprecated; use `POST /v2/editorial/images/licenses` instead to get licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
         * @summary (Deprecated) License editorial content
         * @param {EditorialImagesApiLicenseContent0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        licenseContent_3(requestParameters: EditorialImagesApiLicenseContent0Request, options?: AxiosRequestConfig): AxiosPromise<LicenseEditorialContentResults> {
            return localVarFp.licenseContent_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deprecated; use `GET /v2/editorial/images/categories` instead. This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
         * @summary (Deprecated) List editorial categories
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listCategories(options?: AxiosRequestConfig): AxiosPromise<EditorialCategoryResults> {
            return localVarFp.listCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
         * @summary List editorial categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories_4(options?: AxiosRequestConfig): AxiosPromise<EditorialImageCategoryResults> {
            return localVarFp.listCategories_4(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists existing editorial image licenses.
         * @summary List editorial image licenses
         * @param {EditorialImagesApiListLicensesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLicenses(requestParameters: EditorialImagesApiListLicensesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DownloadHistoryDataList> {
            return localVarFp.listLicenses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get editorial livefeed list
         * @param {EditorialImagesApiListLivefeedImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLivefeedImages(requestParameters: EditorialImagesApiListLivefeedImagesRequest, options?: AxiosRequestConfig): AxiosPromise<EditorialImageLivefeedList> {
            return localVarFp.listLivefeedImages(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists editorial images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the date_updated_start and date_updated_end parameters to specify a range updates based on when the updates happened. You can also use the date_taken_start and date_taken_end parameters to specify a range of updates based on when the image was taken.
         * @summary List updated content
         * @param {EditorialImagesApiListUpdatedContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUpdatedContent(requestParameters: EditorialImagesApiListUpdatedContentRequest, options?: AxiosRequestConfig): AxiosPromise<EditorialUpdatedResults> {
            return localVarFp.listUpdatedContent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deprecated; use `GET /v2/editorial/images/updated` instead to get recently updated items.
         * @summary (Deprecated) List updated content
         * @param {EditorialImagesApiListUpdatedContent0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listUpdatedContent_5(requestParameters: EditorialImagesApiListUpdatedContent0Request, options?: AxiosRequestConfig): AxiosPromise<EditorialUpdatedResults> {
            return localVarFp.listUpdatedContent_5(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint searches for editorial images. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the `category` parameter to \"Alone,Performing\" and also specify a `query` parameter, the results include only images that match the query and are in both the Alone and Performing categories. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
         * @summary Search editorial images
         * @param {EditorialImagesApiSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(requestParameters: EditorialImagesApiSearchRequest, options?: AxiosRequestConfig): AxiosPromise<EditorialSearchResults> {
            return localVarFp.search(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deprecated; use `GET /v2/editorial/images/search` instead to search for editorial images.
         * @summary (Deprecated) Search editorial content
         * @param {EditorialImagesApiSearchContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        searchContent(requestParameters: EditorialImagesApiSearchContentRequest, options?: AxiosRequestConfig): AxiosPromise<EditorialSearchResults> {
            return localVarFp.searchContent(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDetails operation in EditorialImagesApi.
 * @export
 * @interface EditorialImagesApiGetDetailsRequest
 */
export type EditorialImagesApiGetDetailsRequest = {
    
    /**
    * Editorial ID
    * @type {string}
    * @memberof EditorialImagesApiGetDetails
    */
    readonly id: string
    
    /**
    * Returns only if the content is available for distribution in a certain country
    * @type {string}
    * @memberof EditorialImagesApiGetDetails
    */
    readonly country: string
    
    /**
    * The ID of the search that is related to this request
    * @type {string}
    * @memberof EditorialImagesApiGetDetails
    */
    readonly searchId?: string
    
}

/**
 * Request parameters for getImageDetails operation in EditorialImagesApi.
 * @export
 * @interface EditorialImagesApiGetImageDetailsRequest
 */
export type EditorialImagesApiGetImageDetailsRequest = {
    
    /**
    * Editorial ID
    * @type {string}
    * @memberof EditorialImagesApiGetImageDetails
    */
    readonly id: string
    
    /**
    * Returns only if the content is available for distribution in a certain country
    * @type {string}
    * @memberof EditorialImagesApiGetImageDetails
    */
    readonly country: string
    
}

/**
 * Request parameters for getLivefeedImages operation in EditorialImagesApi.
 * @export
 * @interface EditorialImagesApiGetLivefeedImagesRequest
 */
export type EditorialImagesApiGetLivefeedImagesRequest = {
    
    /**
    * Editorial livefeed ID; must be an URI encoded string
    * @type {string}
    * @memberof EditorialImagesApiGetLivefeedImages
    */
    readonly id: string
    
    /**
    * Returns only if the livefeed is available for distribution in a certain country
    * @type {string}
    * @memberof EditorialImagesApiGetLivefeedImages
    */
    readonly country: string
    
}

/**
 * Request parameters for getLivefeedItems operation in EditorialImagesApi.
 * @export
 * @interface EditorialImagesApiGetLivefeedItemsRequest
 */
export type EditorialImagesApiGetLivefeedItemsRequest = {
    
    /**
    * Editorial livefeed ID; must be an URI encoded string
    * @type {string}
    * @memberof EditorialImagesApiGetLivefeedItems
    */
    readonly id: string
    
    /**
    * Returns only if the livefeed items are available for distribution in a certain country
    * @type {string}
    * @memberof EditorialImagesApiGetLivefeedItems
    */
    readonly country: string
    
}

/**
 * Request parameters for getLivefeedItems_1 operation in EditorialImagesApi.
 * @export
 * @interface EditorialImagesApiGetLivefeedItems0Request
 */
export type EditorialImagesApiGetLivefeedItems0Request = {
    
    /**
    * Editorial livefeed ID; must be an URI encoded string
    * @type {string}
    * @memberof EditorialImagesApiGetLivefeedItems0
    */
    readonly id: string
    
    /**
    * Returns only if the livefeed is available for distribution in a certain country
    * @type {string}
    * @memberof EditorialImagesApiGetLivefeedItems0
    */
    readonly country: string
    
}

/**
 * Request parameters for getLivefeedItems_2 operation in EditorialImagesApi.
 * @export
 * @interface EditorialImagesApiGetLivefeedItems1Request
 */
export type EditorialImagesApiGetLivefeedItems1Request = {
    
    /**
    * Editorial livefeed ID; must be an URI encoded string
    * @type {string}
    * @memberof EditorialImagesApiGetLivefeedItems1
    */
    readonly id: string
    
    /**
    * Returns only if the livefeed items are available for distribution in a certain country
    * @type {string}
    * @memberof EditorialImagesApiGetLivefeedItems1
    */
    readonly country: string
    
}

/**
 * Request parameters for getLivefeedList operation in EditorialImagesApi.
 * @export
 * @interface EditorialImagesApiGetLivefeedListRequest
 */
export type EditorialImagesApiGetLivefeedListRequest = {
    
    /**
    * Returns only livefeeds that are available for distribution in a certain country
    * @type {string}
    * @memberof EditorialImagesApiGetLivefeedList
    */
    readonly country: string
    
    /**
    * Page number
    * @type {number}
    * @memberof EditorialImagesApiGetLivefeedList
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof EditorialImagesApiGetLivefeedList
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for licenseContent operation in EditorialImagesApi.
 * @export
 * @interface EditorialImagesApiLicenseContentRequest
 */
export type EditorialImagesApiLicenseContentRequest = {
    
} & LicenseEditorialContentRequest

/**
 * Request parameters for licenseContent_3 operation in EditorialImagesApi.
 * @export
 * @interface EditorialImagesApiLicenseContent0Request
 */
export type EditorialImagesApiLicenseContent0Request = {
    
} & LicenseEditorialContentRequest

/**
 * Request parameters for listLicenses operation in EditorialImagesApi.
 * @export
 * @interface EditorialImagesApiListLicensesRequest
 */
export type EditorialImagesApiListLicensesRequest = {
    
    /**
    * Show licenses for the specified editorial image ID
    * @type {string}
    * @memberof EditorialImagesApiListLicenses
    */
    readonly imageId?: string
    
    /**
    * Show editorial images that are available with the specified license name
    * @type {string}
    * @memberof EditorialImagesApiListLicenses
    */
    readonly license?: string
    
    /**
    * Page number
    * @type {number}
    * @memberof EditorialImagesApiListLicenses
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof EditorialImagesApiListLicenses
    */
    readonly perPage?: number
    
    /**
    * Sort order
    * @type {'newest' | 'oldest'}
    * @memberof EditorialImagesApiListLicenses
    */
    readonly sort?: 'newest' | 'oldest'
    
    /**
    * Filter licenses by username of licensee
    * @type {string}
    * @memberof EditorialImagesApiListLicenses
    */
    readonly username?: string
    
    /**
    * Show licenses created on or after the specified date
    * @type {string}
    * @memberof EditorialImagesApiListLicenses
    */
    readonly startDate?: string
    
    /**
    * Show licenses created before the specified date
    * @type {string}
    * @memberof EditorialImagesApiListLicenses
    */
    readonly endDate?: string
    
    /**
    * Filter licenses by download availability
    * @type {'all' | 'downloadable' | 'non_downloadable'}
    * @memberof EditorialImagesApiListLicenses
    */
    readonly downloadAvailability?: 'all' | 'downloadable' | 'non_downloadable'
    
    /**
    * Set to true to see license history for all members of your team.
    * @type {boolean}
    * @memberof EditorialImagesApiListLicenses
    */
    readonly teamHistory?: boolean
    
}

/**
 * Request parameters for listLivefeedImages operation in EditorialImagesApi.
 * @export
 * @interface EditorialImagesApiListLivefeedImagesRequest
 */
export type EditorialImagesApiListLivefeedImagesRequest = {
    
    /**
    * Returns only livefeeds that are available for distribution in a certain country
    * @type {string}
    * @memberof EditorialImagesApiListLivefeedImages
    */
    readonly country: string
    
    /**
    * Page number
    * @type {number}
    * @memberof EditorialImagesApiListLivefeedImages
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof EditorialImagesApiListLivefeedImages
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for listUpdatedContent operation in EditorialImagesApi.
 * @export
 * @interface EditorialImagesApiListUpdatedContentRequest
 */
export type EditorialImagesApiListUpdatedContentRequest = {
    
    /**
    * Specify `addition` to return only images that were added or `edit` to return only images that were edited or deleted
    * @type {'edit' | 'addition'}
    * @memberof EditorialImagesApiListUpdatedContent
    */
    readonly type: 'edit' | 'addition'
    
    /**
    * Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
    * @type {string}
    * @memberof EditorialImagesApiListUpdatedContent
    */
    readonly dateUpdatedStart: string
    
    /**
    * Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
    * @type {string}
    * @memberof EditorialImagesApiListUpdatedContent
    */
    readonly dateUpdatedEnd: string
    
    /**
    * Show only editorial content that is available for distribution in a certain country
    * @type {string}
    * @memberof EditorialImagesApiListUpdatedContent
    */
    readonly country: string
    
    /**
    * Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets
    * @type {string | Date}
    * @memberof EditorialImagesApiListUpdatedContent
    */
    readonly dateTakenStart?: string | Date
    
    /**
    * Show images that were taken before the specified date
    * @type {string | Date}
    * @memberof EditorialImagesApiListUpdatedContent
    */
    readonly dateTakenEnd?: string | Date
    
    /**
    * The cursor of the page with which to start fetching results; this cursor is returned from previous requests
    * @type {string}
    * @memberof EditorialImagesApiListUpdatedContent
    */
    readonly cursor?: string
    
    /**
    * Sort by
    * @type {'newest' | 'oldest'}
    * @memberof EditorialImagesApiListUpdatedContent
    */
    readonly sort?: 'newest' | 'oldest'
    
    /**
    * Show only editorial content from certain suppliers
    * @type {Array<string>}
    * @memberof EditorialImagesApiListUpdatedContent
    */
    readonly supplierCode?: Array<string>
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof EditorialImagesApiListUpdatedContent
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for listUpdatedContent_5 operation in EditorialImagesApi.
 * @export
 * @interface EditorialImagesApiListUpdatedContent0Request
 */
export type EditorialImagesApiListUpdatedContent0Request = {
    
    /**
    * Specify `addition` to return only images that were added or `edit` to return only images that were edited or deleted
    * @type {'edit' | 'addition'}
    * @memberof EditorialImagesApiListUpdatedContent0
    */
    readonly type: 'edit' | 'addition'
    
    /**
    * Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
    * @type {string}
    * @memberof EditorialImagesApiListUpdatedContent0
    */
    readonly dateUpdatedStart: string
    
    /**
    * Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
    * @type {string}
    * @memberof EditorialImagesApiListUpdatedContent0
    */
    readonly dateUpdatedEnd: string
    
    /**
    * Show only editorial content that is available for distribution in a certain country
    * @type {string}
    * @memberof EditorialImagesApiListUpdatedContent0
    */
    readonly country: string
    
    /**
    * Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets
    * @type {string | Date}
    * @memberof EditorialImagesApiListUpdatedContent0
    */
    readonly dateTakenStart?: string | Date
    
    /**
    * Show images that were taken before the specified date
    * @type {string | Date}
    * @memberof EditorialImagesApiListUpdatedContent0
    */
    readonly dateTakenEnd?: string | Date
    
    /**
    * The cursor of the page with which to start fetching results; this cursor is returned from previous requests
    * @type {string}
    * @memberof EditorialImagesApiListUpdatedContent0
    */
    readonly cursor?: string
    
    /**
    * Sort by
    * @type {'newest' | 'oldest'}
    * @memberof EditorialImagesApiListUpdatedContent0
    */
    readonly sort?: 'newest' | 'oldest'
    
    /**
    * Show only editorial content from certain suppliers
    * @type {Array<string>}
    * @memberof EditorialImagesApiListUpdatedContent0
    */
    readonly supplierCode?: Array<string>
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof EditorialImagesApiListUpdatedContent0
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for search operation in EditorialImagesApi.
 * @export
 * @interface EditorialImagesApiSearchRequest
 */
export type EditorialImagesApiSearchRequest = {
    
    /**
    * Show only editorial content that is available for distribution in a certain country
    * @type {string}
    * @memberof EditorialImagesApiSearch
    */
    readonly country: string
    
    /**
    * One or more search terms separated by spaces
    * @type {string}
    * @memberof EditorialImagesApiSearch
    */
    readonly query?: string
    
    /**
    * Sort by
    * @type {'relevant' | 'newest' | 'oldest'}
    * @memberof EditorialImagesApiSearch
    */
    readonly sort?: 'relevant' | 'newest' | 'oldest'
    
    /**
    * Show editorial content with each of the specified editorial categories; specify category names in a comma-separated list
    * @type {string}
    * @memberof EditorialImagesApiSearch
    */
    readonly category?: string
    
    /**
    * Show only editorial content from certain suppliers
    * @type {Array<string>}
    * @memberof EditorialImagesApiSearch
    */
    readonly supplierCode?: Array<string>
    
    /**
    * Show only editorial content generated on or after a specific date
    * @type {string | Date}
    * @memberof EditorialImagesApiSearch
    */
    readonly dateStart?: string | Date
    
    /**
    * Show only editorial content generated on or before a specific date
    * @type {string | Date}
    * @memberof EditorialImagesApiSearch
    */
    readonly dateEnd?: string | Date
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof EditorialImagesApiSearch
    */
    readonly perPage?: number
    
    /**
    * The cursor of the page with which to start fetching results; this cursor is returned from previous requests
    * @type {string}
    * @memberof EditorialImagesApiSearch
    */
    readonly cursor?: string
    
}

/**
 * Request parameters for searchContent operation in EditorialImagesApi.
 * @export
 * @interface EditorialImagesApiSearchContentRequest
 */
export type EditorialImagesApiSearchContentRequest = {
    
    /**
    * Show only editorial content that is available for distribution in a certain country
    * @type {string}
    * @memberof EditorialImagesApiSearchContent
    */
    readonly country: string
    
    /**
    * One or more search terms separated by spaces
    * @type {string}
    * @memberof EditorialImagesApiSearchContent
    */
    readonly query?: string
    
    /**
    * Sort by
    * @type {'relevant' | 'newest' | 'oldest'}
    * @memberof EditorialImagesApiSearchContent
    */
    readonly sort?: 'relevant' | 'newest' | 'oldest'
    
    /**
    * Show editorial content within a certain editorial category; specify by category name
    * @type {string}
    * @memberof EditorialImagesApiSearchContent
    */
    readonly category?: string
    
    /**
    * Show only editorial content from certain suppliers
    * @type {Array<string>}
    * @memberof EditorialImagesApiSearchContent
    */
    readonly supplierCode?: Array<string>
    
    /**
    * Show only editorial content generated on or after a specific date
    * @type {string | Date}
    * @memberof EditorialImagesApiSearchContent
    */
    readonly dateStart?: string | Date
    
    /**
    * Show only editorial content generated on or before a specific date
    * @type {string | Date}
    * @memberof EditorialImagesApiSearchContent
    */
    readonly dateEnd?: string | Date
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof EditorialImagesApiSearchContent
    */
    readonly perPage?: number
    
    /**
    * The cursor of the page with which to start fetching results; this cursor is returned from previous requests
    * @type {string}
    * @memberof EditorialImagesApiSearchContent
    */
    readonly cursor?: string
    
}

/**
 * EditorialImagesApiGenerated - object-oriented interface
 * @export
 * @class EditorialImagesApiGenerated
 * @extends {BaseAPI}
 */
export class EditorialImagesApiGenerated extends BaseAPI {
    /**
     * Deprecated; use `GET /v2/editorial/images/{id}` instead to show information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * @summary (Deprecated) Get editorial content details
     * @param {EditorialImagesApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EditorialImagesApiGenerated
     */
    public getDetails(requestParameters: EditorialImagesApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return EditorialImagesApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * @summary Get editorial content details
     * @param {EditorialImagesApiGetImageDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorialImagesApiGenerated
     */
    public getImageDetails(requestParameters: EditorialImagesApiGetImageDetailsRequest, options?: AxiosRequestConfig) {
        return EditorialImagesApiFp(this.configuration).getImageDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get editorial livefeed
     * @param {EditorialImagesApiGetLivefeedImagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorialImagesApiGenerated
     */
    public getLivefeedImages(requestParameters: EditorialImagesApiGetLivefeedImagesRequest, options?: AxiosRequestConfig) {
        return EditorialImagesApiFp(this.configuration).getLivefeedImages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get editorial livefeed items
     * @param {EditorialImagesApiGetLivefeedItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorialImagesApiGenerated
     */
    public getLivefeedItems(requestParameters: EditorialImagesApiGetLivefeedItemsRequest, options?: AxiosRequestConfig) {
        return EditorialImagesApiFp(this.configuration).getLivefeedItems(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deprecated: use `GET /v2/editorial/images/livefeeds/{id}` instead to get an editorial livefeed.
     * @summary (Deprecated) Get editorial livefeed
     * @param {EditorialImagesApiGetLivefeedItems0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EditorialImagesApiGenerated
     */
    public getLivefeedItems_1(requestParameters: EditorialImagesApiGetLivefeedItems0Request, options?: AxiosRequestConfig) {
        return EditorialImagesApiFp(this.configuration).getLivefeedItems_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deprecated; use `GET /v2/editorial/images/livefeeds/{id}/items` instead to get editorial livefeed items.
     * @summary (Deprecated) Get editorial livefeed items
     * @param {EditorialImagesApiGetLivefeedItems1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EditorialImagesApiGenerated
     */
    public getLivefeedItems_2(requestParameters: EditorialImagesApiGetLivefeedItems1Request, options?: AxiosRequestConfig) {
        return EditorialImagesApiFp(this.configuration).getLivefeedItems_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deprecated; use `GET /v2/editorial/images/livefeeds` instead to get a list of editorial livefeeds.
     * @summary (Deprecated) Get editorial livefeed list
     * @param {EditorialImagesApiGetLivefeedListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EditorialImagesApiGenerated
     */
    public getLivefeedList(requestParameters: EditorialImagesApiGetLivefeedListRequest, options?: AxiosRequestConfig) {
        return EditorialImagesApiFp(this.configuration).getLivefeedList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gets licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
     * @summary License editorial content
     * @param {EditorialImagesApiLicenseContentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorialImagesApiGenerated
     */
    public licenseContent(requestParameters: EditorialImagesApiLicenseContentRequest, options?: AxiosRequestConfig) {
        return EditorialImagesApiFp(this.configuration).licenseContent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deprecated; use `POST /v2/editorial/images/licenses` instead to get licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
     * @summary (Deprecated) License editorial content
     * @param {EditorialImagesApiLicenseContent0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EditorialImagesApiGenerated
     */
    public licenseContent_3(requestParameters: EditorialImagesApiLicenseContent0Request, options?: AxiosRequestConfig) {
        return EditorialImagesApiFp(this.configuration).licenseContent_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deprecated; use `GET /v2/editorial/images/categories` instead. This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
     * @summary (Deprecated) List editorial categories
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EditorialImagesApiGenerated
     */
    public listCategories(options?: AxiosRequestConfig) {
        return EditorialImagesApiFp(this.configuration).listCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
     * @summary List editorial categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorialImagesApiGenerated
     */
    public listCategories_4(options?: AxiosRequestConfig) {
        return EditorialImagesApiFp(this.configuration).listCategories_4(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists existing editorial image licenses.
     * @summary List editorial image licenses
     * @param {EditorialImagesApiListLicensesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorialImagesApiGenerated
     */
    public listLicenses(requestParameters: EditorialImagesApiListLicensesRequest = {}, options?: AxiosRequestConfig) {
        return EditorialImagesApiFp(this.configuration).listLicenses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get editorial livefeed list
     * @param {EditorialImagesApiListLivefeedImagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorialImagesApiGenerated
     */
    public listLivefeedImages(requestParameters: EditorialImagesApiListLivefeedImagesRequest, options?: AxiosRequestConfig) {
        return EditorialImagesApiFp(this.configuration).listLivefeedImages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists editorial images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the date_updated_start and date_updated_end parameters to specify a range updates based on when the updates happened. You can also use the date_taken_start and date_taken_end parameters to specify a range of updates based on when the image was taken.
     * @summary List updated content
     * @param {EditorialImagesApiListUpdatedContentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorialImagesApiGenerated
     */
    public listUpdatedContent(requestParameters: EditorialImagesApiListUpdatedContentRequest, options?: AxiosRequestConfig) {
        return EditorialImagesApiFp(this.configuration).listUpdatedContent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deprecated; use `GET /v2/editorial/images/updated` instead to get recently updated items.
     * @summary (Deprecated) List updated content
     * @param {EditorialImagesApiListUpdatedContent0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EditorialImagesApiGenerated
     */
    public listUpdatedContent_5(requestParameters: EditorialImagesApiListUpdatedContent0Request, options?: AxiosRequestConfig) {
        return EditorialImagesApiFp(this.configuration).listUpdatedContent_5(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint searches for editorial images. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the `category` parameter to \"Alone,Performing\" and also specify a `query` parameter, the results include only images that match the query and are in both the Alone and Performing categories. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
     * @summary Search editorial images
     * @param {EditorialImagesApiSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorialImagesApiGenerated
     */
    public search(requestParameters: EditorialImagesApiSearchRequest, options?: AxiosRequestConfig) {
        return EditorialImagesApiFp(this.configuration).search(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deprecated; use `GET /v2/editorial/images/search` instead to search for editorial images.
     * @summary (Deprecated) Search editorial content
     * @param {EditorialImagesApiSearchContentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EditorialImagesApiGenerated
     */
    public searchContent(requestParameters: EditorialImagesApiSearchContentRequest, options?: AxiosRequestConfig) {
        return EditorialImagesApiFp(this.configuration).searchContent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
