/* tslint:disable */
/* eslint-disable */
/*
Shutterstock API Explorer

The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

The version of the OpenAPI document: 1.1.32


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TestEcho } from '../models';
// @ts-ignore
import { TestValidate } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TestApi - axios parameter creator
 * @export
 */
export const TestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Echo text
         * @param {string} [text] Text to echo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        echoText: async (text?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/test',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Validate input
         * @param {number} id Integer ID
         * @param {Array<string>} [tag] List of tags
         * @param {string} [userAgent] User agent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inputValidation: async (id: number, tag?: Array<string>, userAgent?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('inputValidation', 'id', id)
            const localVarPath = `/v2/test/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (tag) {
                localVarQueryParameter['tag'] = tag;
            }

            if (userAgent != null) {
                localVarHeaderParameter['user-agent'] = String(userAgent);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/test/validate',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Echo text
         * @param {TestApiEchoTextRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async echoText(requestParameters: TestApiEchoTextRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestEcho>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.echoText(requestParameters.text, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Validate input
         * @param {TestApiInputValidationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inputValidation(requestParameters: TestApiInputValidationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestValidate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inputValidation(requestParameters.id, requestParameters.tag, requestParameters.userAgent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestApiFp(configuration)
    return {
        /**
         * 
         * @summary Echo text
         * @param {TestApiEchoTextRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        echoText(requestParameters: TestApiEchoTextRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TestEcho> {
            return localVarFp.echoText(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Validate input
         * @param {TestApiInputValidationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inputValidation(requestParameters: TestApiInputValidationRequest, options?: AxiosRequestConfig): AxiosPromise<TestValidate> {
            return localVarFp.inputValidation(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for echoText operation in TestApi.
 * @export
 * @interface TestApiEchoTextRequest
 */
export type TestApiEchoTextRequest = {
    
    /**
    * Text to echo
    * @type {string}
    * @memberof TestApiEchoText
    */
    readonly text?: string
    
}

/**
 * Request parameters for inputValidation operation in TestApi.
 * @export
 * @interface TestApiInputValidationRequest
 */
export type TestApiInputValidationRequest = {
    
    /**
    * Integer ID
    * @type {number}
    * @memberof TestApiInputValidation
    */
    readonly id: number
    
    /**
    * List of tags
    * @type {Array<string>}
    * @memberof TestApiInputValidation
    */
    readonly tag?: Array<string>
    
    /**
    * User agent
    * @type {string}
    * @memberof TestApiInputValidation
    */
    readonly userAgent?: string
    
}

/**
 * TestApiGenerated - object-oriented interface
 * @export
 * @class TestApiGenerated
 * @extends {BaseAPI}
 */
export class TestApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Echo text
     * @param {TestApiEchoTextRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApiGenerated
     */
    public echoText(requestParameters: TestApiEchoTextRequest = {}, options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).echoText(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Validate input
     * @param {TestApiInputValidationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApiGenerated
     */
    public inputValidation(requestParameters: TestApiInputValidationRequest, options?: AxiosRequestConfig) {
        return TestApiFp(this.configuration).inputValidation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
