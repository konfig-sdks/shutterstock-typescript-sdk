/* tslint:disable */
/* eslint-disable */
/*
Shutterstock API Explorer

The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

The version of the OpenAPI document: 1.1.32


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ComputerVisionImageCreateResponse } from '../models';
// @ts-ignore
import { ImageCreateRequest } from '../models';
// @ts-ignore
import { ImageCreateResponse } from '../models';
// @ts-ignore
import { ImageSearchResults } from '../models';
// @ts-ignore
import { KeywordDataList } from '../models';
// @ts-ignore
import { Language } from '../models';
// @ts-ignore
import { VideoSearchResults } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ComputerVisionApi - axios parameter creator
 * @export
 */
export const ComputerVisionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint returns images that are visually similar to an image that you specify or upload.
         * @summary List similar images
         * @param {string} assetId The asset ID or upload ID to find similar images for
         * @param {Array<'commercial' | 'editorial'>} [license] Show only images with the specified license
         * @param {boolean} [safe] Enable or disable safe search
         * @param {Language} [language] Language for the keywords and categories in the response
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {'minimal' | 'full'} [view] Amount of detail to render in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSimilarImages: async (assetId: string, license?: Array<'commercial' | 'editorial'>, safe?: boolean, language?: Language, page?: number, perPage?: number, view?: 'minimal' | 'full', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('listSimilarImages', 'assetId', assetId)
            const localVarPath = `/v2/cv/similar/images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (assetId !== undefined) {
                localVarQueryParameter['asset_id'] = assetId;
            }

            if (license) {
                localVarQueryParameter['license'] = license;
            }

            if (safe !== undefined) {
                localVarQueryParameter['safe'] = safe;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/cv/similar/images',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns videos that are visually similar to an image that you specify or upload.
         * @summary List similar videos
         * @param {string} assetId The asset ID or upload ID to find similar videos for
         * @param {Array<'commercial' | 'editorial'>} [license] Show only videos with the specified license
         * @param {boolean} [safe] Enable or disable safe search
         * @param {Language} [language] Language for the keywords and categories in the response
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {'minimal' | 'full'} [view] Amount of detail to render in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSimilarVideos: async (assetId: string, license?: Array<'commercial' | 'editorial'>, safe?: boolean, language?: Language, page?: number, perPage?: number, view?: 'minimal' | 'full', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('listSimilarVideos', 'assetId', assetId)
            const localVarPath = `/v2/cv/similar/videos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (assetId !== undefined) {
                localVarQueryParameter['asset_id'] = assetId;
            }

            if (license) {
                localVarQueryParameter['license'] = license;
            }

            if (safe !== undefined) {
                localVarQueryParameter['safe'] = safe;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/cv/similar/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a list of suggested keywords for a media item that you specify or upload.
         * @summary List suggested keywords
         * @param {ComputervisionListSuggestedKeywordsAssetIdParameter} assetId The asset ID or upload ID to suggest keywords for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSuggestedKeywords: async (assetId: ComputervisionListSuggestedKeywordsAssetIdParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('listSuggestedKeywords', 'assetId', assetId)
            const localVarPath = `/v2/cv/keywords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (assetId !== undefined) {
                localVarQueryParameter['asset_id'] = assetId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/cv/keywords',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint uploads an image for reverse image or video search. Images must be in JPEG or PNG format. To get the search results, pass the upload ID that this endpoint returns to the GET /v2/cv/similar/images or GET /v2/cv/similar/videos endpoints. Contact us for access to this endpoint.
         * @summary Upload images
         * @param {ImageCreateRequest} imageCreateRequest A Base 64 encoded jpeg or png; images can be no larger than 10mb and can be no larger than 10,000 pixels in width or height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadImage: async (imageCreateRequest: ImageCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageCreateRequest' is not null or undefined
            assertParamExists('uploadImage', 'imageCreateRequest', imageCreateRequest)
            const localVarPath = `/v2/cv/images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: imageCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/cv/images',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(imageCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deprecated; use `POST /v2/cv/images` instead. This endpoint uploads an image for reverse image search. The image must be in JPEG or PNG format. To get the search results, pass the ID that this endpoint returns to the `GET /v2/images/{id}/similar` endpoint.
         * @summary Upload ephemeral images
         * @param {ImageCreateRequest} imageCreateRequest The image data in JPEG or PNG format
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        uploadImageEphemeral: async (imageCreateRequest: ImageCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageCreateRequest' is not null or undefined
            assertParamExists('uploadImageEphemeral', 'imageCreateRequest', imageCreateRequest)
            const localVarPath = `/v2/images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: imageCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(imageCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ComputerVisionApi - functional programming interface
 * @export
 */
export const ComputerVisionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ComputerVisionApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint returns images that are visually similar to an image that you specify or upload.
         * @summary List similar images
         * @param {ComputerVisionApiListSimilarImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSimilarImages(requestParameters: ComputerVisionApiListSimilarImagesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSimilarImages(requestParameters.assetId, requestParameters.license, requestParameters.safe, requestParameters.language, requestParameters.page, requestParameters.perPage, requestParameters.view, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns videos that are visually similar to an image that you specify or upload.
         * @summary List similar videos
         * @param {ComputerVisionApiListSimilarVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSimilarVideos(requestParameters: ComputerVisionApiListSimilarVideosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSimilarVideos(requestParameters.assetId, requestParameters.license, requestParameters.safe, requestParameters.language, requestParameters.page, requestParameters.perPage, requestParameters.view, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a list of suggested keywords for a media item that you specify or upload.
         * @summary List suggested keywords
         * @param {ComputerVisionApiListSuggestedKeywordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSuggestedKeywords(requestParameters: ComputerVisionApiListSuggestedKeywordsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeywordDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSuggestedKeywords(requestParameters.assetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint uploads an image for reverse image or video search. Images must be in JPEG or PNG format. To get the search results, pass the upload ID that this endpoint returns to the GET /v2/cv/similar/images or GET /v2/cv/similar/videos endpoints. Contact us for access to this endpoint.
         * @summary Upload images
         * @param {ComputerVisionApiUploadImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadImage(requestParameters: ComputerVisionApiUploadImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComputerVisionImageCreateResponse>> {
            const imageCreateRequest: ImageCreateRequest = {
                base64_image: requestParameters.base64_image
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadImage(imageCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deprecated; use `POST /v2/cv/images` instead. This endpoint uploads an image for reverse image search. The image must be in JPEG or PNG format. To get the search results, pass the ID that this endpoint returns to the `GET /v2/images/{id}/similar` endpoint.
         * @summary Upload ephemeral images
         * @param {ComputerVisionApiUploadImageEphemeralRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async uploadImageEphemeral(requestParameters: ComputerVisionApiUploadImageEphemeralRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageCreateResponse>> {
            const imageCreateRequest: ImageCreateRequest = {
                base64_image: requestParameters.base64_image
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadImageEphemeral(imageCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ComputerVisionApi - factory interface
 * @export
 */
export const ComputerVisionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ComputerVisionApiFp(configuration)
    return {
        /**
         * This endpoint returns images that are visually similar to an image that you specify or upload.
         * @summary List similar images
         * @param {ComputerVisionApiListSimilarImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSimilarImages(requestParameters: ComputerVisionApiListSimilarImagesRequest, options?: AxiosRequestConfig): AxiosPromise<ImageSearchResults> {
            return localVarFp.listSimilarImages(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns videos that are visually similar to an image that you specify or upload.
         * @summary List similar videos
         * @param {ComputerVisionApiListSimilarVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSimilarVideos(requestParameters: ComputerVisionApiListSimilarVideosRequest, options?: AxiosRequestConfig): AxiosPromise<VideoSearchResults> {
            return localVarFp.listSimilarVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a list of suggested keywords for a media item that you specify or upload.
         * @summary List suggested keywords
         * @param {ComputerVisionApiListSuggestedKeywordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSuggestedKeywords(requestParameters: ComputerVisionApiListSuggestedKeywordsRequest, options?: AxiosRequestConfig): AxiosPromise<KeywordDataList> {
            return localVarFp.listSuggestedKeywords(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint uploads an image for reverse image or video search. Images must be in JPEG or PNG format. To get the search results, pass the upload ID that this endpoint returns to the GET /v2/cv/similar/images or GET /v2/cv/similar/videos endpoints. Contact us for access to this endpoint.
         * @summary Upload images
         * @param {ComputerVisionApiUploadImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadImage(requestParameters: ComputerVisionApiUploadImageRequest, options?: AxiosRequestConfig): AxiosPromise<ComputerVisionImageCreateResponse> {
            return localVarFp.uploadImage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deprecated; use `POST /v2/cv/images` instead. This endpoint uploads an image for reverse image search. The image must be in JPEG or PNG format. To get the search results, pass the ID that this endpoint returns to the `GET /v2/images/{id}/similar` endpoint.
         * @summary Upload ephemeral images
         * @param {ComputerVisionApiUploadImageEphemeralRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        uploadImageEphemeral(requestParameters: ComputerVisionApiUploadImageEphemeralRequest, options?: AxiosRequestConfig): AxiosPromise<ImageCreateResponse> {
            return localVarFp.uploadImageEphemeral(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listSimilarImages operation in ComputerVisionApi.
 * @export
 * @interface ComputerVisionApiListSimilarImagesRequest
 */
export type ComputerVisionApiListSimilarImagesRequest = {
    
    /**
    * The asset ID or upload ID to find similar images for
    * @type {string}
    * @memberof ComputerVisionApiListSimilarImages
    */
    readonly assetId: string
    
    /**
    * Show only images with the specified license
    * @type {Array<'commercial' | 'editorial'>}
    * @memberof ComputerVisionApiListSimilarImages
    */
    readonly license?: Array<'commercial' | 'editorial'>
    
    /**
    * Enable or disable safe search
    * @type {boolean}
    * @memberof ComputerVisionApiListSimilarImages
    */
    readonly safe?: boolean
    
    /**
    * Language for the keywords and categories in the response
    * @type {Language}
    * @memberof ComputerVisionApiListSimilarImages
    */
    readonly language?: Language
    
    /**
    * Page number
    * @type {number}
    * @memberof ComputerVisionApiListSimilarImages
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof ComputerVisionApiListSimilarImages
    */
    readonly perPage?: number
    
    /**
    * Amount of detail to render in the response
    * @type {'minimal' | 'full'}
    * @memberof ComputerVisionApiListSimilarImages
    */
    readonly view?: 'minimal' | 'full'
    
}

/**
 * Request parameters for listSimilarVideos operation in ComputerVisionApi.
 * @export
 * @interface ComputerVisionApiListSimilarVideosRequest
 */
export type ComputerVisionApiListSimilarVideosRequest = {
    
    /**
    * The asset ID or upload ID to find similar videos for
    * @type {string}
    * @memberof ComputerVisionApiListSimilarVideos
    */
    readonly assetId: string
    
    /**
    * Show only videos with the specified license
    * @type {Array<'commercial' | 'editorial'>}
    * @memberof ComputerVisionApiListSimilarVideos
    */
    readonly license?: Array<'commercial' | 'editorial'>
    
    /**
    * Enable or disable safe search
    * @type {boolean}
    * @memberof ComputerVisionApiListSimilarVideos
    */
    readonly safe?: boolean
    
    /**
    * Language for the keywords and categories in the response
    * @type {Language}
    * @memberof ComputerVisionApiListSimilarVideos
    */
    readonly language?: Language
    
    /**
    * Page number
    * @type {number}
    * @memberof ComputerVisionApiListSimilarVideos
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof ComputerVisionApiListSimilarVideos
    */
    readonly perPage?: number
    
    /**
    * Amount of detail to render in the response
    * @type {'minimal' | 'full'}
    * @memberof ComputerVisionApiListSimilarVideos
    */
    readonly view?: 'minimal' | 'full'
    
}

/**
 * Request parameters for listSuggestedKeywords operation in ComputerVisionApi.
 * @export
 * @interface ComputerVisionApiListSuggestedKeywordsRequest
 */
export type ComputerVisionApiListSuggestedKeywordsRequest = {
    
    /**
    * The asset ID or upload ID to suggest keywords for
    * @type {ComputervisionListSuggestedKeywordsAssetIdParameter}
    * @memberof ComputerVisionApiListSuggestedKeywords
    */
    readonly assetId: ComputervisionListSuggestedKeywordsAssetIdParameter
    
}

/**
 * Request parameters for uploadImage operation in ComputerVisionApi.
 * @export
 * @interface ComputerVisionApiUploadImageRequest
 */
export type ComputerVisionApiUploadImageRequest = {
    
} & ImageCreateRequest

/**
 * Request parameters for uploadImageEphemeral operation in ComputerVisionApi.
 * @export
 * @interface ComputerVisionApiUploadImageEphemeralRequest
 */
export type ComputerVisionApiUploadImageEphemeralRequest = {
    
} & ImageCreateRequest

/**
 * ComputerVisionApiGenerated - object-oriented interface
 * @export
 * @class ComputerVisionApiGenerated
 * @extends {BaseAPI}
 */
export class ComputerVisionApiGenerated extends BaseAPI {
    /**
     * This endpoint returns images that are visually similar to an image that you specify or upload.
     * @summary List similar images
     * @param {ComputerVisionApiListSimilarImagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComputerVisionApiGenerated
     */
    public listSimilarImages(requestParameters: ComputerVisionApiListSimilarImagesRequest, options?: AxiosRequestConfig) {
        return ComputerVisionApiFp(this.configuration).listSimilarImages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns videos that are visually similar to an image that you specify or upload.
     * @summary List similar videos
     * @param {ComputerVisionApiListSimilarVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComputerVisionApiGenerated
     */
    public listSimilarVideos(requestParameters: ComputerVisionApiListSimilarVideosRequest, options?: AxiosRequestConfig) {
        return ComputerVisionApiFp(this.configuration).listSimilarVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a list of suggested keywords for a media item that you specify or upload.
     * @summary List suggested keywords
     * @param {ComputerVisionApiListSuggestedKeywordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComputerVisionApiGenerated
     */
    public listSuggestedKeywords(requestParameters: ComputerVisionApiListSuggestedKeywordsRequest, options?: AxiosRequestConfig) {
        return ComputerVisionApiFp(this.configuration).listSuggestedKeywords(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint uploads an image for reverse image or video search. Images must be in JPEG or PNG format. To get the search results, pass the upload ID that this endpoint returns to the GET /v2/cv/similar/images or GET /v2/cv/similar/videos endpoints. Contact us for access to this endpoint.
     * @summary Upload images
     * @param {ComputerVisionApiUploadImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComputerVisionApiGenerated
     */
    public uploadImage(requestParameters: ComputerVisionApiUploadImageRequest, options?: AxiosRequestConfig) {
        return ComputerVisionApiFp(this.configuration).uploadImage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deprecated; use `POST /v2/cv/images` instead. This endpoint uploads an image for reverse image search. The image must be in JPEG or PNG format. To get the search results, pass the ID that this endpoint returns to the `GET /v2/images/{id}/similar` endpoint.
     * @summary Upload ephemeral images
     * @param {ComputerVisionApiUploadImageEphemeralRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ComputerVisionApiGenerated
     */
    public uploadImageEphemeral(requestParameters: ComputerVisionApiUploadImageEphemeralRequest, options?: AxiosRequestConfig) {
        return ComputerVisionApiFp(this.configuration).uploadImageEphemeral(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
