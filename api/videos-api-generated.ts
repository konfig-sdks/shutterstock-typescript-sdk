/* tslint:disable */
/* eslint-disable */
/*
Shutterstock API Explorer

The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

The version of the OpenAPI document: 1.1.32


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CategoryDataList } from '../models';
// @ts-ignore
import { Collection } from '../models';
// @ts-ignore
import { CollectionCreateRequest } from '../models';
// @ts-ignore
import { CollectionCreateResponse } from '../models';
// @ts-ignore
import { CollectionDataList } from '../models';
// @ts-ignore
import { CollectionItem } from '../models';
// @ts-ignore
import { CollectionItemDataList } from '../models';
// @ts-ignore
import { CollectionItemRequest } from '../models';
// @ts-ignore
import { CollectionUpdateRequest } from '../models';
// @ts-ignore
import { Cookie } from '../models';
// @ts-ignore
import { DownloadHistoryDataList } from '../models';
// @ts-ignore
import { FeaturedCollection } from '../models';
// @ts-ignore
import { FeaturedCollectionDataList } from '../models';
// @ts-ignore
import { Language } from '../models';
// @ts-ignore
import { LicenseVideo } from '../models';
// @ts-ignore
import { LicenseVideoRequest } from '../models';
// @ts-ignore
import { LicenseVideoResultDataList } from '../models';
// @ts-ignore
import { RedownloadVideo } from '../models';
// @ts-ignore
import { Suggestions } from '../models';
// @ts-ignore
import { UpdatedMediaDataList } from '../models';
// @ts-ignore
import { Url } from '../models';
// @ts-ignore
import { Video } from '../models';
// @ts-ignore
import { VideoCollectionItemDataList } from '../models';
// @ts-ignore
import { VideoDataList } from '../models';
// @ts-ignore
import { VideoSearchResults } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VideosApi - axios parameter creator
 * @export
 */
export const VideosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint adds one or more videos to a collection by video IDs.
         * @summary Add videos to collections
         * @param {string} id The ID of the collection to which items should be added
         * @param {CollectionItemRequest} collectionItemRequest Array of video IDs to add to the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCollectionItems: async (id: string, collectionItemRequest: CollectionItemRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addToCollectionItems', 'id', id)
            // verify required parameter 'collectionItemRequest' is not null or undefined
            assertParamExists('addToCollectionItems', 'collectionItemRequest', collectionItemRequest)
            const localVarPath = `/v2/videos/collections/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: collectionItemRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/collections/{id}/items',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(collectionItemRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gets more detailed information about a featured video collection, including its cover video and timestamps for its creation and most recent update. To get the videos, use `GET /v2/videos/collections/featured/{id}/items`.
         * @summary Get the details of featured video collections
         * @param {string} id Collection ID
         * @param {'share_url'} [embed] What information to include in the response, such as a URL to the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionDetailsGet: async (id: string, embed?: 'share_url', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('collectionDetailsGet', 'id', id)
            const localVarPath = `/v2/videos/collections/featured/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (embed !== undefined) {
                localVarQueryParameter['embed'] = embed;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/collections/featured/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gets more detailed information about a collection, including the timestamp for its creation and the number of videos in it. To get the videos in collections, use GET /v2/videos/collections/{id}/items.
         * @summary Get the details of video collections
         * @param {string} id The ID of the collection to return
         * @param {Array<'share_code' | 'share_url'>} [embed] Which sharing information to include in the response, such as a URL to the collection
         * @param {string} [shareCode] Code to retrieve a shared collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionDetailsGet_1: async (id: string, embed?: Array<'share_code' | 'share_url'>, shareCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('collectionDetailsGet_1', 'id', id)
            const localVarPath = `/v2/videos/collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.view"], configuration)
            if (embed) {
                localVarQueryParameter['embed'] = embed;
            }

            if (shareCode !== undefined) {
                localVarQueryParameter['share_code'] = shareCode;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/collections/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint creates one or more collections (clipboxes). To add videos to collections, use `POST /v2/videos/collections/{id}/items`.
         * @summary Create video collections
         * @param {CollectionCreateRequest} collectionCreateRequest Collection metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVideoCollections: async (collectionCreateRequest: CollectionCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionCreateRequest' is not null or undefined
            assertParamExists('createVideoCollections', 'collectionCreateRequest', collectionCreateRequest)
            const localVarPath = `/v2/videos/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: collectionCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/collections',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(collectionCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint deletes a collection.
         * @summary Delete video collections
         * @param {string} id The ID of the collection to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollection: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCollection', 'id', id)
            const localVarPath = `/v2/videos/collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/collections/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint searches for videos that are similar to a video that you specify.
         * @summary List similar videos
         * @param {string} id The ID of a video for which similar videos should be returned
         * @param {Language} [language] Language for the keywords and categories in the response
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {'minimal' | 'full'} [view] Amount of detail to render in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSimilar: async (id: string, language?: Language, page?: number, perPage?: number, view?: 'minimal' | 'full', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findSimilar', 'id', id)
            const localVarPath = `/v2/videos/{id}/similar`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/{id}/similar',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists the IDs of videos in a collection and the date that each was added.
         * @summary Get the contents of video collections
         * @param {string} id Collection ID
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {string} [shareCode] Code to retrieve the contents of a shared collection
         * @param {'newest' | 'oldest'} [sort] Sort order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionItems: async (id: string, page?: number, perPage?: number, shareCode?: string, sort?: 'newest' | 'oldest', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCollectionItems', 'id', id)
            const localVarPath = `/v2/videos/collections/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.view"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (shareCode !== undefined) {
                localVarQueryParameter['share_code'] = shareCode;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/collections/{id}/items',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists the IDs of videos in a featured collection and the date that each was added.
         * @summary Get the contents of featured video collections
         * @param {string} id Collection ID
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeaturedCollectionItems: async (id: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFeaturedCollectionItems', 'id', id)
            const localVarPath = `/v2/videos/collections/featured/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/collections/featured/{id}/items',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gets licenses for one or more videos. You must specify the video IDs in the body parameter and the size and subscription ID either in the query parameter or with each video ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
         * @summary License videos
         * @param {LicenseVideoRequest} licenseVideoRequest List of videos to request licenses for and information about each license transaction; these values override the defaults in the query parameters
         * @param {string} [subscriptionId] The subscription ID to use for licensing
         * @param {'web' | 'sd' | 'hd' | '4k'} [size] The size of the video to license
         * @param {string} [searchId] The Search ID that led to this licensing event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        licenseVideos: async (licenseVideoRequest: LicenseVideoRequest, subscriptionId?: string, size?: 'web' | 'sd' | 'hd' | '4k', searchId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'licenseVideoRequest' is not null or undefined
            assertParamExists('licenseVideos', 'licenseVideoRequest', licenseVideoRequest)
            const localVarPath = `/v2/videos/licenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["licenses.create", "purchases.view"], configuration)
            if (subscriptionId !== undefined) {
                localVarQueryParameter['subscription_id'] = subscriptionId;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: licenseVideoRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/licenses',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(licenseVideoRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists the categories (Shutterstock-assigned genres) that videos can belong to.
         * @summary List video categories
         * @param {Language} [language] Language for the keywords and categories in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories: async (language?: Language, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/videos/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/categories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists your collections of videos and their basic attributes.
         * @summary List video collections
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {Array<'share_code' | 'share_url'>} [embed] Which sharing information to include in the response, such as a URL to the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollections: async (page?: number, perPage?: number, embed?: Array<'share_code' | 'share_url'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/videos/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.view"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (embed) {
                localVarQueryParameter['embed'] = embed;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/collections',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists featured video collections and a name and cover video for each collection.
         * @summary List featured video collections
         * @param {'share_url'} [embed] What information to include in the response, such as a URL to the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturedVideoCollections: async (embed?: 'share_url', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/videos/collections/featured`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (embed !== undefined) {
                localVarQueryParameter['embed'] = embed;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/collections/featured',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists existing licenses.
         * @summary List video licenses
         * @param {string} [videoId] Show licenses for the specified video ID
         * @param {string} [license] Show videos that are available with the specified license, such as &#x60;standard&#x60; or &#x60;enhanced&#x60;; prepending a &#x60;-&#x60; sign excludes results from that license
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {'newest' | 'oldest'} [sort] Sort by oldest or newest videos first
         * @param {string} [username] Filter licenses by username of licensee
         * @param {string} [startDate] Show licenses created on or after the specified date
         * @param {string} [endDate] Show licenses created before the specified date
         * @param {'all' | 'downloadable' | 'non_downloadable'} [downloadAvailability] Filter licenses by download availability
         * @param {boolean} [teamHistory] Set to true to see license history for all members of your team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLicenses: async (videoId?: string, license?: string, page?: number, perPage?: number, sort?: 'newest' | 'oldest', username?: string, startDate?: string, endDate?: string, downloadAvailability?: 'all' | 'downloadable' | 'non_downloadable', teamHistory?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/videos/licenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["licenses.view"], configuration)
            if (videoId !== undefined) {
                localVarQueryParameter['video_id'] = videoId;
            }

            if (license !== undefined) {
                localVarQueryParameter['license'] = license;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (downloadAvailability !== undefined) {
                localVarQueryParameter['download_availability'] = downloadAvailability;
            }

            if (teamHistory !== undefined) {
                localVarQueryParameter['team_history'] = teamHistory;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/licenses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists videos that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show videos that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.
         * @summary List updated videos
         * @param {string | Date} [startDate] Show videos updated on or after the specified date
         * @param {string | Date} [endDate] Show videos updated before the specified date
         * @param {string} [interval] Show videos updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows videos that were updated in the hour preceding the request
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {'newest' | 'oldest'} [sort] Sort by oldest or newest videos first
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUpdatedVideos: async (startDate?: string | Date, endDate?: string | Date, interval?: string, page?: number, perPage?: number, sort?: 'newest' | 'oldest', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/videos/updated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/updated',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists information about one or more videos, including the aspect ratio and URLs to previews.
         * @summary List videos
         * @param {Array<string>} id One or more video IDs
         * @param {'minimal' | 'full'} [view] Amount of detail to render in the response
         * @param {string} [searchId] The ID of the search that is related to this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVideo: async (id: Array<string>, view?: 'minimal' | 'full', searchId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listVideo', 'id', id)
            const localVarPath = `/v2/videos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint redownloads videos that you have already received a license for.
         * @summary Download videos
         * @param {string} id The license ID of the item to (re)download. The download links in the response are valid for 8 hours.
         * @param {RedownloadVideo} redownloadVideo Information about the videos to redownload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redownloadDownloads: async (id: string, redownloadVideo: RedownloadVideo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('redownloadDownloads', 'id', id)
            // verify required parameter 'redownloadVideo' is not null or undefined
            assertParamExists('redownloadDownloads', 'redownloadVideo', redownloadVideo)
            const localVarPath = `/v2/videos/licenses/{id}/downloads`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["licenses.view"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: redownloadVideo,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/licenses/{id}/downloads',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(redownloadVideo, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint removes one or more videos from a collection.
         * @summary Remove videos from collections
         * @param {string} id The ID of the Collection from which items will be deleted
         * @param {Array<string>} [itemId] One or more video IDs to remove from the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromCollection: async (id: string, itemId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeFromCollection', 'id', id)
            const localVarPath = `/v2/videos/collections/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.edit"], configuration)
            if (itemId) {
                localVarQueryParameter['item_id'] = itemId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/collections/{id}/items',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint provides autocomplete suggestions for partial search terms.
         * @summary Get suggestions for a search term
         * @param {string} query Search term for which you want keyword suggestions
         * @param {number} [limit] Limit the number of the suggestions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSuggestions: async (query: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('searchSuggestions', 'query', query)
            const localVarPath = `/v2/videos/search/suggestions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/search/suggestions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint searches for videos. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
         * @summary Search for videos
         * @param {string | Date} [addedDate] Show videos added on the specified date
         * @param {string | Date} [addedDateStart] Show videos added on or after the specified date
         * @param {string | Date} [addedDateEnd] Show videos added before the specified date
         * @param {'43' | '169' | 'nonstandard'} [aspectRatio] Show videos with the specified aspect ratio
         * @param {string} [category] Show videos with the specified Shutterstock-defined category; specify a category name or ID
         * @param {Array<string>} [contributor] Show videos with the specified artist names or IDs
         * @param {Array<string>} [contributorCountry] Show videos from contributors in one or more specified countries
         * @param {number} [duration] (Deprecated; use duration_from and duration_to instead) Show videos with the specified duration in seconds
         * @param {number} [durationFrom] Show videos with the specified duration or longer in seconds
         * @param {number} [durationTo] Show videos with the specified duration or shorter in seconds
         * @param {number} [fps] (Deprecated; use fps_from and fps_to instead) Show videos with the specified frames per second
         * @param {number} [fpsFrom] Show videos with the specified frames per second or more
         * @param {number} [fpsTo] Show videos with the specified frames per second or fewer
         * @param {boolean} [keywordSafeSearch] Hide results with potentially unsafe keywords
         * @param {Language} [language] Set query and result language (uses Accept-Language header if not set)
         * @param {Array<'commercial' | 'editorial'>} [license] Show only videos with the specified license or licenses
         * @param {Array<string>} [model] Show videos with each of the specified models
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {'infants' | 'children' | 'teenagers' | '20s' | '30s' | '40s' | '50s' | '60s' | 'older'} [peopleAge] Show videos that feature people of the specified age range
         * @param {Array<'african' | 'african_american' | 'black' | 'brazilian' | 'chinese' | 'caucasian' | 'east_asian' | 'hispanic' | 'japanese' | 'middle_eastern' | 'native_american' | 'pacific_islander' | 'south_asian' | 'southeast_asian' | 'other'>} [peopleEthnicity] Show videos with people of the specified ethnicities
         * @param {'male' | 'female' | 'both'} [peopleGender] Show videos with people with the specified gender
         * @param {number} [peopleNumber] Show videos with the specified number of people
         * @param {boolean} [peopleModelReleased] Show only videos of people with a signed model release
         * @param {string} [query] One or more search terms separated by spaces; you can use NOT to filter out videos that match a term
         * @param {'4k' | 'standard_definition' | 'high_definition'} [resolution] Show videos with the specified resolution
         * @param {boolean} [safe] Enable or disable safe search
         * @param {'newest' | 'popular' | 'relevance' | 'random'} [sort] Sort by one of these categories
         * @param {'minimal' | 'full'} [view] Amount of detail to render in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVideo: async (addedDate?: string | Date, addedDateStart?: string | Date, addedDateEnd?: string | Date, aspectRatio?: '43' | '169' | 'nonstandard', category?: string, contributor?: Array<string>, contributorCountry?: Array<string>, duration?: number, durationFrom?: number, durationTo?: number, fps?: number, fpsFrom?: number, fpsTo?: number, keywordSafeSearch?: boolean, language?: Language, license?: Array<'commercial' | 'editorial'>, model?: Array<string>, page?: number, perPage?: number, peopleAge?: 'infants' | 'children' | 'teenagers' | '20s' | '30s' | '40s' | '50s' | '60s' | 'older', peopleEthnicity?: Array<'african' | 'african_american' | 'black' | 'brazilian' | 'chinese' | 'caucasian' | 'east_asian' | 'hispanic' | 'japanese' | 'middle_eastern' | 'native_american' | 'pacific_islander' | 'south_asian' | 'southeast_asian' | 'other'>, peopleGender?: 'male' | 'female' | 'both', peopleNumber?: number, peopleModelReleased?: boolean, query?: string, resolution?: '4k' | 'standard_definition' | 'high_definition', safe?: boolean, sort?: 'newest' | 'popular' | 'relevance' | 'random', view?: 'minimal' | 'full', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/videos/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (addedDate !== undefined) {
                localVarQueryParameter['added_date'] = (addedDate as any instanceof Date) ?
                    (addedDate as any).toISOString().substr(0,10) :
                    addedDate;
            }

            if (addedDateStart !== undefined) {
                localVarQueryParameter['added_date_start'] = (addedDateStart as any instanceof Date) ?
                    (addedDateStart as any).toISOString().substr(0,10) :
                    addedDateStart;
            }

            if (addedDateEnd !== undefined) {
                localVarQueryParameter['added_date_end'] = (addedDateEnd as any instanceof Date) ?
                    (addedDateEnd as any).toISOString().substr(0,10) :
                    addedDateEnd;
            }

            if (aspectRatio !== undefined) {
                localVarQueryParameter['aspect_ratio'] = aspectRatio;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (contributor) {
                localVarQueryParameter['contributor'] = contributor;
            }

            if (contributorCountry) {
                localVarQueryParameter['contributor_country'] = contributorCountry;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (durationFrom !== undefined) {
                localVarQueryParameter['duration_from'] = durationFrom;
            }

            if (durationTo !== undefined) {
                localVarQueryParameter['duration_to'] = durationTo;
            }

            if (fps !== undefined) {
                localVarQueryParameter['fps'] = fps;
            }

            if (fpsFrom !== undefined) {
                localVarQueryParameter['fps_from'] = fpsFrom;
            }

            if (fpsTo !== undefined) {
                localVarQueryParameter['fps_to'] = fpsTo;
            }

            if (keywordSafeSearch !== undefined) {
                localVarQueryParameter['keyword_safe_search'] = keywordSafeSearch;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (license) {
                localVarQueryParameter['license'] = license;
            }

            if (model) {
                localVarQueryParameter['model'] = model;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (peopleAge !== undefined) {
                localVarQueryParameter['people_age'] = peopleAge;
            }

            if (peopleEthnicity) {
                localVarQueryParameter['people_ethnicity'] = peopleEthnicity;
            }

            if (peopleGender !== undefined) {
                localVarQueryParameter['people_gender'] = peopleGender;
            }

            if (peopleNumber !== undefined) {
                localVarQueryParameter['people_number'] = peopleNumber;
            }

            if (peopleModelReleased !== undefined) {
                localVarQueryParameter['people_model_released'] = peopleModelReleased;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (resolution !== undefined) {
                localVarQueryParameter['resolution'] = resolution;
            }

            if (safe !== undefined) {
                localVarQueryParameter['safe'] = safe;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/search',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint sets a new name for a collection.
         * @summary Rename video collections
         * @param {string} id The ID of the collection to rename
         * @param {CollectionUpdateRequest} collectionUpdateRequest The new name for the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setNewName: async (id: string, collectionUpdateRequest: CollectionUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('setNewName', 'id', id)
            // verify required parameter 'collectionUpdateRequest' is not null or undefined
            assertParamExists('setNewName', 'collectionUpdateRequest', collectionUpdateRequest)
            const localVarPath = `/v2/videos/collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: collectionUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/collections/{id}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(collectionUpdateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint shows information about a video, including URLs to previews and the sizes that it is available in.
         * @summary Get details about videos
         * @param {string} id Video ID
         * @param {Language} [language] Language for the keywords and categories in the response
         * @param {'minimal' | 'full'} [view] Amount of detail to render in the response
         * @param {string} [searchId] The ID of the search that is related to this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoDetails: async (id: string, language?: Language, view?: 'minimal' | 'full', searchId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('videoDetails', 'id', id)
            const localVarPath = `/v2/videos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/videos/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VideosApi - functional programming interface
 * @export
 */
export const VideosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VideosApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint adds one or more videos to a collection by video IDs.
         * @summary Add videos to collections
         * @param {VideosApiAddToCollectionItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToCollectionItems(requestParameters: VideosApiAddToCollectionItemsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const collectionItemRequest: CollectionItemRequest = {
                items: requestParameters.items
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToCollectionItems(requestParameters.id, collectionItemRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gets more detailed information about a featured video collection, including its cover video and timestamps for its creation and most recent update. To get the videos, use `GET /v2/videos/collections/featured/{id}/items`.
         * @summary Get the details of featured video collections
         * @param {VideosApiCollectionDetailsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionDetailsGet(requestParameters: VideosApiCollectionDetailsGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturedCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionDetailsGet(requestParameters.id, requestParameters.embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gets more detailed information about a collection, including the timestamp for its creation and the number of videos in it. To get the videos in collections, use GET /v2/videos/collections/{id}/items.
         * @summary Get the details of video collections
         * @param {VideosApiCollectionDetailsGet0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionDetailsGet_1(requestParameters: VideosApiCollectionDetailsGet0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionDetailsGet_1(requestParameters.id, requestParameters.embed, requestParameters.shareCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint creates one or more collections (clipboxes). To add videos to collections, use `POST /v2/videos/collections/{id}/items`.
         * @summary Create video collections
         * @param {VideosApiCreateVideoCollectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVideoCollections(requestParameters: VideosApiCreateVideoCollectionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionCreateResponse>> {
            const collectionCreateRequest: CollectionCreateRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVideoCollections(collectionCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint deletes a collection.
         * @summary Delete video collections
         * @param {VideosApiDeleteCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCollection(requestParameters: VideosApiDeleteCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCollection(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint searches for videos that are similar to a video that you specify.
         * @summary List similar videos
         * @param {VideosApiFindSimilarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findSimilar(requestParameters: VideosApiFindSimilarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findSimilar(requestParameters.id, requestParameters.language, requestParameters.page, requestParameters.perPage, requestParameters.view, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists the IDs of videos in a collection and the date that each was added.
         * @summary Get the contents of video collections
         * @param {VideosApiGetCollectionItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionItems(requestParameters: VideosApiGetCollectionItemsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionItemDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionItems(requestParameters.id, requestParameters.page, requestParameters.perPage, requestParameters.shareCode, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists the IDs of videos in a featured collection and the date that each was added.
         * @summary Get the contents of featured video collections
         * @param {VideosApiGetFeaturedCollectionItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeaturedCollectionItems(requestParameters: VideosApiGetFeaturedCollectionItemsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoCollectionItemDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeaturedCollectionItems(requestParameters.id, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gets licenses for one or more videos. You must specify the video IDs in the body parameter and the size and subscription ID either in the query parameter or with each video ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
         * @summary License videos
         * @param {VideosApiLicenseVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async licenseVideos(requestParameters: VideosApiLicenseVideosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LicenseVideoResultDataList>> {
            const licenseVideoRequest: LicenseVideoRequest = {
                videos: requestParameters.videos
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.licenseVideos(licenseVideoRequest, requestParameters.subscriptionId, requestParameters.size, requestParameters.searchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists the categories (Shutterstock-assigned genres) that videos can belong to.
         * @summary List video categories
         * @param {VideosApiListCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCategories(requestParameters: VideosApiListCategoriesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCategories(requestParameters.language, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists your collections of videos and their basic attributes.
         * @summary List video collections
         * @param {VideosApiListCollectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCollections(requestParameters: VideosApiListCollectionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCollections(requestParameters.page, requestParameters.perPage, requestParameters.embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists featured video collections and a name and cover video for each collection.
         * @summary List featured video collections
         * @param {VideosApiListFeaturedVideoCollectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFeaturedVideoCollections(requestParameters: VideosApiListFeaturedVideoCollectionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturedCollectionDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFeaturedVideoCollections(requestParameters.embed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists existing licenses.
         * @summary List video licenses
         * @param {VideosApiListLicensesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLicenses(requestParameters: VideosApiListLicensesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadHistoryDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLicenses(requestParameters.videoId, requestParameters.license, requestParameters.page, requestParameters.perPage, requestParameters.sort, requestParameters.username, requestParameters.startDate, requestParameters.endDate, requestParameters.downloadAvailability, requestParameters.teamHistory, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists videos that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show videos that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.
         * @summary List updated videos
         * @param {VideosApiListUpdatedVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUpdatedVideos(requestParameters: VideosApiListUpdatedVideosRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdatedMediaDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUpdatedVideos(requestParameters.startDate, requestParameters.endDate, requestParameters.interval, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists information about one or more videos, including the aspect ratio and URLs to previews.
         * @summary List videos
         * @param {VideosApiListVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVideo(requestParameters: VideosApiListVideoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVideo(requestParameters.id, requestParameters.view, requestParameters.searchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint redownloads videos that you have already received a license for.
         * @summary Download videos
         * @param {VideosApiRedownloadDownloadsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redownloadDownloads(requestParameters: VideosApiRedownloadDownloadsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Url>> {
            const redownloadVideo: RedownloadVideo = {
                auth_cookie: requestParameters.auth_cookie,
                show_modal: requestParameters.show_modal,
                size: requestParameters.size,
                verification_code: requestParameters.verification_code
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.redownloadDownloads(requestParameters.id, redownloadVideo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint removes one or more videos from a collection.
         * @summary Remove videos from collections
         * @param {VideosApiRemoveFromCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromCollection(requestParameters: VideosApiRemoveFromCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFromCollection(requestParameters.id, requestParameters.itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint provides autocomplete suggestions for partial search terms.
         * @summary Get suggestions for a search term
         * @param {VideosApiSearchSuggestionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchSuggestions(requestParameters: VideosApiSearchSuggestionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Suggestions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchSuggestions(requestParameters.query, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint searches for videos. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
         * @summary Search for videos
         * @param {VideosApiSearchVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchVideo(requestParameters: VideosApiSearchVideoRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchVideo(requestParameters.addedDate, requestParameters.addedDateStart, requestParameters.addedDateEnd, requestParameters.aspectRatio, requestParameters.category, requestParameters.contributor, requestParameters.contributorCountry, requestParameters.duration, requestParameters.durationFrom, requestParameters.durationTo, requestParameters.fps, requestParameters.fpsFrom, requestParameters.fpsTo, requestParameters.keywordSafeSearch, requestParameters.language, requestParameters.license, requestParameters.model, requestParameters.page, requestParameters.perPage, requestParameters.peopleAge, requestParameters.peopleEthnicity, requestParameters.peopleGender, requestParameters.peopleNumber, requestParameters.peopleModelReleased, requestParameters.query, requestParameters.resolution, requestParameters.safe, requestParameters.sort, requestParameters.view, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint sets a new name for a collection.
         * @summary Rename video collections
         * @param {VideosApiSetNewNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setNewName(requestParameters: VideosApiSetNewNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const collectionUpdateRequest: CollectionUpdateRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setNewName(requestParameters.id, collectionUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint shows information about a video, including URLs to previews and the sizes that it is available in.
         * @summary Get details about videos
         * @param {VideosApiVideoDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async videoDetails(requestParameters: VideosApiVideoDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Video>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoDetails(requestParameters.id, requestParameters.language, requestParameters.view, requestParameters.searchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VideosApi - factory interface
 * @export
 */
export const VideosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VideosApiFp(configuration)
    return {
        /**
         * This endpoint adds one or more videos to a collection by video IDs.
         * @summary Add videos to collections
         * @param {VideosApiAddToCollectionItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCollectionItems(requestParameters: VideosApiAddToCollectionItemsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addToCollectionItems(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gets more detailed information about a featured video collection, including its cover video and timestamps for its creation and most recent update. To get the videos, use `GET /v2/videos/collections/featured/{id}/items`.
         * @summary Get the details of featured video collections
         * @param {VideosApiCollectionDetailsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionDetailsGet(requestParameters: VideosApiCollectionDetailsGetRequest, options?: AxiosRequestConfig): AxiosPromise<FeaturedCollection> {
            return localVarFp.collectionDetailsGet(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gets more detailed information about a collection, including the timestamp for its creation and the number of videos in it. To get the videos in collections, use GET /v2/videos/collections/{id}/items.
         * @summary Get the details of video collections
         * @param {VideosApiCollectionDetailsGet0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionDetailsGet_1(requestParameters: VideosApiCollectionDetailsGet0Request, options?: AxiosRequestConfig): AxiosPromise<Collection> {
            return localVarFp.collectionDetailsGet_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint creates one or more collections (clipboxes). To add videos to collections, use `POST /v2/videos/collections/{id}/items`.
         * @summary Create video collections
         * @param {VideosApiCreateVideoCollectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVideoCollections(requestParameters: VideosApiCreateVideoCollectionsRequest, options?: AxiosRequestConfig): AxiosPromise<CollectionCreateResponse> {
            return localVarFp.createVideoCollections(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint deletes a collection.
         * @summary Delete video collections
         * @param {VideosApiDeleteCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollection(requestParameters: VideosApiDeleteCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCollection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint searches for videos that are similar to a video that you specify.
         * @summary List similar videos
         * @param {VideosApiFindSimilarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSimilar(requestParameters: VideosApiFindSimilarRequest, options?: AxiosRequestConfig): AxiosPromise<VideoSearchResults> {
            return localVarFp.findSimilar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists the IDs of videos in a collection and the date that each was added.
         * @summary Get the contents of video collections
         * @param {VideosApiGetCollectionItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionItems(requestParameters: VideosApiGetCollectionItemsRequest, options?: AxiosRequestConfig): AxiosPromise<CollectionItemDataList> {
            return localVarFp.getCollectionItems(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists the IDs of videos in a featured collection and the date that each was added.
         * @summary Get the contents of featured video collections
         * @param {VideosApiGetFeaturedCollectionItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeaturedCollectionItems(requestParameters: VideosApiGetFeaturedCollectionItemsRequest, options?: AxiosRequestConfig): AxiosPromise<VideoCollectionItemDataList> {
            return localVarFp.getFeaturedCollectionItems(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gets licenses for one or more videos. You must specify the video IDs in the body parameter and the size and subscription ID either in the query parameter or with each video ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
         * @summary License videos
         * @param {VideosApiLicenseVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        licenseVideos(requestParameters: VideosApiLicenseVideosRequest, options?: AxiosRequestConfig): AxiosPromise<LicenseVideoResultDataList> {
            return localVarFp.licenseVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists the categories (Shutterstock-assigned genres) that videos can belong to.
         * @summary List video categories
         * @param {VideosApiListCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories(requestParameters: VideosApiListCategoriesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CategoryDataList> {
            return localVarFp.listCategories(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists your collections of videos and their basic attributes.
         * @summary List video collections
         * @param {VideosApiListCollectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollections(requestParameters: VideosApiListCollectionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CollectionDataList> {
            return localVarFp.listCollections(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists featured video collections and a name and cover video for each collection.
         * @summary List featured video collections
         * @param {VideosApiListFeaturedVideoCollectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturedVideoCollections(requestParameters: VideosApiListFeaturedVideoCollectionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<FeaturedCollectionDataList> {
            return localVarFp.listFeaturedVideoCollections(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists existing licenses.
         * @summary List video licenses
         * @param {VideosApiListLicensesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLicenses(requestParameters: VideosApiListLicensesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DownloadHistoryDataList> {
            return localVarFp.listLicenses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists videos that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show videos that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.
         * @summary List updated videos
         * @param {VideosApiListUpdatedVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUpdatedVideos(requestParameters: VideosApiListUpdatedVideosRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UpdatedMediaDataList> {
            return localVarFp.listUpdatedVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists information about one or more videos, including the aspect ratio and URLs to previews.
         * @summary List videos
         * @param {VideosApiListVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVideo(requestParameters: VideosApiListVideoRequest, options?: AxiosRequestConfig): AxiosPromise<VideoDataList> {
            return localVarFp.listVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint redownloads videos that you have already received a license for.
         * @summary Download videos
         * @param {VideosApiRedownloadDownloadsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redownloadDownloads(requestParameters: VideosApiRedownloadDownloadsRequest, options?: AxiosRequestConfig): AxiosPromise<Url> {
            return localVarFp.redownloadDownloads(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint removes one or more videos from a collection.
         * @summary Remove videos from collections
         * @param {VideosApiRemoveFromCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromCollection(requestParameters: VideosApiRemoveFromCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFromCollection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint provides autocomplete suggestions for partial search terms.
         * @summary Get suggestions for a search term
         * @param {VideosApiSearchSuggestionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSuggestions(requestParameters: VideosApiSearchSuggestionsRequest, options?: AxiosRequestConfig): AxiosPromise<Suggestions> {
            return localVarFp.searchSuggestions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint searches for videos. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
         * @summary Search for videos
         * @param {VideosApiSearchVideoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVideo(requestParameters: VideosApiSearchVideoRequest = {}, options?: AxiosRequestConfig): AxiosPromise<VideoSearchResults> {
            return localVarFp.searchVideo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint sets a new name for a collection.
         * @summary Rename video collections
         * @param {VideosApiSetNewNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setNewName(requestParameters: VideosApiSetNewNameRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setNewName(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint shows information about a video, including URLs to previews and the sizes that it is available in.
         * @summary Get details about videos
         * @param {VideosApiVideoDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoDetails(requestParameters: VideosApiVideoDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Video> {
            return localVarFp.videoDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addToCollectionItems operation in VideosApi.
 * @export
 * @interface VideosApiAddToCollectionItemsRequest
 */
export type VideosApiAddToCollectionItemsRequest = {
    
    /**
    * The ID of the collection to which items should be added
    * @type {string}
    * @memberof VideosApiAddToCollectionItems
    */
    readonly id: string
    
} & CollectionItemRequest

/**
 * Request parameters for collectionDetailsGet operation in VideosApi.
 * @export
 * @interface VideosApiCollectionDetailsGetRequest
 */
export type VideosApiCollectionDetailsGetRequest = {
    
    /**
    * Collection ID
    * @type {string}
    * @memberof VideosApiCollectionDetailsGet
    */
    readonly id: string
    
    /**
    * What information to include in the response, such as a URL to the collection
    * @type {'share_url'}
    * @memberof VideosApiCollectionDetailsGet
    */
    readonly embed?: 'share_url'
    
}

/**
 * Request parameters for collectionDetailsGet_1 operation in VideosApi.
 * @export
 * @interface VideosApiCollectionDetailsGet0Request
 */
export type VideosApiCollectionDetailsGet0Request = {
    
    /**
    * The ID of the collection to return
    * @type {string}
    * @memberof VideosApiCollectionDetailsGet0
    */
    readonly id: string
    
    /**
    * Which sharing information to include in the response, such as a URL to the collection
    * @type {Array<'share_code' | 'share_url'>}
    * @memberof VideosApiCollectionDetailsGet0
    */
    readonly embed?: Array<'share_code' | 'share_url'>
    
    /**
    * Code to retrieve a shared collection
    * @type {string}
    * @memberof VideosApiCollectionDetailsGet0
    */
    readonly shareCode?: string
    
}

/**
 * Request parameters for createVideoCollections operation in VideosApi.
 * @export
 * @interface VideosApiCreateVideoCollectionsRequest
 */
export type VideosApiCreateVideoCollectionsRequest = {
    
} & CollectionCreateRequest

/**
 * Request parameters for deleteCollection operation in VideosApi.
 * @export
 * @interface VideosApiDeleteCollectionRequest
 */
export type VideosApiDeleteCollectionRequest = {
    
    /**
    * The ID of the collection to delete
    * @type {string}
    * @memberof VideosApiDeleteCollection
    */
    readonly id: string
    
}

/**
 * Request parameters for findSimilar operation in VideosApi.
 * @export
 * @interface VideosApiFindSimilarRequest
 */
export type VideosApiFindSimilarRequest = {
    
    /**
    * The ID of a video for which similar videos should be returned
    * @type {string}
    * @memberof VideosApiFindSimilar
    */
    readonly id: string
    
    /**
    * Language for the keywords and categories in the response
    * @type {Language}
    * @memberof VideosApiFindSimilar
    */
    readonly language?: Language
    
    /**
    * Page number
    * @type {number}
    * @memberof VideosApiFindSimilar
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof VideosApiFindSimilar
    */
    readonly perPage?: number
    
    /**
    * Amount of detail to render in the response
    * @type {'minimal' | 'full'}
    * @memberof VideosApiFindSimilar
    */
    readonly view?: 'minimal' | 'full'
    
}

/**
 * Request parameters for getCollectionItems operation in VideosApi.
 * @export
 * @interface VideosApiGetCollectionItemsRequest
 */
export type VideosApiGetCollectionItemsRequest = {
    
    /**
    * Collection ID
    * @type {string}
    * @memberof VideosApiGetCollectionItems
    */
    readonly id: string
    
    /**
    * Page number
    * @type {number}
    * @memberof VideosApiGetCollectionItems
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof VideosApiGetCollectionItems
    */
    readonly perPage?: number
    
    /**
    * Code to retrieve the contents of a shared collection
    * @type {string}
    * @memberof VideosApiGetCollectionItems
    */
    readonly shareCode?: string
    
    /**
    * Sort order
    * @type {'newest' | 'oldest'}
    * @memberof VideosApiGetCollectionItems
    */
    readonly sort?: 'newest' | 'oldest'
    
}

/**
 * Request parameters for getFeaturedCollectionItems operation in VideosApi.
 * @export
 * @interface VideosApiGetFeaturedCollectionItemsRequest
 */
export type VideosApiGetFeaturedCollectionItemsRequest = {
    
    /**
    * Collection ID
    * @type {string}
    * @memberof VideosApiGetFeaturedCollectionItems
    */
    readonly id: string
    
    /**
    * Page number
    * @type {number}
    * @memberof VideosApiGetFeaturedCollectionItems
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof VideosApiGetFeaturedCollectionItems
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for licenseVideos operation in VideosApi.
 * @export
 * @interface VideosApiLicenseVideosRequest
 */
export type VideosApiLicenseVideosRequest = {
    
    /**
    * The subscription ID to use for licensing
    * @type {string}
    * @memberof VideosApiLicenseVideos
    */
    readonly subscriptionId?: string
    
    /**
    * The size of the video to license
    * @type {'web' | 'sd' | 'hd' | '4k'}
    * @memberof VideosApiLicenseVideos
    */
    readonly size?: 'web' | 'sd' | 'hd' | '4k'
    
    /**
    * The Search ID that led to this licensing event
    * @type {string}
    * @memberof VideosApiLicenseVideos
    */
    readonly searchId?: string
    
} & LicenseVideoRequest

/**
 * Request parameters for listCategories operation in VideosApi.
 * @export
 * @interface VideosApiListCategoriesRequest
 */
export type VideosApiListCategoriesRequest = {
    
    /**
    * Language for the keywords and categories in the response
    * @type {Language}
    * @memberof VideosApiListCategories
    */
    readonly language?: Language
    
}

/**
 * Request parameters for listCollections operation in VideosApi.
 * @export
 * @interface VideosApiListCollectionsRequest
 */
export type VideosApiListCollectionsRequest = {
    
    /**
    * Page number
    * @type {number}
    * @memberof VideosApiListCollections
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof VideosApiListCollections
    */
    readonly perPage?: number
    
    /**
    * Which sharing information to include in the response, such as a URL to the collection
    * @type {Array<'share_code' | 'share_url'>}
    * @memberof VideosApiListCollections
    */
    readonly embed?: Array<'share_code' | 'share_url'>
    
}

/**
 * Request parameters for listFeaturedVideoCollections operation in VideosApi.
 * @export
 * @interface VideosApiListFeaturedVideoCollectionsRequest
 */
export type VideosApiListFeaturedVideoCollectionsRequest = {
    
    /**
    * What information to include in the response, such as a URL to the collection
    * @type {'share_url'}
    * @memberof VideosApiListFeaturedVideoCollections
    */
    readonly embed?: 'share_url'
    
}

/**
 * Request parameters for listLicenses operation in VideosApi.
 * @export
 * @interface VideosApiListLicensesRequest
 */
export type VideosApiListLicensesRequest = {
    
    /**
    * Show licenses for the specified video ID
    * @type {string}
    * @memberof VideosApiListLicenses
    */
    readonly videoId?: string
    
    /**
    * Show videos that are available with the specified license, such as `standard` or `enhanced`; prepending a `-` sign excludes results from that license
    * @type {string}
    * @memberof VideosApiListLicenses
    */
    readonly license?: string
    
    /**
    * Page number
    * @type {number}
    * @memberof VideosApiListLicenses
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof VideosApiListLicenses
    */
    readonly perPage?: number
    
    /**
    * Sort by oldest or newest videos first
    * @type {'newest' | 'oldest'}
    * @memberof VideosApiListLicenses
    */
    readonly sort?: 'newest' | 'oldest'
    
    /**
    * Filter licenses by username of licensee
    * @type {string}
    * @memberof VideosApiListLicenses
    */
    readonly username?: string
    
    /**
    * Show licenses created on or after the specified date
    * @type {string}
    * @memberof VideosApiListLicenses
    */
    readonly startDate?: string
    
    /**
    * Show licenses created before the specified date
    * @type {string}
    * @memberof VideosApiListLicenses
    */
    readonly endDate?: string
    
    /**
    * Filter licenses by download availability
    * @type {'all' | 'downloadable' | 'non_downloadable'}
    * @memberof VideosApiListLicenses
    */
    readonly downloadAvailability?: 'all' | 'downloadable' | 'non_downloadable'
    
    /**
    * Set to true to see license history for all members of your team.
    * @type {boolean}
    * @memberof VideosApiListLicenses
    */
    readonly teamHistory?: boolean
    
}

/**
 * Request parameters for listUpdatedVideos operation in VideosApi.
 * @export
 * @interface VideosApiListUpdatedVideosRequest
 */
export type VideosApiListUpdatedVideosRequest = {
    
    /**
    * Show videos updated on or after the specified date
    * @type {string | Date}
    * @memberof VideosApiListUpdatedVideos
    */
    readonly startDate?: string | Date
    
    /**
    * Show videos updated before the specified date
    * @type {string | Date}
    * @memberof VideosApiListUpdatedVideos
    */
    readonly endDate?: string | Date
    
    /**
    * Show videos updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows videos that were updated in the hour preceding the request
    * @type {string}
    * @memberof VideosApiListUpdatedVideos
    */
    readonly interval?: string
    
    /**
    * Page number
    * @type {number}
    * @memberof VideosApiListUpdatedVideos
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof VideosApiListUpdatedVideos
    */
    readonly perPage?: number
    
    /**
    * Sort by oldest or newest videos first
    * @type {'newest' | 'oldest'}
    * @memberof VideosApiListUpdatedVideos
    */
    readonly sort?: 'newest' | 'oldest'
    
}

/**
 * Request parameters for listVideo operation in VideosApi.
 * @export
 * @interface VideosApiListVideoRequest
 */
export type VideosApiListVideoRequest = {
    
    /**
    * One or more video IDs
    * @type {Array<string>}
    * @memberof VideosApiListVideo
    */
    readonly id: Array<string>
    
    /**
    * Amount of detail to render in the response
    * @type {'minimal' | 'full'}
    * @memberof VideosApiListVideo
    */
    readonly view?: 'minimal' | 'full'
    
    /**
    * The ID of the search that is related to this request
    * @type {string}
    * @memberof VideosApiListVideo
    */
    readonly searchId?: string
    
}

/**
 * Request parameters for redownloadDownloads operation in VideosApi.
 * @export
 * @interface VideosApiRedownloadDownloadsRequest
 */
export type VideosApiRedownloadDownloadsRequest = {
    
    /**
    * The license ID of the item to (re)download. The download links in the response are valid for 8 hours.
    * @type {string}
    * @memberof VideosApiRedownloadDownloads
    */
    readonly id: string
    
} & RedownloadVideo

/**
 * Request parameters for removeFromCollection operation in VideosApi.
 * @export
 * @interface VideosApiRemoveFromCollectionRequest
 */
export type VideosApiRemoveFromCollectionRequest = {
    
    /**
    * The ID of the Collection from which items will be deleted
    * @type {string}
    * @memberof VideosApiRemoveFromCollection
    */
    readonly id: string
    
    /**
    * One or more video IDs to remove from the collection
    * @type {Array<string>}
    * @memberof VideosApiRemoveFromCollection
    */
    readonly itemId?: Array<string>
    
}

/**
 * Request parameters for searchSuggestions operation in VideosApi.
 * @export
 * @interface VideosApiSearchSuggestionsRequest
 */
export type VideosApiSearchSuggestionsRequest = {
    
    /**
    * Search term for which you want keyword suggestions
    * @type {string}
    * @memberof VideosApiSearchSuggestions
    */
    readonly query: string
    
    /**
    * Limit the number of the suggestions
    * @type {number}
    * @memberof VideosApiSearchSuggestions
    */
    readonly limit?: number
    
}

/**
 * Request parameters for searchVideo operation in VideosApi.
 * @export
 * @interface VideosApiSearchVideoRequest
 */
export type VideosApiSearchVideoRequest = {
    
    /**
    * Show videos added on the specified date
    * @type {string | Date}
    * @memberof VideosApiSearchVideo
    */
    readonly addedDate?: string | Date
    
    /**
    * Show videos added on or after the specified date
    * @type {string | Date}
    * @memberof VideosApiSearchVideo
    */
    readonly addedDateStart?: string | Date
    
    /**
    * Show videos added before the specified date
    * @type {string | Date}
    * @memberof VideosApiSearchVideo
    */
    readonly addedDateEnd?: string | Date
    
    /**
    * Show videos with the specified aspect ratio
    * @type {'43' | '169' | 'nonstandard'}
    * @memberof VideosApiSearchVideo
    */
    readonly aspectRatio?: '43' | '169' | 'nonstandard'
    
    /**
    * Show videos with the specified Shutterstock-defined category; specify a category name or ID
    * @type {string}
    * @memberof VideosApiSearchVideo
    */
    readonly category?: string
    
    /**
    * Show videos with the specified artist names or IDs
    * @type {Array<string>}
    * @memberof VideosApiSearchVideo
    */
    readonly contributor?: Array<string>
    
    /**
    * Show videos from contributors in one or more specified countries
    * @type {Array<string>}
    * @memberof VideosApiSearchVideo
    */
    readonly contributorCountry?: Array<string>
    
    /**
    * (Deprecated; use duration_from and duration_to instead) Show videos with the specified duration in seconds
    * @type {number}
    * @memberof VideosApiSearchVideo
    */
    readonly duration?: number
    
    /**
    * Show videos with the specified duration or longer in seconds
    * @type {number}
    * @memberof VideosApiSearchVideo
    */
    readonly durationFrom?: number
    
    /**
    * Show videos with the specified duration or shorter in seconds
    * @type {number}
    * @memberof VideosApiSearchVideo
    */
    readonly durationTo?: number
    
    /**
    * (Deprecated; use fps_from and fps_to instead) Show videos with the specified frames per second
    * @type {number}
    * @memberof VideosApiSearchVideo
    */
    readonly fps?: number
    
    /**
    * Show videos with the specified frames per second or more
    * @type {number}
    * @memberof VideosApiSearchVideo
    */
    readonly fpsFrom?: number
    
    /**
    * Show videos with the specified frames per second or fewer
    * @type {number}
    * @memberof VideosApiSearchVideo
    */
    readonly fpsTo?: number
    
    /**
    * Hide results with potentially unsafe keywords
    * @type {boolean}
    * @memberof VideosApiSearchVideo
    */
    readonly keywordSafeSearch?: boolean
    
    /**
    * Set query and result language (uses Accept-Language header if not set)
    * @type {Language}
    * @memberof VideosApiSearchVideo
    */
    readonly language?: Language
    
    /**
    * Show only videos with the specified license or licenses
    * @type {Array<'commercial' | 'editorial'>}
    * @memberof VideosApiSearchVideo
    */
    readonly license?: Array<'commercial' | 'editorial'>
    
    /**
    * Show videos with each of the specified models
    * @type {Array<string>}
    * @memberof VideosApiSearchVideo
    */
    readonly model?: Array<string>
    
    /**
    * Page number
    * @type {number}
    * @memberof VideosApiSearchVideo
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof VideosApiSearchVideo
    */
    readonly perPage?: number
    
    /**
    * Show videos that feature people of the specified age range
    * @type {'infants' | 'children' | 'teenagers' | '20s' | '30s' | '40s' | '50s' | '60s' | 'older'}
    * @memberof VideosApiSearchVideo
    */
    readonly peopleAge?: 'infants' | 'children' | 'teenagers' | '20s' | '30s' | '40s' | '50s' | '60s' | 'older'
    
    /**
    * Show videos with people of the specified ethnicities
    * @type {Array<'african' | 'african_american' | 'black' | 'brazilian' | 'chinese' | 'caucasian' | 'east_asian' | 'hispanic' | 'japanese' | 'middle_eastern' | 'native_american' | 'pacific_islander' | 'south_asian' | 'southeast_asian' | 'other'>}
    * @memberof VideosApiSearchVideo
    */
    readonly peopleEthnicity?: Array<'african' | 'african_american' | 'black' | 'brazilian' | 'chinese' | 'caucasian' | 'east_asian' | 'hispanic' | 'japanese' | 'middle_eastern' | 'native_american' | 'pacific_islander' | 'south_asian' | 'southeast_asian' | 'other'>
    
    /**
    * Show videos with people with the specified gender
    * @type {'male' | 'female' | 'both'}
    * @memberof VideosApiSearchVideo
    */
    readonly peopleGender?: 'male' | 'female' | 'both'
    
    /**
    * Show videos with the specified number of people
    * @type {number}
    * @memberof VideosApiSearchVideo
    */
    readonly peopleNumber?: number
    
    /**
    * Show only videos of people with a signed model release
    * @type {boolean}
    * @memberof VideosApiSearchVideo
    */
    readonly peopleModelReleased?: boolean
    
    /**
    * One or more search terms separated by spaces; you can use NOT to filter out videos that match a term
    * @type {string}
    * @memberof VideosApiSearchVideo
    */
    readonly query?: string
    
    /**
    * Show videos with the specified resolution
    * @type {'4k' | 'standard_definition' | 'high_definition'}
    * @memberof VideosApiSearchVideo
    */
    readonly resolution?: '4k' | 'standard_definition' | 'high_definition'
    
    /**
    * Enable or disable safe search
    * @type {boolean}
    * @memberof VideosApiSearchVideo
    */
    readonly safe?: boolean
    
    /**
    * Sort by one of these categories
    * @type {'newest' | 'popular' | 'relevance' | 'random'}
    * @memberof VideosApiSearchVideo
    */
    readonly sort?: 'newest' | 'popular' | 'relevance' | 'random'
    
    /**
    * Amount of detail to render in the response
    * @type {'minimal' | 'full'}
    * @memberof VideosApiSearchVideo
    */
    readonly view?: 'minimal' | 'full'
    
}

/**
 * Request parameters for setNewName operation in VideosApi.
 * @export
 * @interface VideosApiSetNewNameRequest
 */
export type VideosApiSetNewNameRequest = {
    
    /**
    * The ID of the collection to rename
    * @type {string}
    * @memberof VideosApiSetNewName
    */
    readonly id: string
    
} & CollectionUpdateRequest

/**
 * Request parameters for videoDetails operation in VideosApi.
 * @export
 * @interface VideosApiVideoDetailsRequest
 */
export type VideosApiVideoDetailsRequest = {
    
    /**
    * Video ID
    * @type {string}
    * @memberof VideosApiVideoDetails
    */
    readonly id: string
    
    /**
    * Language for the keywords and categories in the response
    * @type {Language}
    * @memberof VideosApiVideoDetails
    */
    readonly language?: Language
    
    /**
    * Amount of detail to render in the response
    * @type {'minimal' | 'full'}
    * @memberof VideosApiVideoDetails
    */
    readonly view?: 'minimal' | 'full'
    
    /**
    * The ID of the search that is related to this request
    * @type {string}
    * @memberof VideosApiVideoDetails
    */
    readonly searchId?: string
    
}

/**
 * VideosApiGenerated - object-oriented interface
 * @export
 * @class VideosApiGenerated
 * @extends {BaseAPI}
 */
export class VideosApiGenerated extends BaseAPI {
    /**
     * This endpoint adds one or more videos to a collection by video IDs.
     * @summary Add videos to collections
     * @param {VideosApiAddToCollectionItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public addToCollectionItems(requestParameters: VideosApiAddToCollectionItemsRequest, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).addToCollectionItems(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gets more detailed information about a featured video collection, including its cover video and timestamps for its creation and most recent update. To get the videos, use `GET /v2/videos/collections/featured/{id}/items`.
     * @summary Get the details of featured video collections
     * @param {VideosApiCollectionDetailsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public collectionDetailsGet(requestParameters: VideosApiCollectionDetailsGetRequest, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).collectionDetailsGet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gets more detailed information about a collection, including the timestamp for its creation and the number of videos in it. To get the videos in collections, use GET /v2/videos/collections/{id}/items.
     * @summary Get the details of video collections
     * @param {VideosApiCollectionDetailsGet0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public collectionDetailsGet_1(requestParameters: VideosApiCollectionDetailsGet0Request, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).collectionDetailsGet_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint creates one or more collections (clipboxes). To add videos to collections, use `POST /v2/videos/collections/{id}/items`.
     * @summary Create video collections
     * @param {VideosApiCreateVideoCollectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public createVideoCollections(requestParameters: VideosApiCreateVideoCollectionsRequest, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).createVideoCollections(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint deletes a collection.
     * @summary Delete video collections
     * @param {VideosApiDeleteCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public deleteCollection(requestParameters: VideosApiDeleteCollectionRequest, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).deleteCollection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint searches for videos that are similar to a video that you specify.
     * @summary List similar videos
     * @param {VideosApiFindSimilarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public findSimilar(requestParameters: VideosApiFindSimilarRequest, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).findSimilar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists the IDs of videos in a collection and the date that each was added.
     * @summary Get the contents of video collections
     * @param {VideosApiGetCollectionItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public getCollectionItems(requestParameters: VideosApiGetCollectionItemsRequest, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).getCollectionItems(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists the IDs of videos in a featured collection and the date that each was added.
     * @summary Get the contents of featured video collections
     * @param {VideosApiGetFeaturedCollectionItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public getFeaturedCollectionItems(requestParameters: VideosApiGetFeaturedCollectionItemsRequest, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).getFeaturedCollectionItems(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gets licenses for one or more videos. You must specify the video IDs in the body parameter and the size and subscription ID either in the query parameter or with each video ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
     * @summary License videos
     * @param {VideosApiLicenseVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public licenseVideos(requestParameters: VideosApiLicenseVideosRequest, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).licenseVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists the categories (Shutterstock-assigned genres) that videos can belong to.
     * @summary List video categories
     * @param {VideosApiListCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public listCategories(requestParameters: VideosApiListCategoriesRequest = {}, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).listCategories(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists your collections of videos and their basic attributes.
     * @summary List video collections
     * @param {VideosApiListCollectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public listCollections(requestParameters: VideosApiListCollectionsRequest = {}, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).listCollections(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists featured video collections and a name and cover video for each collection.
     * @summary List featured video collections
     * @param {VideosApiListFeaturedVideoCollectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public listFeaturedVideoCollections(requestParameters: VideosApiListFeaturedVideoCollectionsRequest = {}, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).listFeaturedVideoCollections(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists existing licenses.
     * @summary List video licenses
     * @param {VideosApiListLicensesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public listLicenses(requestParameters: VideosApiListLicensesRequest = {}, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).listLicenses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists videos that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show videos that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.
     * @summary List updated videos
     * @param {VideosApiListUpdatedVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public listUpdatedVideos(requestParameters: VideosApiListUpdatedVideosRequest = {}, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).listUpdatedVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists information about one or more videos, including the aspect ratio and URLs to previews.
     * @summary List videos
     * @param {VideosApiListVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public listVideo(requestParameters: VideosApiListVideoRequest, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).listVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint redownloads videos that you have already received a license for.
     * @summary Download videos
     * @param {VideosApiRedownloadDownloadsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public redownloadDownloads(requestParameters: VideosApiRedownloadDownloadsRequest, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).redownloadDownloads(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint removes one or more videos from a collection.
     * @summary Remove videos from collections
     * @param {VideosApiRemoveFromCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public removeFromCollection(requestParameters: VideosApiRemoveFromCollectionRequest, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).removeFromCollection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint provides autocomplete suggestions for partial search terms.
     * @summary Get suggestions for a search term
     * @param {VideosApiSearchSuggestionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public searchSuggestions(requestParameters: VideosApiSearchSuggestionsRequest, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).searchSuggestions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint searches for videos. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
     * @summary Search for videos
     * @param {VideosApiSearchVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public searchVideo(requestParameters: VideosApiSearchVideoRequest = {}, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).searchVideo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint sets a new name for a collection.
     * @summary Rename video collections
     * @param {VideosApiSetNewNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public setNewName(requestParameters: VideosApiSetNewNameRequest, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).setNewName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint shows information about a video, including URLs to previews and the sizes that it is available in.
     * @summary Get details about videos
     * @param {VideosApiVideoDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApiGenerated
     */
    public videoDetails(requestParameters: VideosApiVideoDetailsRequest, options?: AxiosRequestConfig) {
        return VideosApiFp(this.configuration).videoDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
