/* tslint:disable */
/* eslint-disable */
/*
Shutterstock API Explorer

The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

The version of the OpenAPI document: 1.1.32


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DownloadHistoryDataList } from '../models';
// @ts-ignore
import { Language } from '../models';
// @ts-ignore
import { LicenseSFX } from '../models';
// @ts-ignore
import { LicenseSFXRequest } from '../models';
// @ts-ignore
import { LicenseSFXResultDataList } from '../models';
// @ts-ignore
import { SFX } from '../models';
// @ts-ignore
import { SFXDataList } from '../models';
// @ts-ignore
import { SFXSearchResults } from '../models';
// @ts-ignore
import { SfxUrl } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SoundEffectsApi - axios parameter creator
 * @export
 */
export const SoundEffectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint shows information about a sound effect.
         * @summary Get details about sound effects
         * @param {number} id Audio track ID
         * @param {Language} [language] Language for the keywords and categories in the response
         * @param {'minimal' | 'full'} [view] Amount of detail to render in the response
         * @param {'shutterstock' | 'premier' | 'premiumbeat'} [library] Which library to fetch from
         * @param {string} [searchId] The ID of the search that is related to this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (id: number, language?: Language, view?: 'minimal' | 'full', library?: 'shutterstock' | 'premier' | 'premiumbeat', searchId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDetails', 'id', id)
            const localVarPath = `/v2/sfx/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }

            if (library !== undefined) {
                localVarQueryParameter['library'] = library;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/sfx/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint licenses sounds effect assets.
         * @summary License sound effects
         * @param {LicenseSFXRequest} licenseSFXRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        licenseAssets: async (licenseSFXRequest: LicenseSFXRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'licenseSFXRequest' is not null or undefined
            assertParamExists('licenseAssets', 'licenseSFXRequest', licenseSFXRequest)
            const localVarPath = `/v2/sfx/licenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: licenseSFXRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/sfx/licenses',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(licenseSFXRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint shows information about sound effects.
         * @summary List details about sound effects
         * @param {Array<string>} id One or more sound effect IDs
         * @param {'minimal' | 'full'} [view] Amount of detail to render in the response
         * @param {Language} [language] Language for the keywords and categories in the response
         * @param {'shutterstock' | 'premier' | 'premiumbeat'} [library] Which library to fetch from
         * @param {string} [searchId] The ID of the search that is related to this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDetails: async (id: Array<string>, view?: 'minimal' | 'full', language?: Language, library?: 'shutterstock' | 'premier' | 'premiumbeat', searchId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listDetails', 'id', id)
            const localVarPath = `/v2/sfx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (library !== undefined) {
                localVarQueryParameter['library'] = library;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/sfx',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists existing licenses.
         * @summary List sound effects licenses
         * @param {string} [sfxId] Show licenses for the specified sound effects ID
         * @param {string} [license] Show sound effects that are available with the specified license, such as &#x60;standard&#x60; or &#x60;enhanced&#x60;; prepending a &#x60;-&#x60; sign excludes results from that license
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {'newest' | 'oldest'} [sort] Sort order
         * @param {string} [username] Filter licenses by username of licensee
         * @param {string} [startDate] Show licenses created on or after the specified date
         * @param {string} [endDate] Show licenses created before the specified date
         * @param {string} [licenseId] Filter by the license ID
         * @param {'all' | 'downloadable' | 'non_downloadable'} [downloadAvailability] Filter licenses by download availability
         * @param {boolean} [teamHistory] Set to true to see license history for all members of your team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLicenses: async (sfxId?: string, license?: string, page?: number, perPage?: number, sort?: 'newest' | 'oldest', username?: string, startDate?: string, endDate?: string, licenseId?: string, downloadAvailability?: 'all' | 'downloadable' | 'non_downloadable', teamHistory?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/sfx/licenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["licenses.view"], configuration)
            if (sfxId !== undefined) {
                localVarQueryParameter['sfx_id'] = sfxId;
            }

            if (license !== undefined) {
                localVarQueryParameter['license'] = license;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (licenseId !== undefined) {
                localVarQueryParameter['license_id'] = licenseId;
            }

            if (downloadAvailability !== undefined) {
                localVarQueryParameter['download_availability'] = downloadAvailability;
            }

            if (teamHistory !== undefined) {
                localVarQueryParameter['team_history'] = teamHistory;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/sfx/licenses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint redownloads sound effects that you have already received a license for. The download links in the response are valid for 8 hours.
         * @summary Download sound effects
         * @param {string} id License ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redownloadLicenses: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('redownloadLicenses', 'id', id)
            const localVarPath = `/v2/sfx/licenses/{id}/downloads`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["licenses.view"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/sfx/licenses/{id}/downloads',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint searches for sound effects. If you specify more than one search parameter, the API uses an AND condition.
         * @summary Search for sound effects
         * @param {string | Date} [addedDate] Show sound effects added on the specified date
         * @param {string | Date} [addedDateStart] Show sound effects added on or after the specified date
         * @param {string | Date} [addedDateEnd] Show sound effects added before the specified date
         * @param {number} [duration] Show sound effects with the specified duration in seconds
         * @param {number} [durationFrom] Show sound effects with the specified duration or longer in seconds
         * @param {number} [durationTo] Show sound effects with the specified duration or shorter in seconds
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {string} [query] One or more search terms separated by spaces
         * @param {boolean} [safe] Enable or disable safe search
         * @param {'popular' | 'newest' | 'relevance' | 'random' | 'oldest'} [sort] Sort by
         * @param {'minimal' | 'full'} [view] Amount of detail to render in the response
         * @param {Language} [language] Set query and result language (uses Accept-Language header if not set)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSoundEffects: async (addedDate?: string | Date, addedDateStart?: string | Date, addedDateEnd?: string | Date, duration?: number, durationFrom?: number, durationTo?: number, page?: number, perPage?: number, query?: string, safe?: boolean, sort?: 'popular' | 'newest' | 'relevance' | 'random' | 'oldest', view?: 'minimal' | 'full', language?: Language, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/sfx/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (addedDate !== undefined) {
                localVarQueryParameter['added_date'] = (addedDate as any instanceof Date) ?
                    (addedDate as any).toISOString().substr(0,10) :
                    addedDate;
            }

            if (addedDateStart !== undefined) {
                localVarQueryParameter['added_date_start'] = (addedDateStart as any instanceof Date) ?
                    (addedDateStart as any).toISOString().substr(0,10) :
                    addedDateStart;
            }

            if (addedDateEnd !== undefined) {
                localVarQueryParameter['added_date_end'] = (addedDateEnd as any instanceof Date) ?
                    (addedDateEnd as any).toISOString().substr(0,10) :
                    addedDateEnd;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (durationFrom !== undefined) {
                localVarQueryParameter['duration_from'] = durationFrom;
            }

            if (durationTo !== undefined) {
                localVarQueryParameter['duration_to'] = durationTo;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (safe !== undefined) {
                localVarQueryParameter['safe'] = safe;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/sfx/search',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SoundEffectsApi - functional programming interface
 * @export
 */
export const SoundEffectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SoundEffectsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint shows information about a sound effect.
         * @summary Get details about sound effects
         * @param {SoundEffectsApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: SoundEffectsApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SFX>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.id, requestParameters.language, requestParameters.view, requestParameters.library, requestParameters.searchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint licenses sounds effect assets.
         * @summary License sound effects
         * @param {SoundEffectsApiLicenseAssetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async licenseAssets(requestParameters: SoundEffectsApiLicenseAssetsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LicenseSFXResultDataList>> {
            const licenseSFXRequest: LicenseSFXRequest = {
                sound_effects: requestParameters.sound_effects
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.licenseAssets(licenseSFXRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint shows information about sound effects.
         * @summary List details about sound effects
         * @param {SoundEffectsApiListDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDetails(requestParameters: SoundEffectsApiListDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SFXDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDetails(requestParameters.id, requestParameters.view, requestParameters.language, requestParameters.library, requestParameters.searchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists existing licenses.
         * @summary List sound effects licenses
         * @param {SoundEffectsApiListLicensesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLicenses(requestParameters: SoundEffectsApiListLicensesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadHistoryDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLicenses(requestParameters.sfxId, requestParameters.license, requestParameters.page, requestParameters.perPage, requestParameters.sort, requestParameters.username, requestParameters.startDate, requestParameters.endDate, requestParameters.licenseId, requestParameters.downloadAvailability, requestParameters.teamHistory, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint redownloads sound effects that you have already received a license for. The download links in the response are valid for 8 hours.
         * @summary Download sound effects
         * @param {SoundEffectsApiRedownloadLicensesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redownloadLicenses(requestParameters: SoundEffectsApiRedownloadLicensesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SfxUrl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redownloadLicenses(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint searches for sound effects. If you specify more than one search parameter, the API uses an AND condition.
         * @summary Search for sound effects
         * @param {SoundEffectsApiSearchSoundEffectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchSoundEffects(requestParameters: SoundEffectsApiSearchSoundEffectsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SFXSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchSoundEffects(requestParameters.addedDate, requestParameters.addedDateStart, requestParameters.addedDateEnd, requestParameters.duration, requestParameters.durationFrom, requestParameters.durationTo, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.safe, requestParameters.sort, requestParameters.view, requestParameters.language, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SoundEffectsApi - factory interface
 * @export
 */
export const SoundEffectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SoundEffectsApiFp(configuration)
    return {
        /**
         * This endpoint shows information about a sound effect.
         * @summary Get details about sound effects
         * @param {SoundEffectsApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: SoundEffectsApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<SFX> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint licenses sounds effect assets.
         * @summary License sound effects
         * @param {SoundEffectsApiLicenseAssetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        licenseAssets(requestParameters: SoundEffectsApiLicenseAssetsRequest, options?: AxiosRequestConfig): AxiosPromise<LicenseSFXResultDataList> {
            return localVarFp.licenseAssets(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint shows information about sound effects.
         * @summary List details about sound effects
         * @param {SoundEffectsApiListDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDetails(requestParameters: SoundEffectsApiListDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<SFXDataList> {
            return localVarFp.listDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists existing licenses.
         * @summary List sound effects licenses
         * @param {SoundEffectsApiListLicensesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLicenses(requestParameters: SoundEffectsApiListLicensesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DownloadHistoryDataList> {
            return localVarFp.listLicenses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint redownloads sound effects that you have already received a license for. The download links in the response are valid for 8 hours.
         * @summary Download sound effects
         * @param {SoundEffectsApiRedownloadLicensesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redownloadLicenses(requestParameters: SoundEffectsApiRedownloadLicensesRequest, options?: AxiosRequestConfig): AxiosPromise<SfxUrl> {
            return localVarFp.redownloadLicenses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint searches for sound effects. If you specify more than one search parameter, the API uses an AND condition.
         * @summary Search for sound effects
         * @param {SoundEffectsApiSearchSoundEffectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSoundEffects(requestParameters: SoundEffectsApiSearchSoundEffectsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SFXSearchResults> {
            return localVarFp.searchSoundEffects(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDetails operation in SoundEffectsApi.
 * @export
 * @interface SoundEffectsApiGetDetailsRequest
 */
export type SoundEffectsApiGetDetailsRequest = {
    
    /**
    * Audio track ID
    * @type {number}
    * @memberof SoundEffectsApiGetDetails
    */
    readonly id: number
    
    /**
    * Language for the keywords and categories in the response
    * @type {Language}
    * @memberof SoundEffectsApiGetDetails
    */
    readonly language?: Language
    
    /**
    * Amount of detail to render in the response
    * @type {'minimal' | 'full'}
    * @memberof SoundEffectsApiGetDetails
    */
    readonly view?: 'minimal' | 'full'
    
    /**
    * Which library to fetch from
    * @type {'shutterstock' | 'premier' | 'premiumbeat'}
    * @memberof SoundEffectsApiGetDetails
    */
    readonly library?: 'shutterstock' | 'premier' | 'premiumbeat'
    
    /**
    * The ID of the search that is related to this request
    * @type {string}
    * @memberof SoundEffectsApiGetDetails
    */
    readonly searchId?: string
    
}

/**
 * Request parameters for licenseAssets operation in SoundEffectsApi.
 * @export
 * @interface SoundEffectsApiLicenseAssetsRequest
 */
export type SoundEffectsApiLicenseAssetsRequest = {
    
} & LicenseSFXRequest

/**
 * Request parameters for listDetails operation in SoundEffectsApi.
 * @export
 * @interface SoundEffectsApiListDetailsRequest
 */
export type SoundEffectsApiListDetailsRequest = {
    
    /**
    * One or more sound effect IDs
    * @type {Array<string>}
    * @memberof SoundEffectsApiListDetails
    */
    readonly id: Array<string>
    
    /**
    * Amount of detail to render in the response
    * @type {'minimal' | 'full'}
    * @memberof SoundEffectsApiListDetails
    */
    readonly view?: 'minimal' | 'full'
    
    /**
    * Language for the keywords and categories in the response
    * @type {Language}
    * @memberof SoundEffectsApiListDetails
    */
    readonly language?: Language
    
    /**
    * Which library to fetch from
    * @type {'shutterstock' | 'premier' | 'premiumbeat'}
    * @memberof SoundEffectsApiListDetails
    */
    readonly library?: 'shutterstock' | 'premier' | 'premiumbeat'
    
    /**
    * The ID of the search that is related to this request
    * @type {string}
    * @memberof SoundEffectsApiListDetails
    */
    readonly searchId?: string
    
}

/**
 * Request parameters for listLicenses operation in SoundEffectsApi.
 * @export
 * @interface SoundEffectsApiListLicensesRequest
 */
export type SoundEffectsApiListLicensesRequest = {
    
    /**
    * Show licenses for the specified sound effects ID
    * @type {string}
    * @memberof SoundEffectsApiListLicenses
    */
    readonly sfxId?: string
    
    /**
    * Show sound effects that are available with the specified license, such as `standard` or `enhanced`; prepending a `-` sign excludes results from that license
    * @type {string}
    * @memberof SoundEffectsApiListLicenses
    */
    readonly license?: string
    
    /**
    * Page number
    * @type {number}
    * @memberof SoundEffectsApiListLicenses
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof SoundEffectsApiListLicenses
    */
    readonly perPage?: number
    
    /**
    * Sort order
    * @type {'newest' | 'oldest'}
    * @memberof SoundEffectsApiListLicenses
    */
    readonly sort?: 'newest' | 'oldest'
    
    /**
    * Filter licenses by username of licensee
    * @type {string}
    * @memberof SoundEffectsApiListLicenses
    */
    readonly username?: string
    
    /**
    * Show licenses created on or after the specified date
    * @type {string}
    * @memberof SoundEffectsApiListLicenses
    */
    readonly startDate?: string
    
    /**
    * Show licenses created before the specified date
    * @type {string}
    * @memberof SoundEffectsApiListLicenses
    */
    readonly endDate?: string
    
    /**
    * Filter by the license ID
    * @type {string}
    * @memberof SoundEffectsApiListLicenses
    */
    readonly licenseId?: string
    
    /**
    * Filter licenses by download availability
    * @type {'all' | 'downloadable' | 'non_downloadable'}
    * @memberof SoundEffectsApiListLicenses
    */
    readonly downloadAvailability?: 'all' | 'downloadable' | 'non_downloadable'
    
    /**
    * Set to true to see license history for all members of your team.
    * @type {boolean}
    * @memberof SoundEffectsApiListLicenses
    */
    readonly teamHistory?: boolean
    
}

/**
 * Request parameters for redownloadLicenses operation in SoundEffectsApi.
 * @export
 * @interface SoundEffectsApiRedownloadLicensesRequest
 */
export type SoundEffectsApiRedownloadLicensesRequest = {
    
    /**
    * License ID
    * @type {string}
    * @memberof SoundEffectsApiRedownloadLicenses
    */
    readonly id: string
    
}

/**
 * Request parameters for searchSoundEffects operation in SoundEffectsApi.
 * @export
 * @interface SoundEffectsApiSearchSoundEffectsRequest
 */
export type SoundEffectsApiSearchSoundEffectsRequest = {
    
    /**
    * Show sound effects added on the specified date
    * @type {string | Date}
    * @memberof SoundEffectsApiSearchSoundEffects
    */
    readonly addedDate?: string | Date
    
    /**
    * Show sound effects added on or after the specified date
    * @type {string | Date}
    * @memberof SoundEffectsApiSearchSoundEffects
    */
    readonly addedDateStart?: string | Date
    
    /**
    * Show sound effects added before the specified date
    * @type {string | Date}
    * @memberof SoundEffectsApiSearchSoundEffects
    */
    readonly addedDateEnd?: string | Date
    
    /**
    * Show sound effects with the specified duration in seconds
    * @type {number}
    * @memberof SoundEffectsApiSearchSoundEffects
    */
    readonly duration?: number
    
    /**
    * Show sound effects with the specified duration or longer in seconds
    * @type {number}
    * @memberof SoundEffectsApiSearchSoundEffects
    */
    readonly durationFrom?: number
    
    /**
    * Show sound effects with the specified duration or shorter in seconds
    * @type {number}
    * @memberof SoundEffectsApiSearchSoundEffects
    */
    readonly durationTo?: number
    
    /**
    * Page number
    * @type {number}
    * @memberof SoundEffectsApiSearchSoundEffects
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof SoundEffectsApiSearchSoundEffects
    */
    readonly perPage?: number
    
    /**
    * One or more search terms separated by spaces
    * @type {string}
    * @memberof SoundEffectsApiSearchSoundEffects
    */
    readonly query?: string
    
    /**
    * Enable or disable safe search
    * @type {boolean}
    * @memberof SoundEffectsApiSearchSoundEffects
    */
    readonly safe?: boolean
    
    /**
    * Sort by
    * @type {'popular' | 'newest' | 'relevance' | 'random' | 'oldest'}
    * @memberof SoundEffectsApiSearchSoundEffects
    */
    readonly sort?: 'popular' | 'newest' | 'relevance' | 'random' | 'oldest'
    
    /**
    * Amount of detail to render in the response
    * @type {'minimal' | 'full'}
    * @memberof SoundEffectsApiSearchSoundEffects
    */
    readonly view?: 'minimal' | 'full'
    
    /**
    * Set query and result language (uses Accept-Language header if not set)
    * @type {Language}
    * @memberof SoundEffectsApiSearchSoundEffects
    */
    readonly language?: Language
    
}

/**
 * SoundEffectsApiGenerated - object-oriented interface
 * @export
 * @class SoundEffectsApiGenerated
 * @extends {BaseAPI}
 */
export class SoundEffectsApiGenerated extends BaseAPI {
    /**
     * This endpoint shows information about a sound effect.
     * @summary Get details about sound effects
     * @param {SoundEffectsApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoundEffectsApiGenerated
     */
    public getDetails(requestParameters: SoundEffectsApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return SoundEffectsApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint licenses sounds effect assets.
     * @summary License sound effects
     * @param {SoundEffectsApiLicenseAssetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoundEffectsApiGenerated
     */
    public licenseAssets(requestParameters: SoundEffectsApiLicenseAssetsRequest, options?: AxiosRequestConfig) {
        return SoundEffectsApiFp(this.configuration).licenseAssets(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint shows information about sound effects.
     * @summary List details about sound effects
     * @param {SoundEffectsApiListDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoundEffectsApiGenerated
     */
    public listDetails(requestParameters: SoundEffectsApiListDetailsRequest, options?: AxiosRequestConfig) {
        return SoundEffectsApiFp(this.configuration).listDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists existing licenses.
     * @summary List sound effects licenses
     * @param {SoundEffectsApiListLicensesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoundEffectsApiGenerated
     */
    public listLicenses(requestParameters: SoundEffectsApiListLicensesRequest = {}, options?: AxiosRequestConfig) {
        return SoundEffectsApiFp(this.configuration).listLicenses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint redownloads sound effects that you have already received a license for. The download links in the response are valid for 8 hours.
     * @summary Download sound effects
     * @param {SoundEffectsApiRedownloadLicensesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoundEffectsApiGenerated
     */
    public redownloadLicenses(requestParameters: SoundEffectsApiRedownloadLicensesRequest, options?: AxiosRequestConfig) {
        return SoundEffectsApiFp(this.configuration).redownloadLicenses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint searches for sound effects. If you specify more than one search parameter, the API uses an AND condition.
     * @summary Search for sound effects
     * @param {SoundEffectsApiSearchSoundEffectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoundEffectsApiGenerated
     */
    public searchSoundEffects(requestParameters: SoundEffectsApiSearchSoundEffectsRequest = {}, options?: AxiosRequestConfig) {
        return SoundEffectsApiFp(this.configuration).searchSoundEffects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
