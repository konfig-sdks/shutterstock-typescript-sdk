/* tslint:disable */
/* eslint-disable */
/*
Shutterstock API Explorer

The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

The version of the OpenAPI document: 1.1.32


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AudioRendersListResults } from '../models';
// @ts-ignore
import { CreateAudioRender } from '../models';
// @ts-ignore
import { CreateAudioRendersRequest } from '../models';
// @ts-ignore
import { DescriptorsListResult } from '../models';
// @ts-ignore
import { InstrumentsListResult } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CustomMusicApi - axios parameter creator
 * @export
 */
export const CustomMusicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint creates rendered audio from timeline data. It returns a render ID that you can use to download the finished audio when it is ready. The render ID is valid for up to 48 hours.
         * @summary Create rendered audio
         * @param {CreateAudioRendersRequest} createAudioRendersRequest Parameters for the audio, including the timeline and information about the output file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRenderedAudio: async (createAudioRendersRequest: CreateAudioRendersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAudioRendersRequest' is not null or undefined
            assertParamExists('createRenderedAudio', 'createAudioRendersRequest', createAudioRendersRequest)
            const localVarPath = `/v2/ai/audio/renders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createAudioRendersRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/ai/audio/renders',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createAudioRendersRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint shows the status of one or more audio renders, including download links for completed audio.
         * @summary Get details about audio renders
         * @param {Array<string>} id One or more render IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioRendersDetails: async (id: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAudioRendersDetails', 'id', id)
            const localVarPath = `/v2/ai/audio/renders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (id) {
                localVarQueryParameter['id'] = id;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/ai/audio/renders',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists the descriptors that you can use in the audio regions in an audio render.
         * @summary List computer audio descriptors
         * @param {number} [renderSpeedOver] Show descriptors with an average render speed that is greater than or equal to the specified value
         * @param {string} [bandId] Show descriptors that contain the specified band (case-sentsitive)
         * @param {string} [bandName] Show descriptors with the specified band name (case-sensitive)
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {Array<string>} [id] Show descriptors with the specified IDs (case-sensitive)
         * @param {string} [instrumentName] Show descriptors with the specified instrument name (case-sensitive)
         * @param {string} [instrumentId] Show descriptors with the specified instrument ID (case-sensitive)
         * @param {number} [tempo] Show descriptors whose tempo range includes the specified tempo in beats per minute
         * @param {number} [tempoTo] Show descriptors with a tempo that is less than or equal to the specified number
         * @param {number} [tempoFrom] Show descriptors that have a tempo range that includes the specified tempo in beats per minute
         * @param {string} [name] Show descriptors with the specified name (case-sensitive)
         * @param {string} [tag] Show descriptors with the specified tag, such as Cinematic or Roomy (case-sensitive)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAudioDescriptors: async (renderSpeedOver?: number, bandId?: string, bandName?: string, page?: number, perPage?: number, id?: Array<string>, instrumentName?: string, instrumentId?: string, tempo?: number, tempoTo?: number, tempoFrom?: number, name?: string, tag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/ai/audio/descriptors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (renderSpeedOver !== undefined) {
                localVarQueryParameter['render_speed_over'] = renderSpeedOver;
            }

            if (bandId !== undefined) {
                localVarQueryParameter['band_id'] = bandId;
            }

            if (bandName !== undefined) {
                localVarQueryParameter['band_name'] = bandName;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (instrumentName !== undefined) {
                localVarQueryParameter['instrument_name'] = instrumentName;
            }

            if (instrumentId !== undefined) {
                localVarQueryParameter['instrument_id'] = instrumentId;
            }

            if (tempo !== undefined) {
                localVarQueryParameter['tempo'] = tempo;
            }

            if (tempoTo !== undefined) {
                localVarQueryParameter['tempo_to'] = tempoTo;
            }

            if (tempoFrom !== undefined) {
                localVarQueryParameter['tempo_from'] = tempoFrom;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/ai/audio/descriptors',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists the instruments that you can include in computer audio. If you specify more than one search parameter, the API uses an AND condition.
         * @summary List computer audio instruments
         * @param {Array<string>} [id] Show instruments with the specified ID
         * @param {number} [perPage] Number of results per page
         * @param {number} [page] Page number
         * @param {string} [name] Show instruments with the specified name (case-sensitive)
         * @param {string} [tag] Show instruments with the specified tag, such as Percussion or Strings (case-sensitive)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listComputerAudioInstruments: async (id?: Array<string>, perPage?: number, page?: number, name?: string, tag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/ai/audio/instruments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/ai/audio/instruments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomMusicApi - functional programming interface
 * @export
 */
export const CustomMusicApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomMusicApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint creates rendered audio from timeline data. It returns a render ID that you can use to download the finished audio when it is ready. The render ID is valid for up to 48 hours.
         * @summary Create rendered audio
         * @param {CustomMusicApiCreateRenderedAudioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRenderedAudio(requestParameters: CustomMusicApiCreateRenderedAudioRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AudioRendersListResults>> {
            const createAudioRendersRequest: CreateAudioRendersRequest = {
                audio_renders: requestParameters.audio_renders
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRenderedAudio(createAudioRendersRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint shows the status of one or more audio renders, including download links for completed audio.
         * @summary Get details about audio renders
         * @param {CustomMusicApiGetAudioRendersDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudioRendersDetails(requestParameters: CustomMusicApiGetAudioRendersDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AudioRendersListResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAudioRendersDetails(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists the descriptors that you can use in the audio regions in an audio render.
         * @summary List computer audio descriptors
         * @param {CustomMusicApiListAudioDescriptorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAudioDescriptors(requestParameters: CustomMusicApiListAudioDescriptorsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DescriptorsListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAudioDescriptors(requestParameters.renderSpeedOver, requestParameters.bandId, requestParameters.bandName, requestParameters.page, requestParameters.perPage, requestParameters.id, requestParameters.instrumentName, requestParameters.instrumentId, requestParameters.tempo, requestParameters.tempoTo, requestParameters.tempoFrom, requestParameters.name, requestParameters.tag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists the instruments that you can include in computer audio. If you specify more than one search parameter, the API uses an AND condition.
         * @summary List computer audio instruments
         * @param {CustomMusicApiListComputerAudioInstrumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listComputerAudioInstruments(requestParameters: CustomMusicApiListComputerAudioInstrumentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstrumentsListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listComputerAudioInstruments(requestParameters.id, requestParameters.perPage, requestParameters.page, requestParameters.name, requestParameters.tag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomMusicApi - factory interface
 * @export
 */
export const CustomMusicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomMusicApiFp(configuration)
    return {
        /**
         * This endpoint creates rendered audio from timeline data. It returns a render ID that you can use to download the finished audio when it is ready. The render ID is valid for up to 48 hours.
         * @summary Create rendered audio
         * @param {CustomMusicApiCreateRenderedAudioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRenderedAudio(requestParameters: CustomMusicApiCreateRenderedAudioRequest, options?: AxiosRequestConfig): AxiosPromise<AudioRendersListResults> {
            return localVarFp.createRenderedAudio(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint shows the status of one or more audio renders, including download links for completed audio.
         * @summary Get details about audio renders
         * @param {CustomMusicApiGetAudioRendersDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioRendersDetails(requestParameters: CustomMusicApiGetAudioRendersDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<AudioRendersListResults> {
            return localVarFp.getAudioRendersDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists the descriptors that you can use in the audio regions in an audio render.
         * @summary List computer audio descriptors
         * @param {CustomMusicApiListAudioDescriptorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAudioDescriptors(requestParameters: CustomMusicApiListAudioDescriptorsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DescriptorsListResult> {
            return localVarFp.listAudioDescriptors(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists the instruments that you can include in computer audio. If you specify more than one search parameter, the API uses an AND condition.
         * @summary List computer audio instruments
         * @param {CustomMusicApiListComputerAudioInstrumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listComputerAudioInstruments(requestParameters: CustomMusicApiListComputerAudioInstrumentsRequest, options?: AxiosRequestConfig): AxiosPromise<InstrumentsListResult> {
            return localVarFp.listComputerAudioInstruments(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createRenderedAudio operation in CustomMusicApi.
 * @export
 * @interface CustomMusicApiCreateRenderedAudioRequest
 */
export type CustomMusicApiCreateRenderedAudioRequest = {
    
} & CreateAudioRendersRequest

/**
 * Request parameters for getAudioRendersDetails operation in CustomMusicApi.
 * @export
 * @interface CustomMusicApiGetAudioRendersDetailsRequest
 */
export type CustomMusicApiGetAudioRendersDetailsRequest = {
    
    /**
    * One or more render IDs
    * @type {Array<string>}
    * @memberof CustomMusicApiGetAudioRendersDetails
    */
    readonly id: Array<string>
    
}

/**
 * Request parameters for listAudioDescriptors operation in CustomMusicApi.
 * @export
 * @interface CustomMusicApiListAudioDescriptorsRequest
 */
export type CustomMusicApiListAudioDescriptorsRequest = {
    
    /**
    * Show descriptors with an average render speed that is greater than or equal to the specified value
    * @type {number}
    * @memberof CustomMusicApiListAudioDescriptors
    */
    readonly renderSpeedOver?: number
    
    /**
    * Show descriptors that contain the specified band (case-sentsitive)
    * @type {string}
    * @memberof CustomMusicApiListAudioDescriptors
    */
    readonly bandId?: string
    
    /**
    * Show descriptors with the specified band name (case-sensitive)
    * @type {string}
    * @memberof CustomMusicApiListAudioDescriptors
    */
    readonly bandName?: string
    
    /**
    * Page number
    * @type {number}
    * @memberof CustomMusicApiListAudioDescriptors
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof CustomMusicApiListAudioDescriptors
    */
    readonly perPage?: number
    
    /**
    * Show descriptors with the specified IDs (case-sensitive)
    * @type {Array<string>}
    * @memberof CustomMusicApiListAudioDescriptors
    */
    readonly id?: Array<string>
    
    /**
    * Show descriptors with the specified instrument name (case-sensitive)
    * @type {string}
    * @memberof CustomMusicApiListAudioDescriptors
    */
    readonly instrumentName?: string
    
    /**
    * Show descriptors with the specified instrument ID (case-sensitive)
    * @type {string}
    * @memberof CustomMusicApiListAudioDescriptors
    */
    readonly instrumentId?: string
    
    /**
    * Show descriptors whose tempo range includes the specified tempo in beats per minute
    * @type {number}
    * @memberof CustomMusicApiListAudioDescriptors
    */
    readonly tempo?: number
    
    /**
    * Show descriptors with a tempo that is less than or equal to the specified number
    * @type {number}
    * @memberof CustomMusicApiListAudioDescriptors
    */
    readonly tempoTo?: number
    
    /**
    * Show descriptors that have a tempo range that includes the specified tempo in beats per minute
    * @type {number}
    * @memberof CustomMusicApiListAudioDescriptors
    */
    readonly tempoFrom?: number
    
    /**
    * Show descriptors with the specified name (case-sensitive)
    * @type {string}
    * @memberof CustomMusicApiListAudioDescriptors
    */
    readonly name?: string
    
    /**
    * Show descriptors with the specified tag, such as Cinematic or Roomy (case-sensitive)
    * @type {string}
    * @memberof CustomMusicApiListAudioDescriptors
    */
    readonly tag?: string
    
}

/**
 * Request parameters for listComputerAudioInstruments operation in CustomMusicApi.
 * @export
 * @interface CustomMusicApiListComputerAudioInstrumentsRequest
 */
export type CustomMusicApiListComputerAudioInstrumentsRequest = {
    
    /**
    * Show instruments with the specified ID
    * @type {Array<string>}
    * @memberof CustomMusicApiListComputerAudioInstruments
    */
    readonly id?: Array<string>
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof CustomMusicApiListComputerAudioInstruments
    */
    readonly perPage?: number
    
    /**
    * Page number
    * @type {number}
    * @memberof CustomMusicApiListComputerAudioInstruments
    */
    readonly page?: number
    
    /**
    * Show instruments with the specified name (case-sensitive)
    * @type {string}
    * @memberof CustomMusicApiListComputerAudioInstruments
    */
    readonly name?: string
    
    /**
    * Show instruments with the specified tag, such as Percussion or Strings (case-sensitive)
    * @type {string}
    * @memberof CustomMusicApiListComputerAudioInstruments
    */
    readonly tag?: string
    
}

/**
 * CustomMusicApiGenerated - object-oriented interface
 * @export
 * @class CustomMusicApiGenerated
 * @extends {BaseAPI}
 */
export class CustomMusicApiGenerated extends BaseAPI {
    /**
     * This endpoint creates rendered audio from timeline data. It returns a render ID that you can use to download the finished audio when it is ready. The render ID is valid for up to 48 hours.
     * @summary Create rendered audio
     * @param {CustomMusicApiCreateRenderedAudioRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomMusicApiGenerated
     */
    public createRenderedAudio(requestParameters: CustomMusicApiCreateRenderedAudioRequest, options?: AxiosRequestConfig) {
        return CustomMusicApiFp(this.configuration).createRenderedAudio(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint shows the status of one or more audio renders, including download links for completed audio.
     * @summary Get details about audio renders
     * @param {CustomMusicApiGetAudioRendersDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomMusicApiGenerated
     */
    public getAudioRendersDetails(requestParameters: CustomMusicApiGetAudioRendersDetailsRequest, options?: AxiosRequestConfig) {
        return CustomMusicApiFp(this.configuration).getAudioRendersDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists the descriptors that you can use in the audio regions in an audio render.
     * @summary List computer audio descriptors
     * @param {CustomMusicApiListAudioDescriptorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomMusicApiGenerated
     */
    public listAudioDescriptors(requestParameters: CustomMusicApiListAudioDescriptorsRequest = {}, options?: AxiosRequestConfig) {
        return CustomMusicApiFp(this.configuration).listAudioDescriptors(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists the instruments that you can include in computer audio. If you specify more than one search parameter, the API uses an AND condition.
     * @summary List computer audio instruments
     * @param {CustomMusicApiListComputerAudioInstrumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomMusicApiGenerated
     */
    public listComputerAudioInstruments(requestParameters: CustomMusicApiListComputerAudioInstrumentsRequest, options?: AxiosRequestConfig) {
        return CustomMusicApiFp(this.configuration).listComputerAudioInstruments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
