/* tslint:disable */
/* eslint-disable */
/*
Shutterstock API Explorer

The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

The version of the OpenAPI document: 1.1.32


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CatalogCollection } from '../models';
// @ts-ignore
import { CatalogCollectionDataList } from '../models';
// @ts-ignore
import { CatalogCollectionItemDataList } from '../models';
// @ts-ignore
import { CreateCatalogCollection } from '../models';
// @ts-ignore
import { CreateCatalogCollectionItem } from '../models';
// @ts-ignore
import { CreateCatalogCollectionItems } from '../models';
// @ts-ignore
import { RemoveCatalogCollectionItem } from '../models';
// @ts-ignore
import { RemoveCatalogCollectionItems } from '../models';
// @ts-ignore
import { UpdateCatalogCollection } from '../models';
// @ts-ignore
import { UpdateCatalogCollectionCoverAsset } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CatalogApi - axios parameter creator
 * @export
 */
export const CatalogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint adds assets to a catalog collection. It also automatically adds the assets to the user\'s account\'s catalog.
         * @summary Add items to catalog collections
         * @param {string} collectionId The ID of the collection to add assets to
         * @param {CreateCatalogCollectionItems} createCatalogCollectionItems Collection item attributes to add to collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCollectionItems: async (collectionId: string, createCatalogCollectionItems: CreateCatalogCollectionItems, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('addToCollectionItems', 'collectionId', collectionId)
            // verify required parameter 'createCatalogCollectionItems' is not null or undefined
            assertParamExists('addToCollectionItems', 'createCatalogCollectionItems', createCatalogCollectionItems)
            const localVarPath = `/v2/catalog/collections/{collection_id}/items`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collection_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.view", "collections.edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createCatalogCollectionItems,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/catalog/collections/{collection_id}/items',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createCatalogCollectionItems, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint creates a catalog collection and optionally adds assets. To add assets to the collection later, use `PATCH /v2/catalog/collections/{collection_id}/items`.
         * @summary Create catalog collections
         * @param {CreateCatalogCollection} createCatalogCollection Create a catalog collection and, optionally, add items.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollection: async (createCatalogCollection: CreateCatalogCollection, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCatalogCollection' is not null or undefined
            assertParamExists('createCollection', 'createCatalogCollection', createCatalogCollection)
            const localVarPath = `/v2/catalog/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.view", "collections.edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createCatalogCollection,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/catalog/collections',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createCatalogCollection, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint deletes a catalog collection. It does not remove the assets from the user\'s account\'s catalog.
         * @summary Delete catalog collections
         * @param {string} collectionId The ID of the collection to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollection: async (collectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('deleteCollection', 'collectionId', collectionId)
            const localVarPath = `/v2/catalog/collections/{collection_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collection_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/catalog/collections/{collection_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a list of catalog collections.
         * @summary List catalog collections
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {'newest' | 'oldest'} [sort] Sort by
         * @param {boolean} [shared] Set to true to omit collections that you own and return only collections  that are shared with you
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollections: async (page?: number, perPage?: number, sort?: 'newest' | 'oldest', shared?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/catalog/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.view"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (shared !== undefined) {
                localVarQueryParameter['shared'] = shared;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/catalog/collections',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint removes assets from a catalog collection. It does not remove the assets from the user\'s account\'s catalog.
         * @summary Remove items from catalog collection
         * @param {string} collectionId The ID of the collection to remove assets from
         * @param {RemoveCatalogCollectionItems} removeCatalogCollectionItems Items to remove from the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemsFromCollection: async (collectionId: string, removeCatalogCollectionItems: RemoveCatalogCollectionItems, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('removeItemsFromCollection', 'collectionId', collectionId)
            // verify required parameter 'removeCatalogCollectionItems' is not null or undefined
            assertParamExists('removeItemsFromCollection', 'removeCatalogCollectionItems', removeCatalogCollectionItems)
            const localVarPath = `/v2/catalog/collections/{collection_id}/items`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collection_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.view", "collections.edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: removeCatalogCollectionItems,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/catalog/collections/{collection_id}/items',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(removeCatalogCollectionItems, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint searches for assets in the account\'s catalog. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
         * @summary Search catalogs for assets
         * @param {'newest' | 'oldest'} [sort] Sort by
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {string} [query] One or more search terms separated by spaces
         * @param {Array<string>} [collectionId] Filter by collection id
         * @param {Array<'image' | 'video' | 'audio' | 'elements' | 'editorial-image' | 'editorial-video'>} [assetType] Filter by asset type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAssets: async (sort?: 'newest' | 'oldest', page?: number, perPage?: number, query?: string, collectionId?: Array<string>, assetType?: Array<'image' | 'video' | 'audio' | 'elements' | 'editorial-image' | 'editorial-video'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/catalog/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.view"], configuration)
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (collectionId) {
                localVarQueryParameter['collection_id'] = collectionId;
            }

            if (assetType) {
                localVarQueryParameter['asset_type'] = assetType;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/catalog/search',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint updates the metadata of a catalog collection.
         * @summary Update collection metadata
         * @param {string} collectionId ID of collection that needs to be modified
         * @param {UpdateCatalogCollection} updateCatalogCollection Collections Metadata to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCollectionMetadata: async (collectionId: string, updateCatalogCollection: UpdateCatalogCollection, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('updateCollectionMetadata', 'collectionId', collectionId)
            // verify required parameter 'updateCatalogCollection' is not null or undefined
            assertParamExists('updateCollectionMetadata', 'updateCatalogCollection', updateCatalogCollection)
            const localVarPath = `/v2/catalog/collections/{collection_id}`
                .replace(`{${"collection_id"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collection_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.view", "collections.edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateCatalogCollection,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/catalog/collections/{collection_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateCatalogCollection, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogApi - functional programming interface
 * @export
 */
export const CatalogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatalogApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint adds assets to a catalog collection. It also automatically adds the assets to the user\'s account\'s catalog.
         * @summary Add items to catalog collections
         * @param {CatalogApiAddToCollectionItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToCollectionItems(requestParameters: CatalogApiAddToCollectionItemsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogCollection>> {
            const createCatalogCollectionItems: CreateCatalogCollectionItems = {
                items: requestParameters.items
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToCollectionItems(requestParameters.collectionId, createCatalogCollectionItems, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint creates a catalog collection and optionally adds assets. To add assets to the collection later, use `PATCH /v2/catalog/collections/{collection_id}/items`.
         * @summary Create catalog collections
         * @param {CatalogApiCreateCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCollection(requestParameters: CatalogApiCreateCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogCollection>> {
            const createCatalogCollection: CreateCatalogCollection = {
                items: requestParameters.items,
                name: requestParameters.name,
                visibility: requestParameters.visibility
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCollection(createCatalogCollection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint deletes a catalog collection. It does not remove the assets from the user\'s account\'s catalog.
         * @summary Delete catalog collections
         * @param {CatalogApiDeleteCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCollection(requestParameters: CatalogApiDeleteCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCollection(requestParameters.collectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns a list of catalog collections.
         * @summary List catalog collections
         * @param {CatalogApiListCollectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCollections(requestParameters: CatalogApiListCollectionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogCollectionDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCollections(requestParameters.page, requestParameters.perPage, requestParameters.sort, requestParameters.shared, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint removes assets from a catalog collection. It does not remove the assets from the user\'s account\'s catalog.
         * @summary Remove items from catalog collection
         * @param {CatalogApiRemoveItemsFromCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeItemsFromCollection(requestParameters: CatalogApiRemoveItemsFromCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogCollection>> {
            const removeCatalogCollectionItems: RemoveCatalogCollectionItems = {
                items: requestParameters.items
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeItemsFromCollection(requestParameters.collectionId, removeCatalogCollectionItems, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint searches for assets in the account\'s catalog. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
         * @summary Search catalogs for assets
         * @param {CatalogApiSearchAssetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchAssets(requestParameters: CatalogApiSearchAssetsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogCollectionItemDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchAssets(requestParameters.sort, requestParameters.page, requestParameters.perPage, requestParameters.query, requestParameters.collectionId, requestParameters.assetType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint updates the metadata of a catalog collection.
         * @summary Update collection metadata
         * @param {CatalogApiUpdateCollectionMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCollectionMetadata(requestParameters: CatalogApiUpdateCollectionMetadataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogCollection>> {
            const updateCatalogCollection: UpdateCatalogCollection = {
                cover_asset: requestParameters.cover_asset,
                name: requestParameters.name,
                visibility: requestParameters.visibility
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCollectionMetadata(requestParameters.collectionId, updateCatalogCollection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CatalogApi - factory interface
 * @export
 */
export const CatalogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatalogApiFp(configuration)
    return {
        /**
         * This endpoint adds assets to a catalog collection. It also automatically adds the assets to the user\'s account\'s catalog.
         * @summary Add items to catalog collections
         * @param {CatalogApiAddToCollectionItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCollectionItems(requestParameters: CatalogApiAddToCollectionItemsRequest, options?: AxiosRequestConfig): AxiosPromise<CatalogCollection> {
            return localVarFp.addToCollectionItems(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint creates a catalog collection and optionally adds assets. To add assets to the collection later, use `PATCH /v2/catalog/collections/{collection_id}/items`.
         * @summary Create catalog collections
         * @param {CatalogApiCreateCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollection(requestParameters: CatalogApiCreateCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<CatalogCollection> {
            return localVarFp.createCollection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint deletes a catalog collection. It does not remove the assets from the user\'s account\'s catalog.
         * @summary Delete catalog collections
         * @param {CatalogApiDeleteCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollection(requestParameters: CatalogApiDeleteCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCollection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a list of catalog collections.
         * @summary List catalog collections
         * @param {CatalogApiListCollectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollections(requestParameters: CatalogApiListCollectionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CatalogCollectionDataList> {
            return localVarFp.listCollections(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint removes assets from a catalog collection. It does not remove the assets from the user\'s account\'s catalog.
         * @summary Remove items from catalog collection
         * @param {CatalogApiRemoveItemsFromCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemsFromCollection(requestParameters: CatalogApiRemoveItemsFromCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<CatalogCollection> {
            return localVarFp.removeItemsFromCollection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint searches for assets in the account\'s catalog. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
         * @summary Search catalogs for assets
         * @param {CatalogApiSearchAssetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAssets(requestParameters: CatalogApiSearchAssetsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CatalogCollectionItemDataList> {
            return localVarFp.searchAssets(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint updates the metadata of a catalog collection.
         * @summary Update collection metadata
         * @param {CatalogApiUpdateCollectionMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCollectionMetadata(requestParameters: CatalogApiUpdateCollectionMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<CatalogCollection> {
            return localVarFp.updateCollectionMetadata(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addToCollectionItems operation in CatalogApi.
 * @export
 * @interface CatalogApiAddToCollectionItemsRequest
 */
export type CatalogApiAddToCollectionItemsRequest = {
    
    /**
    * The ID of the collection to add assets to
    * @type {string}
    * @memberof CatalogApiAddToCollectionItems
    */
    readonly collectionId: string
    
} & CreateCatalogCollectionItems

/**
 * Request parameters for createCollection operation in CatalogApi.
 * @export
 * @interface CatalogApiCreateCollectionRequest
 */
export type CatalogApiCreateCollectionRequest = {
    
} & CreateCatalogCollection

/**
 * Request parameters for deleteCollection operation in CatalogApi.
 * @export
 * @interface CatalogApiDeleteCollectionRequest
 */
export type CatalogApiDeleteCollectionRequest = {
    
    /**
    * The ID of the collection to delete
    * @type {string}
    * @memberof CatalogApiDeleteCollection
    */
    readonly collectionId: string
    
}

/**
 * Request parameters for listCollections operation in CatalogApi.
 * @export
 * @interface CatalogApiListCollectionsRequest
 */
export type CatalogApiListCollectionsRequest = {
    
    /**
    * Page number
    * @type {number}
    * @memberof CatalogApiListCollections
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof CatalogApiListCollections
    */
    readonly perPage?: number
    
    /**
    * Sort by
    * @type {'newest' | 'oldest'}
    * @memberof CatalogApiListCollections
    */
    readonly sort?: 'newest' | 'oldest'
    
    /**
    * Set to true to omit collections that you own and return only collections  that are shared with you
    * @type {boolean}
    * @memberof CatalogApiListCollections
    */
    readonly shared?: boolean
    
}

/**
 * Request parameters for removeItemsFromCollection operation in CatalogApi.
 * @export
 * @interface CatalogApiRemoveItemsFromCollectionRequest
 */
export type CatalogApiRemoveItemsFromCollectionRequest = {
    
    /**
    * The ID of the collection to remove assets from
    * @type {string}
    * @memberof CatalogApiRemoveItemsFromCollection
    */
    readonly collectionId: string
    
} & RemoveCatalogCollectionItems

/**
 * Request parameters for searchAssets operation in CatalogApi.
 * @export
 * @interface CatalogApiSearchAssetsRequest
 */
export type CatalogApiSearchAssetsRequest = {
    
    /**
    * Sort by
    * @type {'newest' | 'oldest'}
    * @memberof CatalogApiSearchAssets
    */
    readonly sort?: 'newest' | 'oldest'
    
    /**
    * Page number
    * @type {number}
    * @memberof CatalogApiSearchAssets
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof CatalogApiSearchAssets
    */
    readonly perPage?: number
    
    /**
    * One or more search terms separated by spaces
    * @type {string}
    * @memberof CatalogApiSearchAssets
    */
    readonly query?: string
    
    /**
    * Filter by collection id
    * @type {Array<string>}
    * @memberof CatalogApiSearchAssets
    */
    readonly collectionId?: Array<string>
    
    /**
    * Filter by asset type
    * @type {Array<'image' | 'video' | 'audio' | 'elements' | 'editorial-image' | 'editorial-video'>}
    * @memberof CatalogApiSearchAssets
    */
    readonly assetType?: Array<'image' | 'video' | 'audio' | 'elements' | 'editorial-image' | 'editorial-video'>
    
}

/**
 * Request parameters for updateCollectionMetadata operation in CatalogApi.
 * @export
 * @interface CatalogApiUpdateCollectionMetadataRequest
 */
export type CatalogApiUpdateCollectionMetadataRequest = {
    
    /**
    * ID of collection that needs to be modified
    * @type {string}
    * @memberof CatalogApiUpdateCollectionMetadata
    */
    readonly collectionId: string
    
} & UpdateCatalogCollection

/**
 * CatalogApiGenerated - object-oriented interface
 * @export
 * @class CatalogApiGenerated
 * @extends {BaseAPI}
 */
export class CatalogApiGenerated extends BaseAPI {
    /**
     * This endpoint adds assets to a catalog collection. It also automatically adds the assets to the user\'s account\'s catalog.
     * @summary Add items to catalog collections
     * @param {CatalogApiAddToCollectionItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApiGenerated
     */
    public addToCollectionItems(requestParameters: CatalogApiAddToCollectionItemsRequest, options?: AxiosRequestConfig) {
        return CatalogApiFp(this.configuration).addToCollectionItems(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint creates a catalog collection and optionally adds assets. To add assets to the collection later, use `PATCH /v2/catalog/collections/{collection_id}/items`.
     * @summary Create catalog collections
     * @param {CatalogApiCreateCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApiGenerated
     */
    public createCollection(requestParameters: CatalogApiCreateCollectionRequest, options?: AxiosRequestConfig) {
        return CatalogApiFp(this.configuration).createCollection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint deletes a catalog collection. It does not remove the assets from the user\'s account\'s catalog.
     * @summary Delete catalog collections
     * @param {CatalogApiDeleteCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApiGenerated
     */
    public deleteCollection(requestParameters: CatalogApiDeleteCollectionRequest, options?: AxiosRequestConfig) {
        return CatalogApiFp(this.configuration).deleteCollection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns a list of catalog collections.
     * @summary List catalog collections
     * @param {CatalogApiListCollectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApiGenerated
     */
    public listCollections(requestParameters: CatalogApiListCollectionsRequest = {}, options?: AxiosRequestConfig) {
        return CatalogApiFp(this.configuration).listCollections(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint removes assets from a catalog collection. It does not remove the assets from the user\'s account\'s catalog.
     * @summary Remove items from catalog collection
     * @param {CatalogApiRemoveItemsFromCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApiGenerated
     */
    public removeItemsFromCollection(requestParameters: CatalogApiRemoveItemsFromCollectionRequest, options?: AxiosRequestConfig) {
        return CatalogApiFp(this.configuration).removeItemsFromCollection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint searches for assets in the account\'s catalog. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
     * @summary Search catalogs for assets
     * @param {CatalogApiSearchAssetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApiGenerated
     */
    public searchAssets(requestParameters: CatalogApiSearchAssetsRequest = {}, options?: AxiosRequestConfig) {
        return CatalogApiFp(this.configuration).searchAssets(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint updates the metadata of a catalog collection.
     * @summary Update collection metadata
     * @param {CatalogApiUpdateCollectionMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApiGenerated
     */
    public updateCollectionMetadata(requestParameters: CatalogApiUpdateCollectionMetadataRequest, options?: AxiosRequestConfig) {
        return CatalogApiFp(this.configuration).updateCollectionMetadata(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
