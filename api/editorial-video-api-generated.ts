/* tslint:disable */
/* eslint-disable */
/*
Shutterstock API Explorer

The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

The version of the OpenAPI document: 1.1.32


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DownloadHistoryDataList } from '../models';
// @ts-ignore
import { EditorialVideoCategoryResults } from '../models';
// @ts-ignore
import { EditorialVideoContent } from '../models';
// @ts-ignore
import { EditorialVideoSearchResults } from '../models';
// @ts-ignore
import { ISOCountryCode } from '../models';
// @ts-ignore
import { LicenseEditorialContentResults } from '../models';
// @ts-ignore
import { LicenseEditorialVideoContent } from '../models';
// @ts-ignore
import { LicenseEditorialVideoContentRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EditorialVideoApi - axios parameter creator
 * @export
 */
export const EditorialVideoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
         * @summary Get editorial video content details
         * @param {string} id Editorial ID
         * @param {string} country Returns only if the content is available for distribution in a certain country
         * @param {string} [searchId] The ID of the search that is related to this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDetails: async (id: string, country: string, searchId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getContentDetails', 'id', id)
            // verify required parameter 'country' is not null or undefined
            assertParamExists('getContentDetails', 'country', country)
            const localVarPath = `/v2/editorial/videos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/videos/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gets licenses for one or more editorial videos. You must specify the country and one or more editorial videos to license. The download links in the response are valid for 8 hours.
         * @summary License editorial video content
         * @param {LicenseEditorialVideoContentRequest} licenseEditorialVideoContentRequest License editorial video content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        licenseVideos: async (licenseEditorialVideoContentRequest: LicenseEditorialVideoContentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'licenseEditorialVideoContentRequest' is not null or undefined
            assertParamExists('licenseVideos', 'licenseEditorialVideoContentRequest', licenseEditorialVideoContentRequest)
            const localVarPath = `/v2/editorial/videos/licenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["licenses.create", "purchases.view"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: licenseEditorialVideoContentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/videos/licenses',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(licenseEditorialVideoContentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists the categories that editorial videos can belong to, which are separate from the categories that other types of assets can belong to.
         * @summary List editorial video categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVideoCategories: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/editorial/videos/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/videos/categories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists existing editorial video licenses.
         * @summary List editorial video licenses
         * @param {string} [videoId] Show licenses for the specified editorial video ID
         * @param {string} [license] Show editorial videos that are available with the specified license name
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {'newest' | 'oldest'} [sort] Sort order
         * @param {string} [username] Filter licenses by username of licensee
         * @param {string} [startDate] Show licenses created on or after the specified date
         * @param {string} [endDate] Show licenses created before the specified date
         * @param {'all' | 'downloadable' | 'non_downloadable'} [downloadAvailability] Filter licenses by download availability
         * @param {boolean} [teamHistory] Set to true to see license history for all members of your team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVideoLicenses: async (videoId?: string, license?: string, page?: number, perPage?: number, sort?: 'newest' | 'oldest', username?: string, startDate?: string, endDate?: string, downloadAvailability?: 'all' | 'downloadable' | 'non_downloadable', teamHistory?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/editorial/videos/licenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["licenses.view"], configuration)
            if (videoId !== undefined) {
                localVarQueryParameter['video_id'] = videoId;
            }

            if (license !== undefined) {
                localVarQueryParameter['license'] = license;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (downloadAvailability !== undefined) {
                localVarQueryParameter['download_availability'] = downloadAvailability;
            }

            if (teamHistory !== undefined) {
                localVarQueryParameter['team_history'] = teamHistory;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/videos/licenses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint searches for editorial videos. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the `category` parameter to \"Alone,Performing\" and also specify a `query` parameter, the results include only videos that match the query and are in both the Alone and Performing categories.  You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
         * @summary Search editorial video content
         * @param {string} country Show only editorial video content that is available for distribution in a certain country
         * @param {string} [query] One or more search terms separated by spaces
         * @param {'relevant' | 'newest' | 'oldest'} [sort] Sort by
         * @param {string} [category] Show editorial content with each of the specified editorial categories; specify category names in a comma-separated list
         * @param {Array<string>} [supplierCode] Show only editorial video content from certain suppliers
         * @param {string | Date} [dateStart] Show only editorial video content generated on or after a specific date
         * @param {string | Date} [dateEnd] Show only editorial video content generated on or before a specific date
         * @param {'4k' | 'high_definition' | 'standard_definition'} [resolution] Show only editorial video content with specific resolution
         * @param {number} [fps] Show only editorial video content generated with specific frames per second
         * @param {number} [perPage] Number of results per page
         * @param {string} [cursor] The cursor of the page with which to start fetching results; this cursor is returned from previous requests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVideoContent: async (country: string, query?: string, sort?: 'relevant' | 'newest' | 'oldest', category?: string, supplierCode?: Array<string>, dateStart?: string | Date, dateEnd?: string | Date, resolution?: '4k' | 'high_definition' | 'standard_definition', fps?: number, perPage?: number, cursor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'country' is not null or undefined
            assertParamExists('searchVideoContent', 'country', country)
            const localVarPath = `/v2/editorial/videos/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (supplierCode) {
                localVarQueryParameter['supplier_code'] = supplierCode;
            }

            if (dateStart !== undefined) {
                localVarQueryParameter['date_start'] = (dateStart as any instanceof Date) ?
                    (dateStart as any).toISOString().substr(0,10) :
                    dateStart;
            }

            if (dateEnd !== undefined) {
                localVarQueryParameter['date_end'] = (dateEnd as any instanceof Date) ?
                    (dateEnd as any).toISOString().substr(0,10) :
                    dateEnd;
            }

            if (resolution !== undefined) {
                localVarQueryParameter['resolution'] = resolution;
            }

            if (fps !== undefined) {
                localVarQueryParameter['fps'] = fps;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/editorial/videos/search',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EditorialVideoApi - functional programming interface
 * @export
 */
export const EditorialVideoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EditorialVideoApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
         * @summary Get editorial video content details
         * @param {EditorialVideoApiGetContentDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContentDetails(requestParameters: EditorialVideoApiGetContentDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditorialVideoContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContentDetails(requestParameters.id, requestParameters.country, requestParameters.searchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gets licenses for one or more editorial videos. You must specify the country and one or more editorial videos to license. The download links in the response are valid for 8 hours.
         * @summary License editorial video content
         * @param {EditorialVideoApiLicenseVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async licenseVideos(requestParameters: EditorialVideoApiLicenseVideosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LicenseEditorialContentResults>> {
            const licenseEditorialVideoContentRequest: LicenseEditorialVideoContentRequest = {
                country: requestParameters.country,
                editorial: requestParameters.editorial
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.licenseVideos(licenseEditorialVideoContentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists the categories that editorial videos can belong to, which are separate from the categories that other types of assets can belong to.
         * @summary List editorial video categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVideoCategories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditorialVideoCategoryResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVideoCategories(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists existing editorial video licenses.
         * @summary List editorial video licenses
         * @param {EditorialVideoApiListVideoLicensesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVideoLicenses(requestParameters: EditorialVideoApiListVideoLicensesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadHistoryDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVideoLicenses(requestParameters.videoId, requestParameters.license, requestParameters.page, requestParameters.perPage, requestParameters.sort, requestParameters.username, requestParameters.startDate, requestParameters.endDate, requestParameters.downloadAvailability, requestParameters.teamHistory, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint searches for editorial videos. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the `category` parameter to \"Alone,Performing\" and also specify a `query` parameter, the results include only videos that match the query and are in both the Alone and Performing categories.  You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
         * @summary Search editorial video content
         * @param {EditorialVideoApiSearchVideoContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchVideoContent(requestParameters: EditorialVideoApiSearchVideoContentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditorialVideoSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchVideoContent(requestParameters.country, requestParameters.query, requestParameters.sort, requestParameters.category, requestParameters.supplierCode, requestParameters.dateStart, requestParameters.dateEnd, requestParameters.resolution, requestParameters.fps, requestParameters.perPage, requestParameters.cursor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EditorialVideoApi - factory interface
 * @export
 */
export const EditorialVideoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EditorialVideoApiFp(configuration)
    return {
        /**
         * This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
         * @summary Get editorial video content details
         * @param {EditorialVideoApiGetContentDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDetails(requestParameters: EditorialVideoApiGetContentDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<EditorialVideoContent> {
            return localVarFp.getContentDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gets licenses for one or more editorial videos. You must specify the country and one or more editorial videos to license. The download links in the response are valid for 8 hours.
         * @summary License editorial video content
         * @param {EditorialVideoApiLicenseVideosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        licenseVideos(requestParameters: EditorialVideoApiLicenseVideosRequest, options?: AxiosRequestConfig): AxiosPromise<LicenseEditorialContentResults> {
            return localVarFp.licenseVideos(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists the categories that editorial videos can belong to, which are separate from the categories that other types of assets can belong to.
         * @summary List editorial video categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVideoCategories(options?: AxiosRequestConfig): AxiosPromise<EditorialVideoCategoryResults> {
            return localVarFp.listVideoCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists existing editorial video licenses.
         * @summary List editorial video licenses
         * @param {EditorialVideoApiListVideoLicensesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVideoLicenses(requestParameters: EditorialVideoApiListVideoLicensesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DownloadHistoryDataList> {
            return localVarFp.listVideoLicenses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint searches for editorial videos. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the `category` parameter to \"Alone,Performing\" and also specify a `query` parameter, the results include only videos that match the query and are in both the Alone and Performing categories.  You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
         * @summary Search editorial video content
         * @param {EditorialVideoApiSearchVideoContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVideoContent(requestParameters: EditorialVideoApiSearchVideoContentRequest, options?: AxiosRequestConfig): AxiosPromise<EditorialVideoSearchResults> {
            return localVarFp.searchVideoContent(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getContentDetails operation in EditorialVideoApi.
 * @export
 * @interface EditorialVideoApiGetContentDetailsRequest
 */
export type EditorialVideoApiGetContentDetailsRequest = {
    
    /**
    * Editorial ID
    * @type {string}
    * @memberof EditorialVideoApiGetContentDetails
    */
    readonly id: string
    
    /**
    * Returns only if the content is available for distribution in a certain country
    * @type {string}
    * @memberof EditorialVideoApiGetContentDetails
    */
    readonly country: string
    
    /**
    * The ID of the search that is related to this request
    * @type {string}
    * @memberof EditorialVideoApiGetContentDetails
    */
    readonly searchId?: string
    
}

/**
 * Request parameters for licenseVideos operation in EditorialVideoApi.
 * @export
 * @interface EditorialVideoApiLicenseVideosRequest
 */
export type EditorialVideoApiLicenseVideosRequest = {
    
} & LicenseEditorialVideoContentRequest

/**
 * Request parameters for listVideoLicenses operation in EditorialVideoApi.
 * @export
 * @interface EditorialVideoApiListVideoLicensesRequest
 */
export type EditorialVideoApiListVideoLicensesRequest = {
    
    /**
    * Show licenses for the specified editorial video ID
    * @type {string}
    * @memberof EditorialVideoApiListVideoLicenses
    */
    readonly videoId?: string
    
    /**
    * Show editorial videos that are available with the specified license name
    * @type {string}
    * @memberof EditorialVideoApiListVideoLicenses
    */
    readonly license?: string
    
    /**
    * Page number
    * @type {number}
    * @memberof EditorialVideoApiListVideoLicenses
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof EditorialVideoApiListVideoLicenses
    */
    readonly perPage?: number
    
    /**
    * Sort order
    * @type {'newest' | 'oldest'}
    * @memberof EditorialVideoApiListVideoLicenses
    */
    readonly sort?: 'newest' | 'oldest'
    
    /**
    * Filter licenses by username of licensee
    * @type {string}
    * @memberof EditorialVideoApiListVideoLicenses
    */
    readonly username?: string
    
    /**
    * Show licenses created on or after the specified date
    * @type {string}
    * @memberof EditorialVideoApiListVideoLicenses
    */
    readonly startDate?: string
    
    /**
    * Show licenses created before the specified date
    * @type {string}
    * @memberof EditorialVideoApiListVideoLicenses
    */
    readonly endDate?: string
    
    /**
    * Filter licenses by download availability
    * @type {'all' | 'downloadable' | 'non_downloadable'}
    * @memberof EditorialVideoApiListVideoLicenses
    */
    readonly downloadAvailability?: 'all' | 'downloadable' | 'non_downloadable'
    
    /**
    * Set to true to see license history for all members of your team.
    * @type {boolean}
    * @memberof EditorialVideoApiListVideoLicenses
    */
    readonly teamHistory?: boolean
    
}

/**
 * Request parameters for searchVideoContent operation in EditorialVideoApi.
 * @export
 * @interface EditorialVideoApiSearchVideoContentRequest
 */
export type EditorialVideoApiSearchVideoContentRequest = {
    
    /**
    * Show only editorial video content that is available for distribution in a certain country
    * @type {string}
    * @memberof EditorialVideoApiSearchVideoContent
    */
    readonly country: string
    
    /**
    * One or more search terms separated by spaces
    * @type {string}
    * @memberof EditorialVideoApiSearchVideoContent
    */
    readonly query?: string
    
    /**
    * Sort by
    * @type {'relevant' | 'newest' | 'oldest'}
    * @memberof EditorialVideoApiSearchVideoContent
    */
    readonly sort?: 'relevant' | 'newest' | 'oldest'
    
    /**
    * Show editorial content with each of the specified editorial categories; specify category names in a comma-separated list
    * @type {string}
    * @memberof EditorialVideoApiSearchVideoContent
    */
    readonly category?: string
    
    /**
    * Show only editorial video content from certain suppliers
    * @type {Array<string>}
    * @memberof EditorialVideoApiSearchVideoContent
    */
    readonly supplierCode?: Array<string>
    
    /**
    * Show only editorial video content generated on or after a specific date
    * @type {string | Date}
    * @memberof EditorialVideoApiSearchVideoContent
    */
    readonly dateStart?: string | Date
    
    /**
    * Show only editorial video content generated on or before a specific date
    * @type {string | Date}
    * @memberof EditorialVideoApiSearchVideoContent
    */
    readonly dateEnd?: string | Date
    
    /**
    * Show only editorial video content with specific resolution
    * @type {'4k' | 'high_definition' | 'standard_definition'}
    * @memberof EditorialVideoApiSearchVideoContent
    */
    readonly resolution?: '4k' | 'high_definition' | 'standard_definition'
    
    /**
    * Show only editorial video content generated with specific frames per second
    * @type {number}
    * @memberof EditorialVideoApiSearchVideoContent
    */
    readonly fps?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof EditorialVideoApiSearchVideoContent
    */
    readonly perPage?: number
    
    /**
    * The cursor of the page with which to start fetching results; this cursor is returned from previous requests
    * @type {string}
    * @memberof EditorialVideoApiSearchVideoContent
    */
    readonly cursor?: string
    
}

/**
 * EditorialVideoApiGenerated - object-oriented interface
 * @export
 * @class EditorialVideoApiGenerated
 * @extends {BaseAPI}
 */
export class EditorialVideoApiGenerated extends BaseAPI {
    /**
     * This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * @summary Get editorial video content details
     * @param {EditorialVideoApiGetContentDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorialVideoApiGenerated
     */
    public getContentDetails(requestParameters: EditorialVideoApiGetContentDetailsRequest, options?: AxiosRequestConfig) {
        return EditorialVideoApiFp(this.configuration).getContentDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gets licenses for one or more editorial videos. You must specify the country and one or more editorial videos to license. The download links in the response are valid for 8 hours.
     * @summary License editorial video content
     * @param {EditorialVideoApiLicenseVideosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorialVideoApiGenerated
     */
    public licenseVideos(requestParameters: EditorialVideoApiLicenseVideosRequest, options?: AxiosRequestConfig) {
        return EditorialVideoApiFp(this.configuration).licenseVideos(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists the categories that editorial videos can belong to, which are separate from the categories that other types of assets can belong to.
     * @summary List editorial video categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorialVideoApiGenerated
     */
    public listVideoCategories(options?: AxiosRequestConfig) {
        return EditorialVideoApiFp(this.configuration).listVideoCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists existing editorial video licenses.
     * @summary List editorial video licenses
     * @param {EditorialVideoApiListVideoLicensesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorialVideoApiGenerated
     */
    public listVideoLicenses(requestParameters: EditorialVideoApiListVideoLicensesRequest = {}, options?: AxiosRequestConfig) {
        return EditorialVideoApiFp(this.configuration).listVideoLicenses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint searches for editorial videos. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the `category` parameter to \"Alone,Performing\" and also specify a `query` parameter, the results include only videos that match the query and are in both the Alone and Performing categories.  You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
     * @summary Search editorial video content
     * @param {EditorialVideoApiSearchVideoContentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EditorialVideoApiGenerated
     */
    public searchVideoContent(requestParameters: EditorialVideoApiSearchVideoContentRequest, options?: AxiosRequestConfig) {
        return EditorialVideoApiFp(this.configuration).searchVideoContent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
