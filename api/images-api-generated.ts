/* tslint:disable */
/* eslint-disable */
/*
Shutterstock API Explorer

The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.

The version of the OpenAPI document: 1.1.32


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BulkImageSearchResults } from '../models';
// @ts-ignore
import { CategoryDataList } from '../models';
// @ts-ignore
import { Collection } from '../models';
// @ts-ignore
import { CollectionCreateRequest } from '../models';
// @ts-ignore
import { CollectionCreateResponse } from '../models';
// @ts-ignore
import { CollectionDataList } from '../models';
// @ts-ignore
import { CollectionItem } from '../models';
// @ts-ignore
import { CollectionItemDataList } from '../models';
// @ts-ignore
import { CollectionItemRequest } from '../models';
// @ts-ignore
import { CollectionUpdateRequest } from '../models';
// @ts-ignore
import { Cookie } from '../models';
// @ts-ignore
import { DownloadHistoryDataList } from '../models';
// @ts-ignore
import { FeaturedCollection } from '../models';
// @ts-ignore
import { FeaturedCollectionDataList } from '../models';
// @ts-ignore
import { Image } from '../models';
// @ts-ignore
import { ImageDataList } from '../models';
// @ts-ignore
import { ImageSearchResults } from '../models';
// @ts-ignore
import { Language } from '../models';
// @ts-ignore
import { LicenseImageRequest } from '../models';
// @ts-ignore
import { LicenseImageRequestImagesInner } from '../models';
// @ts-ignore
import { LicenseImageResultDataList } from '../models';
// @ts-ignore
import { RecommendationDataList } from '../models';
// @ts-ignore
import { RedownloadImage } from '../models';
// @ts-ignore
import { SearchEntitiesRequest } from '../models';
// @ts-ignore
import { SearchEntitiesResponse } from '../models';
// @ts-ignore
import { SearchImage } from '../models';
// @ts-ignore
import { Suggestions } from '../models';
// @ts-ignore
import { UpdatedMediaDataList } from '../models';
// @ts-ignore
import { Url } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ImagesApi - axios parameter creator
 * @export
 */
export const ImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint adds one or more images to a collection by image IDs.
         * @summary Add images to collections
         * @param {string} id Collection ID
         * @param {CollectionItemRequest} collectionItemRequest Array of image IDs to add to the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCollectionItems: async (id: string, collectionItemRequest: CollectionItemRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addToCollectionItems', 'id', id)
            // verify required parameter 'collectionItemRequest' is not null or undefined
            assertParamExists('addToCollectionItems', 'collectionItemRequest', collectionItemRequest)
            const localVarPath = `/v2/images/collections/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: collectionItemRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/collections/{id}/items',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(collectionItemRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint creates one or more image collections (lightboxes). To add images to the collections, use `POST /v2/images/collections/{id}/items`.
         * @summary Create image collections
         * @param {CollectionCreateRequest} collectionCreateRequest The names of the new collections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollection: async (collectionCreateRequest: CollectionCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionCreateRequest' is not null or undefined
            assertParamExists('createCollection', 'collectionCreateRequest', collectionCreateRequest)
            const localVarPath = `/v2/images/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: collectionCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/collections',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(collectionCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint deletes an image collection.
         * @summary Delete image collections
         * @param {string} id Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollection: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCollection', 'id', id)
            const localVarPath = `/v2/images/collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.edit"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/collections/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns up to 10 important keywords from a block of plain text.
         * @summary Get keywords from text
         * @param {SearchEntitiesRequest} searchEntitiesRequest Plain text to extract keywords from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractKeywordsFromText: async (searchEntitiesRequest: SearchEntitiesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchEntitiesRequest' is not null or undefined
            assertParamExists('extractKeywordsFromText', 'searchEntitiesRequest', searchEntitiesRequest)
            const localVarPath = `/v2/images/search/suggestions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: searchEntitiesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/search/suggestions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(searchEntitiesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gets more detailed information about a featured collection, including its cover image and timestamps for its creation and most recent update. To get the images, use `GET /v2/images/collections/featured/{id}/items`.
         * @summary Get the details of featured image collections
         * @param {string} id Collection ID
         * @param {'share_url'} [embed] Which sharing information to include in the response, such as a URL to the collection
         * @param {'1x' | '2x'} [assetHint] Cover image size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuredCollectionDetails: async (id: string, embed?: 'share_url', assetHint?: '1x' | '2x', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('featuredCollectionDetails', 'id', id)
            const localVarPath = `/v2/images/collections/featured/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (embed !== undefined) {
                localVarQueryParameter['embed'] = embed;
            }

            if (assetHint !== undefined) {
                localVarQueryParameter['asset_hint'] = assetHint;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/collections/featured/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gets more detailed information about a collection, including its cover image and timestamps for its creation and most recent update. To get the images in collections, use `GET /v2/images/collections/{id}/items`.
         * @summary Get the details of image collections
         * @param {string} id Collection ID
         * @param {Array<'share_code' | 'share_url'>} [embed] Which sharing information to include in the response, such as a URL to the collection
         * @param {string} [shareCode] Code to retrieve a shared collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionDetails: async (id: string, embed?: Array<'share_code' | 'share_url'>, shareCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCollectionDetails', 'id', id)
            const localVarPath = `/v2/images/collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.view"], configuration)
            if (embed) {
                localVarQueryParameter['embed'] = embed;
            }

            if (shareCode !== undefined) {
                localVarQueryParameter['share_code'] = shareCode;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/collections/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists the IDs of images in a featured collection and the date that each was added.
         * @summary Get the contents of featured image collections
         * @param {string} id Collection ID
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionItems: async (id: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCollectionItems', 'id', id)
            const localVarPath = `/v2/images/collections/featured/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/collections/featured/{id}/items',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists the IDs of images in a collection and the date that each was added.
         * @summary Get the contents of image collections
         * @param {string} id Collection ID
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {string} [shareCode] Code to retrieve the contents of a shared collection
         * @param {'newest' | 'oldest'} [sort] Sort order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionItems_1: async (id: string, page?: number, perPage?: number, shareCode?: string, sort?: 'newest' | 'oldest', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCollectionItems_1', 'id', id)
            const localVarPath = `/v2/images/collections/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.view"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (shareCode !== undefined) {
                localVarQueryParameter['share_code'] = shareCode;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/collections/{id}/items',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint shows information about an image, including a URL to a preview image and the sizes that it is available in.
         * @summary Get details about images
         * @param {string} id Image ID
         * @param {Language} [language] Language for the keywords and categories in the response
         * @param {'minimal' | 'full'} [view] Amount of detail to render in the response
         * @param {string} [searchId] The ID of the search that is related to this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (id: string, language?: Language, view?: 'minimal' | 'full', searchId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDetails', 'id', id)
            const localVarPath = `/v2/images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint provides autocomplete suggestions for partial search terms.
         * @summary Get suggestions for a search term
         * @param {string} query Search term for which you want keyword suggestions
         * @param {number} [limit] Limit the number of suggestions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchSuggestions: async (query: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('getSearchSuggestions', 'query', query)
            const localVarPath = `/v2/images/search/suggestions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/search/suggestions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gets licenses for one or more images. You must specify the image IDs in the body parameter and other details like the format, size, and subscription ID either in the query parameter or with each image ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
         * @summary License images
         * @param {LicenseImageRequest} licenseImageRequest List of images to request licenses for and information about each license transaction; these values override the defaults in the query parameters
         * @param {string} [subscriptionId] Subscription ID to use to license the image
         * @param {'eps' | 'jpg'} [format] (Deprecated) Image format
         * @param {'small' | 'medium' | 'huge' | 'vector' | 'custom'} [size] Image size
         * @param {string} [searchId] Search ID that was provided in the results of an image search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        licenseImagesForMultiple: async (licenseImageRequest: LicenseImageRequest, subscriptionId?: string, format?: 'eps' | 'jpg', size?: 'small' | 'medium' | 'huge' | 'vector' | 'custom', searchId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'licenseImageRequest' is not null or undefined
            assertParamExists('licenseImagesForMultiple', 'licenseImageRequest', licenseImageRequest)
            const localVarPath = `/v2/images/licenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["licenses.create", "purchases.view"], configuration)
            if (subscriptionId !== undefined) {
                localVarQueryParameter['subscription_id'] = subscriptionId;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: licenseImageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/licenses',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(licenseImageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists the categories (Shutterstock-assigned genres) that images can belong to.
         * @summary List image categories
         * @param {Language} [language] Language for the keywords and categories in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories: async (language?: Language, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/images/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/categories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists your collections of images and their basic attributes.
         * @summary List image collections
         * @param {Array<'share_code' | 'share_url'>} [embed] Which sharing information to include in the response, such as a URL to the collection
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollections: async (embed?: Array<'share_code' | 'share_url'>, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/images/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.view"], configuration)
            if (embed) {
                localVarQueryParameter['embed'] = embed;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/collections',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists featured collections of specific types and a name and cover image for each collection.
         * @summary List featured image collections
         * @param {'share_url'} [embed] Which sharing information to include in the response, such as a URL to the collection
         * @param {Array<'photo' | 'editorial' | 'vector'>} [type] The types of collections to return
         * @param {'1x' | '2x'} [assetHint] Cover image size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturedCollections: async (embed?: 'share_url', type?: Array<'photo' | 'editorial' | 'vector'>, assetHint?: '1x' | '2x', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/images/collections/featured`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (embed !== undefined) {
                localVarQueryParameter['embed'] = embed;
            }

            if (type) {
                localVarQueryParameter['type'] = type;
            }

            if (assetHint !== undefined) {
                localVarQueryParameter['asset_hint'] = assetHint;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/collections/featured',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists information about one or more images, including the available sizes.
         * @summary List images
         * @param {Array<string>} id One or more image IDs
         * @param {'minimal' | 'full'} [view] Amount of detail to render in the response
         * @param {string} [searchId] The ID of the search that is related to this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInfo: async (id: Array<string>, view?: 'minimal' | 'full', searchId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listInfo', 'id', id)
            const localVarPath = `/v2/images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists existing licenses.
         * @summary List image licenses
         * @param {string} [imageId] Show licenses for the specified image ID
         * @param {string} [license] Show images that are available with the specified license, such as &#x60;standard&#x60; or &#x60;enhanced&#x60;; prepending a &#x60;-&#x60; sign excludes results from that license
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {'newest' | 'oldest'} [sort] Sort order
         * @param {string} [username] Filter licenses by username of licensee
         * @param {string} [startDate] Show licenses created on or after the specified date
         * @param {string} [endDate] Show licenses created before the specified date
         * @param {'all' | 'downloadable' | 'non_downloadable'} [downloadAvailability] Filter licenses by download availability
         * @param {boolean} [teamHistory] Set to true to see license history for all members of your team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLicenses: async (imageId?: string, license?: string, page?: number, perPage?: number, sort?: 'newest' | 'oldest', username?: string, startDate?: string, endDate?: string, downloadAvailability?: 'all' | 'downloadable' | 'non_downloadable', teamHistory?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/images/licenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["licenses.view"], configuration)
            if (imageId !== undefined) {
                localVarQueryParameter['image_id'] = imageId;
            }

            if (license !== undefined) {
                localVarQueryParameter['license'] = license;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (downloadAvailability !== undefined) {
                localVarQueryParameter['download_availability'] = downloadAvailability;
            }

            if (teamHistory !== undefined) {
                localVarQueryParameter['team_history'] = teamHistory;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/licenses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns images that customers put in the same collection as the specified image IDs.
         * @summary List recommended images
         * @param {Array<string>} id Image IDs
         * @param {number} [maxItems] Maximum number of results returned in the response
         * @param {boolean} [safe] Restrict results to safe images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRecommendedImages: async (id: Array<string>, maxItems?: number, safe?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listRecommendedImages', 'id', id)
            const localVarPath = `/v2/images/recommendations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (maxItems !== undefined) {
                localVarQueryParameter['max_items'] = maxItems;
            }

            if (safe !== undefined) {
                localVarQueryParameter['safe'] = safe;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/recommendations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns images that are visually similar to an image that you specify.
         * @summary List similar images
         * @param {string} id Image ID
         * @param {Language} [language] Language for the keywords and categories in the response
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {'minimal' | 'full'} [view] Amount of detail to render in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSimilarImages: async (id: string, language?: Language, page?: number, perPage?: number, view?: 'minimal' | 'full', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSimilarImages', 'id', id)
            const localVarPath = `/v2/images/{id}/similar`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/{id}/similar',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show images that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.
         * @summary List updated images
         * @param {Array<'addition' | 'deletion' | 'edit'>} [type] Show images that were added, deleted, or edited; by default, the endpoint returns images that were updated in any of these ways
         * @param {string | Date} [startDate] Show images updated on or after the specified date
         * @param {string | Date} [endDate] Show images updated before the specified date
         * @param {string} [interval] Show images updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows images that were updated in the hour preceding the request
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {'newest' | 'oldest'} [sort] Sort order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUpdatedContent: async (type?: Array<'addition' | 'deletion' | 'edit'>, startDate?: string | Date, endDate?: string | Date, interval?: string, page?: number, perPage?: number, sort?: 'newest' | 'oldest', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/images/updated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (type) {
                localVarQueryParameter['type'] = type;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/updated',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint redownloads images that you have already received a license for. The download links in the response are valid for 8 hours.
         * @summary Download images
         * @param {string} id License ID
         * @param {RedownloadImage} redownloadImage Information about the images to redownload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redownloadLicense: async (id: string, redownloadImage: RedownloadImage, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('redownloadLicense', 'id', id)
            // verify required parameter 'redownloadImage' is not null or undefined
            assertParamExists('redownloadLicense', 'redownloadImage', redownloadImage)
            const localVarPath = `/v2/images/licenses/{id}/downloads`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["licenses.view"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: redownloadImage,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/licenses/{id}/downloads',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(redownloadImage, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint removes one or more images from a collection.
         * @summary Remove images from collections
         * @param {string} id Collection ID
         * @param {Array<string>} [itemId] One or more image IDs to remove from the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromCollection: async (id: string, itemId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeFromCollection', 'id', id)
            const localVarPath = `/v2/images/collections/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.edit"], configuration)
            if (itemId) {
                localVarQueryParameter['item_id'] = itemId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/collections/{id}/items',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint sets a new name for an image collection.
         * @summary Rename image collections
         * @param {string} id Collection ID
         * @param {CollectionUpdateRequest} collectionUpdateRequest The new name for the collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameCollection: async (id: string, collectionUpdateRequest: CollectionUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('renameCollection', 'id', id)
            // verify required parameter 'collectionUpdateRequest' is not null or undefined
            assertParamExists('renameCollection', 'collectionUpdateRequest', collectionUpdateRequest)
            const localVarPath = `/v2/images/collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", ["collections.edit"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: collectionUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/collections/{id}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(collectionUpdateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint runs up to 5 image searches in a single request and returns up to 20 results per search. You can provide global search parameters in the query parameters and override them for each search in the body parameter. The query and body parameters are the same as in the `GET /v2/images/search` endpoint.
         * @summary Run multiple image searches
         * @param {Array<SearchImage>} searchImage List of queries to request results for and filters to apply per query; these values override the defaults in the query parameters
         * @param {string | Date} [addedDate] Show images added on the specified date
         * @param {string | Date} [addedDateStart] Show images added on or after the specified date
         * @param {number} [aspectRatioMin] Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
         * @param {number} [aspectRatioMax] Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
         * @param {number} [aspectRatio] Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
         * @param {string | Date} [addedDateEnd] Show images added before the specified date
         * @param {string} [category] Show images with the specified Shutterstock-defined category; specify a category name or ID
         * @param {string} [color] Specify either a hexadecimal color in the format \&#39;4F21EA\&#39; or \&#39;grayscale\&#39;; the API returns images that use similar colors
         * @param {Array<string>} [contributor] Show images with the specified contributor names or IDs, allows multiple
         * @param {ImagesRunMultipleSearchesContributorCountryParameter} [contributorCountry] Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search
         * @param {string} [fields] Fields to display in the response; see the documentation for the fields parameter in the overview section
         * @param {number} [height] (Deprecated; use height_from and height_to instead) Show images with the specified height
         * @param {number} [heightFrom] Show images with the specified height or larger, in pixels
         * @param {number} [heightTo] Show images with the specified height or smaller, in pixels
         * @param {Array<'photo' | 'illustration' | 'vector'>} [imageType] Show images of the specified type
         * @param {boolean} [keywordSafeSearch] Hide results with potentially unsafe keywords
         * @param {Language} [language] Set query and result language (uses Accept-Language header if not set)
         * @param {Array<'commercial' | 'editorial' | 'enhanced'>} [license] Show only images with the specified license
         * @param {Array<string>} [model] Show image results with the specified model IDs
         * @param {'horizontal' | 'vertical'} [orientation] Show image results with horizontal or vertical orientation
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {boolean} [peopleModelReleased] Show images of people with a signed model release
         * @param {'infants' | 'children' | 'teenagers' | '20s' | '30s' | '40s' | '50s' | '60s' | 'older'} [peopleAge] Show images that feature people of the specified age category
         * @param {Array<'african' | 'african_american' | 'black' | 'brazilian' | 'chinese' | 'caucasian' | 'east_asian' | 'hispanic' | 'japanese' | 'middle_eastern' | 'native_american' | 'pacific_islander' | 'south_asian' | 'southeast_asian' | 'other' | 'NOT african' | 'NOT african_american' | 'NOT black' | 'NOT brazilian' | 'NOT chinese' | 'NOT caucasian' | 'NOT east_asian' | 'NOT hispanic' | 'NOT japanese' | 'NOT middle_eastern' | 'NOT native_american' | 'NOT pacific_islander' | 'NOT south_asian' | 'NOT southeast_asian' | 'NOT other'>} [peopleEthnicity] Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
         * @param {'male' | 'female' | 'both'} [peopleGender] Show images with people of the specified gender
         * @param {number} [peopleNumber] Show images with the specified number of people
         * @param {ImagesRunMultipleSearchesRegionParameter} [region] Raise or lower search result rankings based on the result\&#39;s relevance to a specified region; you can provide a country code or an IP address from which the API infers a country
         * @param {boolean} [safe] Enable or disable safe search
         * @param {'newest' | 'popular' | 'relevance' | 'random'} [sort] Sort by
         * @param {boolean} [spellcheckQuery] Spellcheck the search query and return results on suggested spellings
         * @param {'minimal' | 'full'} [view] Amount of detail to render in the response
         * @param {number} [width] (Deprecated; use width_from and width_to instead) Show images with the specified width
         * @param {number} [widthFrom] Show images with the specified width or larger, in pixels
         * @param {number} [widthTo] Show images with the specified width or smaller, in pixels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runMultipleSearches: async (searchImage: Array<SearchImage>, addedDate?: string | Date, addedDateStart?: string | Date, aspectRatioMin?: number, aspectRatioMax?: number, aspectRatio?: number, addedDateEnd?: string | Date, category?: string, color?: string, contributor?: Array<string>, contributorCountry?: ImagesRunMultipleSearchesContributorCountryParameter, fields?: string, height?: number, heightFrom?: number, heightTo?: number, imageType?: Array<'photo' | 'illustration' | 'vector'>, keywordSafeSearch?: boolean, language?: Language, license?: Array<'commercial' | 'editorial' | 'enhanced'>, model?: Array<string>, orientation?: 'horizontal' | 'vertical', page?: number, perPage?: number, peopleModelReleased?: boolean, peopleAge?: 'infants' | 'children' | 'teenagers' | '20s' | '30s' | '40s' | '50s' | '60s' | 'older', peopleEthnicity?: Array<'african' | 'african_american' | 'black' | 'brazilian' | 'chinese' | 'caucasian' | 'east_asian' | 'hispanic' | 'japanese' | 'middle_eastern' | 'native_american' | 'pacific_islander' | 'south_asian' | 'southeast_asian' | 'other' | 'NOT african' | 'NOT african_american' | 'NOT black' | 'NOT brazilian' | 'NOT chinese' | 'NOT caucasian' | 'NOT east_asian' | 'NOT hispanic' | 'NOT japanese' | 'NOT middle_eastern' | 'NOT native_american' | 'NOT pacific_islander' | 'NOT south_asian' | 'NOT southeast_asian' | 'NOT other'>, peopleGender?: 'male' | 'female' | 'both', peopleNumber?: number, region?: ImagesRunMultipleSearchesRegionParameter, safe?: boolean, sort?: 'newest' | 'popular' | 'relevance' | 'random', spellcheckQuery?: boolean, view?: 'minimal' | 'full', width?: number, widthFrom?: number, widthTo?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchImage' is not null or undefined
            assertParamExists('runMultipleSearches', 'searchImage', searchImage)
            const localVarPath = `/v2/bulk_search/images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (addedDate !== undefined) {
                localVarQueryParameter['added_date'] = (addedDate as any instanceof Date) ?
                    (addedDate as any).toISOString().substr(0,10) :
                    addedDate;
            }

            if (addedDateStart !== undefined) {
                localVarQueryParameter['added_date_start'] = (addedDateStart as any instanceof Date) ?
                    (addedDateStart as any).toISOString().substr(0,10) :
                    addedDateStart;
            }

            if (aspectRatioMin !== undefined) {
                localVarQueryParameter['aspect_ratio_min'] = aspectRatioMin;
            }

            if (aspectRatioMax !== undefined) {
                localVarQueryParameter['aspect_ratio_max'] = aspectRatioMax;
            }

            if (aspectRatio !== undefined) {
                localVarQueryParameter['aspect_ratio'] = aspectRatio;
            }

            if (addedDateEnd !== undefined) {
                localVarQueryParameter['added_date_end'] = (addedDateEnd as any instanceof Date) ?
                    (addedDateEnd as any).toISOString().substr(0,10) :
                    addedDateEnd;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (color !== undefined) {
                localVarQueryParameter['color'] = color;
            }

            if (contributor) {
                localVarQueryParameter['contributor'] = contributor;
            }

            if (contributorCountry !== undefined) {
                localVarQueryParameter['contributor_country'] = contributorCountry;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (heightFrom !== undefined) {
                localVarQueryParameter['height_from'] = heightFrom;
            }

            if (heightTo !== undefined) {
                localVarQueryParameter['height_to'] = heightTo;
            }

            if (imageType) {
                localVarQueryParameter['image_type'] = imageType;
            }

            if (keywordSafeSearch !== undefined) {
                localVarQueryParameter['keyword_safe_search'] = keywordSafeSearch;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (license) {
                localVarQueryParameter['license'] = license;
            }

            if (model) {
                localVarQueryParameter['model'] = model;
            }

            if (orientation !== undefined) {
                localVarQueryParameter['orientation'] = orientation;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (peopleModelReleased !== undefined) {
                localVarQueryParameter['people_model_released'] = peopleModelReleased;
            }

            if (peopleAge !== undefined) {
                localVarQueryParameter['people_age'] = peopleAge;
            }

            if (peopleEthnicity) {
                localVarQueryParameter['people_ethnicity'] = peopleEthnicity;
            }

            if (peopleGender !== undefined) {
                localVarQueryParameter['people_gender'] = peopleGender;
            }

            if (peopleNumber !== undefined) {
                localVarQueryParameter['people_number'] = peopleNumber;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (safe !== undefined) {
                localVarQueryParameter['safe'] = safe;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (spellcheckQuery !== undefined) {
                localVarQueryParameter['spellcheck_query'] = spellcheckQuery;
            }

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (widthFrom !== undefined) {
                localVarQueryParameter['width_from'] = widthFrom;
            }

            if (widthTo !== undefined) {
                localVarQueryParameter['width_to'] = widthTo;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: searchImage,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/bulk_search/images',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(searchImage, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint searches for images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT. Free API accounts show results only from a limited library of media, not the full Shutterstock media library. Also, the number of search fields they can use in a request is limited.
         * @summary Search for images
         * @param {string | Date} [addedDate] Show images added on the specified date
         * @param {string | Date} [addedDateStart] Show images added on or after the specified date
         * @param {number} [aspectRatioMin] Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
         * @param {number} [aspectRatioMax] Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
         * @param {number} [aspectRatio] Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
         * @param {boolean} [aiSearch] Set to true and specify the &#x60;ai_objective&#x60; and &#x60;ai_industry&#x60; parameters to use AI-powered search; the API returns information about how well images meet the objective for the industry 
         * @param {number} [aiLabelsLimit] For AI-powered search, specify the maximum number of labels to return
         * @param {'automotive' | 'cpg' | 'finance' | 'healthcare' | 'retail' | 'technology'} [aiIndustry] For AI-powered search, specify the industry to target; requires that the &#x60;ai_search&#x60; parameter is set to true
         * @param {'awareness' | 'traffic' | 'conversions'} [aiObjective] For AI-powered search, specify the goal of the media; requires that the &#x60;ai_search&#x60; parameter is set to true
         * @param {string | Date} [addedDateEnd] Show images added before the specified date
         * @param {string} [category] Show images with the specified Shutterstock-defined category; specify a category name or ID
         * @param {string} [color] Specify either a hexadecimal color in the format \&#39;4F21EA\&#39; or \&#39;grayscale\&#39;; the API returns images that use similar colors
         * @param {Array<string>} [contributor] Show images with the specified contributor names or IDs, allows multiple
         * @param {ImagesRunMultipleSearchesContributorCountryParameter} [contributorCountry] Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search
         * @param {string} [fields] Fields to display in the response; see the documentation for the fields parameter in the overview section
         * @param {number} [height] (Deprecated; use height_from and height_to instead) Show images with the specified height
         * @param {number} [heightFrom] Show images with the specified height or larger, in pixels
         * @param {number} [heightTo] Show images with the specified height or smaller, in pixels
         * @param {Array<'photo' | 'illustration' | 'vector'>} [imageType] Show images of the specified type
         * @param {boolean} [keywordSafeSearch] Hide results with potentially unsafe keywords
         * @param {Language} [language] Set query and result language (uses Accept-Language header if not set)
         * @param {Array<'commercial' | 'editorial' | 'enhanced'>} [license] Show only images with the specified license
         * @param {Array<string>} [model] Show image results with the specified model IDs
         * @param {'horizontal' | 'vertical'} [orientation] Show image results with horizontal or vertical orientation
         * @param {number} [page] Page number
         * @param {number} [perPage] Number of results per page
         * @param {boolean} [peopleModelReleased] Show images of people with a signed model release
         * @param {'infants' | 'children' | 'teenagers' | '20s' | '30s' | '40s' | '50s' | '60s' | 'older'} [peopleAge] Show images that feature people of the specified age category
         * @param {Array<'african' | 'african_american' | 'black' | 'brazilian' | 'chinese' | 'caucasian' | 'east_asian' | 'hispanic' | 'japanese' | 'middle_eastern' | 'native_american' | 'pacific_islander' | 'south_asian' | 'southeast_asian' | 'other' | 'NOT african' | 'NOT african_american' | 'NOT black' | 'NOT brazilian' | 'NOT chinese' | 'NOT caucasian' | 'NOT east_asian' | 'NOT hispanic' | 'NOT japanese' | 'NOT middle_eastern' | 'NOT native_american' | 'NOT pacific_islander' | 'NOT south_asian' | 'NOT southeast_asian' | 'NOT other'>} [peopleEthnicity] Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
         * @param {'male' | 'female' | 'both'} [peopleGender] Show images with people of the specified gender
         * @param {number} [peopleNumber] Show images with the specified number of people
         * @param {string} [query] One or more search terms separated by spaces; you can use NOT to filter out images that match a term
         * @param {ImagesRunMultipleSearchesRegionParameter} [region] Raise or lower search result rankings based on the result\&#39;s relevance to a specified region; you can provide a country code or an IP address from which the API infers a country
         * @param {boolean} [safe] Enable or disable safe search
         * @param {'newest' | 'popular' | 'relevance' | 'random'} [sort] Sort by
         * @param {boolean} [spellcheckQuery] Spellcheck the search query and return results on suggested spellings
         * @param {'minimal' | 'full'} [view] Amount of detail to render in the response
         * @param {number} [width] (Deprecated; use width_from and width_to instead) Show images with the specified width
         * @param {number} [widthFrom] Show images with the specified width or larger, in pixels
         * @param {number} [widthTo] Show images with the specified width or smaller, in pixels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchImages: async (addedDate?: string | Date, addedDateStart?: string | Date, aspectRatioMin?: number, aspectRatioMax?: number, aspectRatio?: number, aiSearch?: boolean, aiLabelsLimit?: number, aiIndustry?: 'automotive' | 'cpg' | 'finance' | 'healthcare' | 'retail' | 'technology', aiObjective?: 'awareness' | 'traffic' | 'conversions', addedDateEnd?: string | Date, category?: string, color?: string, contributor?: Array<string>, contributorCountry?: ImagesRunMultipleSearchesContributorCountryParameter, fields?: string, height?: number, heightFrom?: number, heightTo?: number, imageType?: Array<'photo' | 'illustration' | 'vector'>, keywordSafeSearch?: boolean, language?: Language, license?: Array<'commercial' | 'editorial' | 'enhanced'>, model?: Array<string>, orientation?: 'horizontal' | 'vertical', page?: number, perPage?: number, peopleModelReleased?: boolean, peopleAge?: 'infants' | 'children' | 'teenagers' | '20s' | '30s' | '40s' | '50s' | '60s' | 'older', peopleEthnicity?: Array<'african' | 'african_american' | 'black' | 'brazilian' | 'chinese' | 'caucasian' | 'east_asian' | 'hispanic' | 'japanese' | 'middle_eastern' | 'native_american' | 'pacific_islander' | 'south_asian' | 'southeast_asian' | 'other' | 'NOT african' | 'NOT african_american' | 'NOT black' | 'NOT brazilian' | 'NOT chinese' | 'NOT caucasian' | 'NOT east_asian' | 'NOT hispanic' | 'NOT japanese' | 'NOT middle_eastern' | 'NOT native_american' | 'NOT pacific_islander' | 'NOT south_asian' | 'NOT southeast_asian' | 'NOT other'>, peopleGender?: 'male' | 'female' | 'both', peopleNumber?: number, query?: string, region?: ImagesRunMultipleSearchesRegionParameter, safe?: boolean, sort?: 'newest' | 'popular' | 'relevance' | 'random', spellcheckQuery?: boolean, view?: 'minimal' | 'full', width?: number, widthFrom?: number, widthTo?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/images/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication customer_accessCode required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "customer_accessCode", [], configuration)
            if (addedDate !== undefined) {
                localVarQueryParameter['added_date'] = (addedDate as any instanceof Date) ?
                    (addedDate as any).toISOString().substr(0,10) :
                    addedDate;
            }

            if (addedDateStart !== undefined) {
                localVarQueryParameter['added_date_start'] = (addedDateStart as any instanceof Date) ?
                    (addedDateStart as any).toISOString().substr(0,10) :
                    addedDateStart;
            }

            if (aspectRatioMin !== undefined) {
                localVarQueryParameter['aspect_ratio_min'] = aspectRatioMin;
            }

            if (aspectRatioMax !== undefined) {
                localVarQueryParameter['aspect_ratio_max'] = aspectRatioMax;
            }

            if (aspectRatio !== undefined) {
                localVarQueryParameter['aspect_ratio'] = aspectRatio;
            }

            if (aiSearch !== undefined) {
                localVarQueryParameter['ai_search'] = aiSearch;
            }

            if (aiLabelsLimit !== undefined) {
                localVarQueryParameter['ai_labels_limit'] = aiLabelsLimit;
            }

            if (aiIndustry !== undefined) {
                localVarQueryParameter['ai_industry'] = aiIndustry;
            }

            if (aiObjective !== undefined) {
                localVarQueryParameter['ai_objective'] = aiObjective;
            }

            if (addedDateEnd !== undefined) {
                localVarQueryParameter['added_date_end'] = (addedDateEnd as any instanceof Date) ?
                    (addedDateEnd as any).toISOString().substr(0,10) :
                    addedDateEnd;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (color !== undefined) {
                localVarQueryParameter['color'] = color;
            }

            if (contributor) {
                localVarQueryParameter['contributor'] = contributor;
            }

            if (contributorCountry !== undefined) {
                localVarQueryParameter['contributor_country'] = contributorCountry;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }

            if (heightFrom !== undefined) {
                localVarQueryParameter['height_from'] = heightFrom;
            }

            if (heightTo !== undefined) {
                localVarQueryParameter['height_to'] = heightTo;
            }

            if (imageType) {
                localVarQueryParameter['image_type'] = imageType;
            }

            if (keywordSafeSearch !== undefined) {
                localVarQueryParameter['keyword_safe_search'] = keywordSafeSearch;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (license) {
                localVarQueryParameter['license'] = license;
            }

            if (model) {
                localVarQueryParameter['model'] = model;
            }

            if (orientation !== undefined) {
                localVarQueryParameter['orientation'] = orientation;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (peopleModelReleased !== undefined) {
                localVarQueryParameter['people_model_released'] = peopleModelReleased;
            }

            if (peopleAge !== undefined) {
                localVarQueryParameter['people_age'] = peopleAge;
            }

            if (peopleEthnicity) {
                localVarQueryParameter['people_ethnicity'] = peopleEthnicity;
            }

            if (peopleGender !== undefined) {
                localVarQueryParameter['people_gender'] = peopleGender;
            }

            if (peopleNumber !== undefined) {
                localVarQueryParameter['people_number'] = peopleNumber;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (safe !== undefined) {
                localVarQueryParameter['safe'] = safe;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (spellcheckQuery !== undefined) {
                localVarQueryParameter['spellcheck_query'] = spellcheckQuery;
            }

            if (view !== undefined) {
                localVarQueryParameter['view'] = view;
            }

            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }

            if (widthFrom !== undefined) {
                localVarQueryParameter['width_from'] = widthFrom;
            }

            if (widthTo !== undefined) {
                localVarQueryParameter['width_to'] = widthTo;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/images/search',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImagesApi - functional programming interface
 * @export
 */
export const ImagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImagesApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint adds one or more images to a collection by image IDs.
         * @summary Add images to collections
         * @param {ImagesApiAddToCollectionItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToCollectionItems(requestParameters: ImagesApiAddToCollectionItemsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const collectionItemRequest: CollectionItemRequest = {
                items: requestParameters.items
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToCollectionItems(requestParameters.id, collectionItemRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint creates one or more image collections (lightboxes). To add images to the collections, use `POST /v2/images/collections/{id}/items`.
         * @summary Create image collections
         * @param {ImagesApiCreateCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCollection(requestParameters: ImagesApiCreateCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionCreateResponse>> {
            const collectionCreateRequest: CollectionCreateRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCollection(collectionCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint deletes an image collection.
         * @summary Delete image collections
         * @param {ImagesApiDeleteCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCollection(requestParameters: ImagesApiDeleteCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCollection(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns up to 10 important keywords from a block of plain text.
         * @summary Get keywords from text
         * @param {ImagesApiExtractKeywordsFromTextRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async extractKeywordsFromText(requestParameters: ImagesApiExtractKeywordsFromTextRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchEntitiesResponse>> {
            const searchEntitiesRequest: SearchEntitiesRequest = {
                text: requestParameters.text
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.extractKeywordsFromText(searchEntitiesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gets more detailed information about a featured collection, including its cover image and timestamps for its creation and most recent update. To get the images, use `GET /v2/images/collections/featured/{id}/items`.
         * @summary Get the details of featured image collections
         * @param {ImagesApiFeaturedCollectionDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuredCollectionDetails(requestParameters: ImagesApiFeaturedCollectionDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturedCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuredCollectionDetails(requestParameters.id, requestParameters.embed, requestParameters.assetHint, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gets more detailed information about a collection, including its cover image and timestamps for its creation and most recent update. To get the images in collections, use `GET /v2/images/collections/{id}/items`.
         * @summary Get the details of image collections
         * @param {ImagesApiGetCollectionDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionDetails(requestParameters: ImagesApiGetCollectionDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionDetails(requestParameters.id, requestParameters.embed, requestParameters.shareCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists the IDs of images in a featured collection and the date that each was added.
         * @summary Get the contents of featured image collections
         * @param {ImagesApiGetCollectionItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionItems(requestParameters: ImagesApiGetCollectionItemsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionItemDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionItems(requestParameters.id, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists the IDs of images in a collection and the date that each was added.
         * @summary Get the contents of image collections
         * @param {ImagesApiGetCollectionItems0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionItems_1(requestParameters: ImagesApiGetCollectionItems0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionItemDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionItems_1(requestParameters.id, requestParameters.page, requestParameters.perPage, requestParameters.shareCode, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint shows information about an image, including a URL to a preview image and the sizes that it is available in.
         * @summary Get details about images
         * @param {ImagesApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: ImagesApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.id, requestParameters.language, requestParameters.view, requestParameters.searchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint provides autocomplete suggestions for partial search terms.
         * @summary Get suggestions for a search term
         * @param {ImagesApiGetSearchSuggestionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSearchSuggestions(requestParameters: ImagesApiGetSearchSuggestionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Suggestions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSearchSuggestions(requestParameters.query, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gets licenses for one or more images. You must specify the image IDs in the body parameter and other details like the format, size, and subscription ID either in the query parameter or with each image ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
         * @summary License images
         * @param {ImagesApiLicenseImagesForMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async licenseImagesForMultiple(requestParameters: ImagesApiLicenseImagesForMultipleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LicenseImageResultDataList>> {
            const licenseImageRequest: LicenseImageRequest = {
                images: requestParameters.images
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.licenseImagesForMultiple(licenseImageRequest, requestParameters.subscriptionId, requestParameters.format, requestParameters.size, requestParameters.searchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists the categories (Shutterstock-assigned genres) that images can belong to.
         * @summary List image categories
         * @param {ImagesApiListCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCategories(requestParameters: ImagesApiListCategoriesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCategories(requestParameters.language, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists your collections of images and their basic attributes.
         * @summary List image collections
         * @param {ImagesApiListCollectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCollections(requestParameters: ImagesApiListCollectionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCollections(requestParameters.embed, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists featured collections of specific types and a name and cover image for each collection.
         * @summary List featured image collections
         * @param {ImagesApiListFeaturedCollectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFeaturedCollections(requestParameters: ImagesApiListFeaturedCollectionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturedCollectionDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFeaturedCollections(requestParameters.embed, requestParameters.type, requestParameters.assetHint, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists information about one or more images, including the available sizes.
         * @summary List images
         * @param {ImagesApiListInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInfo(requestParameters: ImagesApiListInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInfo(requestParameters.id, requestParameters.view, requestParameters.searchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists existing licenses.
         * @summary List image licenses
         * @param {ImagesApiListLicensesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLicenses(requestParameters: ImagesApiListLicensesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadHistoryDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLicenses(requestParameters.imageId, requestParameters.license, requestParameters.page, requestParameters.perPage, requestParameters.sort, requestParameters.username, requestParameters.startDate, requestParameters.endDate, requestParameters.downloadAvailability, requestParameters.teamHistory, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns images that customers put in the same collection as the specified image IDs.
         * @summary List recommended images
         * @param {ImagesApiListRecommendedImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRecommendedImages(requestParameters: ImagesApiListRecommendedImagesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecommendationDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRecommendedImages(requestParameters.id, requestParameters.maxItems, requestParameters.safe, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint returns images that are visually similar to an image that you specify.
         * @summary List similar images
         * @param {ImagesApiListSimilarImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSimilarImages(requestParameters: ImagesApiListSimilarImagesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSimilarImages(requestParameters.id, requestParameters.language, requestParameters.page, requestParameters.perPage, requestParameters.view, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint lists images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show images that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.
         * @summary List updated images
         * @param {ImagesApiListUpdatedContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUpdatedContent(requestParameters: ImagesApiListUpdatedContentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdatedMediaDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUpdatedContent(requestParameters.type, requestParameters.startDate, requestParameters.endDate, requestParameters.interval, requestParameters.page, requestParameters.perPage, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint redownloads images that you have already received a license for. The download links in the response are valid for 8 hours.
         * @summary Download images
         * @param {ImagesApiRedownloadLicenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redownloadLicense(requestParameters: ImagesApiRedownloadLicenseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Url>> {
            const redownloadImage: RedownloadImage = {
                auth_cookie: requestParameters.auth_cookie,
                show_modal: requestParameters.show_modal,
                size: requestParameters.size,
                verification_code: requestParameters.verification_code
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.redownloadLicense(requestParameters.id, redownloadImage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint removes one or more images from a collection.
         * @summary Remove images from collections
         * @param {ImagesApiRemoveFromCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromCollection(requestParameters: ImagesApiRemoveFromCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFromCollection(requestParameters.id, requestParameters.itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint sets a new name for an image collection.
         * @summary Rename image collections
         * @param {ImagesApiRenameCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async renameCollection(requestParameters: ImagesApiRenameCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const collectionUpdateRequest: CollectionUpdateRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.renameCollection(requestParameters.id, collectionUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint runs up to 5 image searches in a single request and returns up to 20 results per search. You can provide global search parameters in the query parameters and override them for each search in the body parameter. The query and body parameters are the same as in the `GET /v2/images/search` endpoint.
         * @summary Run multiple image searches
         * @param {ImagesApiRunMultipleSearchesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runMultipleSearches(requestParameters: ImagesApiRunMultipleSearchesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkImageSearchResults>> {
            const searchImage: Array<SearchImage> = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.runMultipleSearches(searchImage, requestParameters.addedDate, requestParameters.addedDateStart, requestParameters.aspectRatioMin, requestParameters.aspectRatioMax, requestParameters.aspectRatio, requestParameters.addedDateEnd, requestParameters.category, requestParameters.color, requestParameters.contributor, requestParameters.contributorCountry, requestParameters.fields, requestParameters.height, requestParameters.heightFrom, requestParameters.heightTo, requestParameters.imageType, requestParameters.keywordSafeSearch, requestParameters.language, requestParameters.license, requestParameters.model, requestParameters.orientation, requestParameters.page, requestParameters.perPage, requestParameters.peopleModelReleased, requestParameters.peopleAge, requestParameters.peopleEthnicity, requestParameters.peopleGender, requestParameters.peopleNumber, requestParameters.region, requestParameters.safe, requestParameters.sort, requestParameters.spellcheckQuery, requestParameters.view, requestParameters.width, requestParameters.widthFrom, requestParameters.widthTo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint searches for images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT. Free API accounts show results only from a limited library of media, not the full Shutterstock media library. Also, the number of search fields they can use in a request is limited.
         * @summary Search for images
         * @param {ImagesApiSearchImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchImages(requestParameters: ImagesApiSearchImagesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchImages(requestParameters.addedDate, requestParameters.addedDateStart, requestParameters.aspectRatioMin, requestParameters.aspectRatioMax, requestParameters.aspectRatio, requestParameters.aiSearch, requestParameters.aiLabelsLimit, requestParameters.aiIndustry, requestParameters.aiObjective, requestParameters.addedDateEnd, requestParameters.category, requestParameters.color, requestParameters.contributor, requestParameters.contributorCountry, requestParameters.fields, requestParameters.height, requestParameters.heightFrom, requestParameters.heightTo, requestParameters.imageType, requestParameters.keywordSafeSearch, requestParameters.language, requestParameters.license, requestParameters.model, requestParameters.orientation, requestParameters.page, requestParameters.perPage, requestParameters.peopleModelReleased, requestParameters.peopleAge, requestParameters.peopleEthnicity, requestParameters.peopleGender, requestParameters.peopleNumber, requestParameters.query, requestParameters.region, requestParameters.safe, requestParameters.sort, requestParameters.spellcheckQuery, requestParameters.view, requestParameters.width, requestParameters.widthFrom, requestParameters.widthTo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ImagesApi - factory interface
 * @export
 */
export const ImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImagesApiFp(configuration)
    return {
        /**
         * This endpoint adds one or more images to a collection by image IDs.
         * @summary Add images to collections
         * @param {ImagesApiAddToCollectionItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToCollectionItems(requestParameters: ImagesApiAddToCollectionItemsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addToCollectionItems(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint creates one or more image collections (lightboxes). To add images to the collections, use `POST /v2/images/collections/{id}/items`.
         * @summary Create image collections
         * @param {ImagesApiCreateCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCollection(requestParameters: ImagesApiCreateCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<CollectionCreateResponse> {
            return localVarFp.createCollection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint deletes an image collection.
         * @summary Delete image collections
         * @param {ImagesApiDeleteCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollection(requestParameters: ImagesApiDeleteCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCollection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns up to 10 important keywords from a block of plain text.
         * @summary Get keywords from text
         * @param {ImagesApiExtractKeywordsFromTextRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extractKeywordsFromText(requestParameters: ImagesApiExtractKeywordsFromTextRequest, options?: AxiosRequestConfig): AxiosPromise<SearchEntitiesResponse> {
            return localVarFp.extractKeywordsFromText(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gets more detailed information about a featured collection, including its cover image and timestamps for its creation and most recent update. To get the images, use `GET /v2/images/collections/featured/{id}/items`.
         * @summary Get the details of featured image collections
         * @param {ImagesApiFeaturedCollectionDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuredCollectionDetails(requestParameters: ImagesApiFeaturedCollectionDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<FeaturedCollection> {
            return localVarFp.featuredCollectionDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gets more detailed information about a collection, including its cover image and timestamps for its creation and most recent update. To get the images in collections, use `GET /v2/images/collections/{id}/items`.
         * @summary Get the details of image collections
         * @param {ImagesApiGetCollectionDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionDetails(requestParameters: ImagesApiGetCollectionDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Collection> {
            return localVarFp.getCollectionDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists the IDs of images in a featured collection and the date that each was added.
         * @summary Get the contents of featured image collections
         * @param {ImagesApiGetCollectionItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionItems(requestParameters: ImagesApiGetCollectionItemsRequest, options?: AxiosRequestConfig): AxiosPromise<CollectionItemDataList> {
            return localVarFp.getCollectionItems(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists the IDs of images in a collection and the date that each was added.
         * @summary Get the contents of image collections
         * @param {ImagesApiGetCollectionItems0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionItems_1(requestParameters: ImagesApiGetCollectionItems0Request, options?: AxiosRequestConfig): AxiosPromise<CollectionItemDataList> {
            return localVarFp.getCollectionItems_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint shows information about an image, including a URL to a preview image and the sizes that it is available in.
         * @summary Get details about images
         * @param {ImagesApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: ImagesApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Image> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint provides autocomplete suggestions for partial search terms.
         * @summary Get suggestions for a search term
         * @param {ImagesApiGetSearchSuggestionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchSuggestions(requestParameters: ImagesApiGetSearchSuggestionsRequest, options?: AxiosRequestConfig): AxiosPromise<Suggestions> {
            return localVarFp.getSearchSuggestions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gets licenses for one or more images. You must specify the image IDs in the body parameter and other details like the format, size, and subscription ID either in the query parameter or with each image ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
         * @summary License images
         * @param {ImagesApiLicenseImagesForMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        licenseImagesForMultiple(requestParameters: ImagesApiLicenseImagesForMultipleRequest, options?: AxiosRequestConfig): AxiosPromise<LicenseImageResultDataList> {
            return localVarFp.licenseImagesForMultiple(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists the categories (Shutterstock-assigned genres) that images can belong to.
         * @summary List image categories
         * @param {ImagesApiListCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCategories(requestParameters: ImagesApiListCategoriesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CategoryDataList> {
            return localVarFp.listCategories(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists your collections of images and their basic attributes.
         * @summary List image collections
         * @param {ImagesApiListCollectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollections(requestParameters: ImagesApiListCollectionsRequest, options?: AxiosRequestConfig): AxiosPromise<CollectionDataList> {
            return localVarFp.listCollections(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists featured collections of specific types and a name and cover image for each collection.
         * @summary List featured image collections
         * @param {ImagesApiListFeaturedCollectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeaturedCollections(requestParameters: ImagesApiListFeaturedCollectionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<FeaturedCollectionDataList> {
            return localVarFp.listFeaturedCollections(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists information about one or more images, including the available sizes.
         * @summary List images
         * @param {ImagesApiListInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInfo(requestParameters: ImagesApiListInfoRequest, options?: AxiosRequestConfig): AxiosPromise<ImageDataList> {
            return localVarFp.listInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists existing licenses.
         * @summary List image licenses
         * @param {ImagesApiListLicensesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLicenses(requestParameters: ImagesApiListLicensesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DownloadHistoryDataList> {
            return localVarFp.listLicenses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns images that customers put in the same collection as the specified image IDs.
         * @summary List recommended images
         * @param {ImagesApiListRecommendedImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRecommendedImages(requestParameters: ImagesApiListRecommendedImagesRequest, options?: AxiosRequestConfig): AxiosPromise<RecommendationDataList> {
            return localVarFp.listRecommendedImages(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns images that are visually similar to an image that you specify.
         * @summary List similar images
         * @param {ImagesApiListSimilarImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSimilarImages(requestParameters: ImagesApiListSimilarImagesRequest, options?: AxiosRequestConfig): AxiosPromise<ImageSearchResults> {
            return localVarFp.listSimilarImages(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show images that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.
         * @summary List updated images
         * @param {ImagesApiListUpdatedContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUpdatedContent(requestParameters: ImagesApiListUpdatedContentRequest, options?: AxiosRequestConfig): AxiosPromise<UpdatedMediaDataList> {
            return localVarFp.listUpdatedContent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint redownloads images that you have already received a license for. The download links in the response are valid for 8 hours.
         * @summary Download images
         * @param {ImagesApiRedownloadLicenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redownloadLicense(requestParameters: ImagesApiRedownloadLicenseRequest, options?: AxiosRequestConfig): AxiosPromise<Url> {
            return localVarFp.redownloadLicense(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint removes one or more images from a collection.
         * @summary Remove images from collections
         * @param {ImagesApiRemoveFromCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromCollection(requestParameters: ImagesApiRemoveFromCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFromCollection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint sets a new name for an image collection.
         * @summary Rename image collections
         * @param {ImagesApiRenameCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameCollection(requestParameters: ImagesApiRenameCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.renameCollection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint runs up to 5 image searches in a single request and returns up to 20 results per search. You can provide global search parameters in the query parameters and override them for each search in the body parameter. The query and body parameters are the same as in the `GET /v2/images/search` endpoint.
         * @summary Run multiple image searches
         * @param {ImagesApiRunMultipleSearchesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runMultipleSearches(requestParameters: ImagesApiRunMultipleSearchesRequest, options?: AxiosRequestConfig): AxiosPromise<BulkImageSearchResults> {
            return localVarFp.runMultipleSearches(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint searches for images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT. Free API accounts show results only from a limited library of media, not the full Shutterstock media library. Also, the number of search fields they can use in a request is limited.
         * @summary Search for images
         * @param {ImagesApiSearchImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchImages(requestParameters: ImagesApiSearchImagesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ImageSearchResults> {
            return localVarFp.searchImages(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addToCollectionItems operation in ImagesApi.
 * @export
 * @interface ImagesApiAddToCollectionItemsRequest
 */
export type ImagesApiAddToCollectionItemsRequest = {
    
    /**
    * Collection ID
    * @type {string}
    * @memberof ImagesApiAddToCollectionItems
    */
    readonly id: string
    
} & CollectionItemRequest

/**
 * Request parameters for createCollection operation in ImagesApi.
 * @export
 * @interface ImagesApiCreateCollectionRequest
 */
export type ImagesApiCreateCollectionRequest = {
    
} & CollectionCreateRequest

/**
 * Request parameters for deleteCollection operation in ImagesApi.
 * @export
 * @interface ImagesApiDeleteCollectionRequest
 */
export type ImagesApiDeleteCollectionRequest = {
    
    /**
    * Collection ID
    * @type {string}
    * @memberof ImagesApiDeleteCollection
    */
    readonly id: string
    
}

/**
 * Request parameters for extractKeywordsFromText operation in ImagesApi.
 * @export
 * @interface ImagesApiExtractKeywordsFromTextRequest
 */
export type ImagesApiExtractKeywordsFromTextRequest = {
    
} & SearchEntitiesRequest

/**
 * Request parameters for featuredCollectionDetails operation in ImagesApi.
 * @export
 * @interface ImagesApiFeaturedCollectionDetailsRequest
 */
export type ImagesApiFeaturedCollectionDetailsRequest = {
    
    /**
    * Collection ID
    * @type {string}
    * @memberof ImagesApiFeaturedCollectionDetails
    */
    readonly id: string
    
    /**
    * Which sharing information to include in the response, such as a URL to the collection
    * @type {'share_url'}
    * @memberof ImagesApiFeaturedCollectionDetails
    */
    readonly embed?: 'share_url'
    
    /**
    * Cover image size
    * @type {'1x' | '2x'}
    * @memberof ImagesApiFeaturedCollectionDetails
    */
    readonly assetHint?: '1x' | '2x'
    
}

/**
 * Request parameters for getCollectionDetails operation in ImagesApi.
 * @export
 * @interface ImagesApiGetCollectionDetailsRequest
 */
export type ImagesApiGetCollectionDetailsRequest = {
    
    /**
    * Collection ID
    * @type {string}
    * @memberof ImagesApiGetCollectionDetails
    */
    readonly id: string
    
    /**
    * Which sharing information to include in the response, such as a URL to the collection
    * @type {Array<'share_code' | 'share_url'>}
    * @memberof ImagesApiGetCollectionDetails
    */
    readonly embed?: Array<'share_code' | 'share_url'>
    
    /**
    * Code to retrieve a shared collection
    * @type {string}
    * @memberof ImagesApiGetCollectionDetails
    */
    readonly shareCode?: string
    
}

/**
 * Request parameters for getCollectionItems operation in ImagesApi.
 * @export
 * @interface ImagesApiGetCollectionItemsRequest
 */
export type ImagesApiGetCollectionItemsRequest = {
    
    /**
    * Collection ID
    * @type {string}
    * @memberof ImagesApiGetCollectionItems
    */
    readonly id: string
    
    /**
    * Page number
    * @type {number}
    * @memberof ImagesApiGetCollectionItems
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof ImagesApiGetCollectionItems
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getCollectionItems_1 operation in ImagesApi.
 * @export
 * @interface ImagesApiGetCollectionItems0Request
 */
export type ImagesApiGetCollectionItems0Request = {
    
    /**
    * Collection ID
    * @type {string}
    * @memberof ImagesApiGetCollectionItems0
    */
    readonly id: string
    
    /**
    * Page number
    * @type {number}
    * @memberof ImagesApiGetCollectionItems0
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof ImagesApiGetCollectionItems0
    */
    readonly perPage?: number
    
    /**
    * Code to retrieve the contents of a shared collection
    * @type {string}
    * @memberof ImagesApiGetCollectionItems0
    */
    readonly shareCode?: string
    
    /**
    * Sort order
    * @type {'newest' | 'oldest'}
    * @memberof ImagesApiGetCollectionItems0
    */
    readonly sort?: 'newest' | 'oldest'
    
}

/**
 * Request parameters for getDetails operation in ImagesApi.
 * @export
 * @interface ImagesApiGetDetailsRequest
 */
export type ImagesApiGetDetailsRequest = {
    
    /**
    * Image ID
    * @type {string}
    * @memberof ImagesApiGetDetails
    */
    readonly id: string
    
    /**
    * Language for the keywords and categories in the response
    * @type {Language}
    * @memberof ImagesApiGetDetails
    */
    readonly language?: Language
    
    /**
    * Amount of detail to render in the response
    * @type {'minimal' | 'full'}
    * @memberof ImagesApiGetDetails
    */
    readonly view?: 'minimal' | 'full'
    
    /**
    * The ID of the search that is related to this request
    * @type {string}
    * @memberof ImagesApiGetDetails
    */
    readonly searchId?: string
    
}

/**
 * Request parameters for getSearchSuggestions operation in ImagesApi.
 * @export
 * @interface ImagesApiGetSearchSuggestionsRequest
 */
export type ImagesApiGetSearchSuggestionsRequest = {
    
    /**
    * Search term for which you want keyword suggestions
    * @type {string}
    * @memberof ImagesApiGetSearchSuggestions
    */
    readonly query: string
    
    /**
    * Limit the number of suggestions
    * @type {number}
    * @memberof ImagesApiGetSearchSuggestions
    */
    readonly limit?: number
    
}

/**
 * Request parameters for licenseImagesForMultiple operation in ImagesApi.
 * @export
 * @interface ImagesApiLicenseImagesForMultipleRequest
 */
export type ImagesApiLicenseImagesForMultipleRequest = {
    
    /**
    * Subscription ID to use to license the image
    * @type {string}
    * @memberof ImagesApiLicenseImagesForMultiple
    */
    readonly subscriptionId?: string
    
    /**
    * (Deprecated) Image format
    * @type {'eps' | 'jpg'}
    * @memberof ImagesApiLicenseImagesForMultiple
    */
    readonly format?: 'eps' | 'jpg'
    
    /**
    * Image size
    * @type {'small' | 'medium' | 'huge' | 'vector' | 'custom'}
    * @memberof ImagesApiLicenseImagesForMultiple
    */
    readonly size?: 'small' | 'medium' | 'huge' | 'vector' | 'custom'
    
    /**
    * Search ID that was provided in the results of an image search
    * @type {string}
    * @memberof ImagesApiLicenseImagesForMultiple
    */
    readonly searchId?: string
    
} & LicenseImageRequest

/**
 * Request parameters for listCategories operation in ImagesApi.
 * @export
 * @interface ImagesApiListCategoriesRequest
 */
export type ImagesApiListCategoriesRequest = {
    
    /**
    * Language for the keywords and categories in the response
    * @type {Language}
    * @memberof ImagesApiListCategories
    */
    readonly language?: Language
    
}

/**
 * Request parameters for listCollections operation in ImagesApi.
 * @export
 * @interface ImagesApiListCollectionsRequest
 */
export type ImagesApiListCollectionsRequest = {
    
    /**
    * Which sharing information to include in the response, such as a URL to the collection
    * @type {Array<'share_code' | 'share_url'>}
    * @memberof ImagesApiListCollections
    */
    readonly embed?: Array<'share_code' | 'share_url'>
    
    /**
    * Page number
    * @type {number}
    * @memberof ImagesApiListCollections
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof ImagesApiListCollections
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for listFeaturedCollections operation in ImagesApi.
 * @export
 * @interface ImagesApiListFeaturedCollectionsRequest
 */
export type ImagesApiListFeaturedCollectionsRequest = {
    
    /**
    * Which sharing information to include in the response, such as a URL to the collection
    * @type {'share_url'}
    * @memberof ImagesApiListFeaturedCollections
    */
    readonly embed?: 'share_url'
    
    /**
    * The types of collections to return
    * @type {Array<'photo' | 'editorial' | 'vector'>}
    * @memberof ImagesApiListFeaturedCollections
    */
    readonly type?: Array<'photo' | 'editorial' | 'vector'>
    
    /**
    * Cover image size
    * @type {'1x' | '2x'}
    * @memberof ImagesApiListFeaturedCollections
    */
    readonly assetHint?: '1x' | '2x'
    
}

/**
 * Request parameters for listInfo operation in ImagesApi.
 * @export
 * @interface ImagesApiListInfoRequest
 */
export type ImagesApiListInfoRequest = {
    
    /**
    * One or more image IDs
    * @type {Array<string>}
    * @memberof ImagesApiListInfo
    */
    readonly id: Array<string>
    
    /**
    * Amount of detail to render in the response
    * @type {'minimal' | 'full'}
    * @memberof ImagesApiListInfo
    */
    readonly view?: 'minimal' | 'full'
    
    /**
    * The ID of the search that is related to this request
    * @type {string}
    * @memberof ImagesApiListInfo
    */
    readonly searchId?: string
    
}

/**
 * Request parameters for listLicenses operation in ImagesApi.
 * @export
 * @interface ImagesApiListLicensesRequest
 */
export type ImagesApiListLicensesRequest = {
    
    /**
    * Show licenses for the specified image ID
    * @type {string}
    * @memberof ImagesApiListLicenses
    */
    readonly imageId?: string
    
    /**
    * Show images that are available with the specified license, such as `standard` or `enhanced`; prepending a `-` sign excludes results from that license
    * @type {string}
    * @memberof ImagesApiListLicenses
    */
    readonly license?: string
    
    /**
    * Page number
    * @type {number}
    * @memberof ImagesApiListLicenses
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof ImagesApiListLicenses
    */
    readonly perPage?: number
    
    /**
    * Sort order
    * @type {'newest' | 'oldest'}
    * @memberof ImagesApiListLicenses
    */
    readonly sort?: 'newest' | 'oldest'
    
    /**
    * Filter licenses by username of licensee
    * @type {string}
    * @memberof ImagesApiListLicenses
    */
    readonly username?: string
    
    /**
    * Show licenses created on or after the specified date
    * @type {string}
    * @memberof ImagesApiListLicenses
    */
    readonly startDate?: string
    
    /**
    * Show licenses created before the specified date
    * @type {string}
    * @memberof ImagesApiListLicenses
    */
    readonly endDate?: string
    
    /**
    * Filter licenses by download availability
    * @type {'all' | 'downloadable' | 'non_downloadable'}
    * @memberof ImagesApiListLicenses
    */
    readonly downloadAvailability?: 'all' | 'downloadable' | 'non_downloadable'
    
    /**
    * Set to true to see license history for all members of your team.
    * @type {boolean}
    * @memberof ImagesApiListLicenses
    */
    readonly teamHistory?: boolean
    
}

/**
 * Request parameters for listRecommendedImages operation in ImagesApi.
 * @export
 * @interface ImagesApiListRecommendedImagesRequest
 */
export type ImagesApiListRecommendedImagesRequest = {
    
    /**
    * Image IDs
    * @type {Array<string>}
    * @memberof ImagesApiListRecommendedImages
    */
    readonly id: Array<string>
    
    /**
    * Maximum number of results returned in the response
    * @type {number}
    * @memberof ImagesApiListRecommendedImages
    */
    readonly maxItems?: number
    
    /**
    * Restrict results to safe images
    * @type {boolean}
    * @memberof ImagesApiListRecommendedImages
    */
    readonly safe?: boolean
    
}

/**
 * Request parameters for listSimilarImages operation in ImagesApi.
 * @export
 * @interface ImagesApiListSimilarImagesRequest
 */
export type ImagesApiListSimilarImagesRequest = {
    
    /**
    * Image ID
    * @type {string}
    * @memberof ImagesApiListSimilarImages
    */
    readonly id: string
    
    /**
    * Language for the keywords and categories in the response
    * @type {Language}
    * @memberof ImagesApiListSimilarImages
    */
    readonly language?: Language
    
    /**
    * Page number
    * @type {number}
    * @memberof ImagesApiListSimilarImages
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof ImagesApiListSimilarImages
    */
    readonly perPage?: number
    
    /**
    * Amount of detail to render in the response
    * @type {'minimal' | 'full'}
    * @memberof ImagesApiListSimilarImages
    */
    readonly view?: 'minimal' | 'full'
    
}

/**
 * Request parameters for listUpdatedContent operation in ImagesApi.
 * @export
 * @interface ImagesApiListUpdatedContentRequest
 */
export type ImagesApiListUpdatedContentRequest = {
    
    /**
    * Show images that were added, deleted, or edited; by default, the endpoint returns images that were updated in any of these ways
    * @type {Array<'addition' | 'deletion' | 'edit'>}
    * @memberof ImagesApiListUpdatedContent
    */
    readonly type?: Array<'addition' | 'deletion' | 'edit'>
    
    /**
    * Show images updated on or after the specified date
    * @type {string | Date}
    * @memberof ImagesApiListUpdatedContent
    */
    readonly startDate?: string | Date
    
    /**
    * Show images updated before the specified date
    * @type {string | Date}
    * @memberof ImagesApiListUpdatedContent
    */
    readonly endDate?: string | Date
    
    /**
    * Show images updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows images that were updated in the hour preceding the request
    * @type {string}
    * @memberof ImagesApiListUpdatedContent
    */
    readonly interval?: string
    
    /**
    * Page number
    * @type {number}
    * @memberof ImagesApiListUpdatedContent
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof ImagesApiListUpdatedContent
    */
    readonly perPage?: number
    
    /**
    * Sort order
    * @type {'newest' | 'oldest'}
    * @memberof ImagesApiListUpdatedContent
    */
    readonly sort?: 'newest' | 'oldest'
    
}

/**
 * Request parameters for redownloadLicense operation in ImagesApi.
 * @export
 * @interface ImagesApiRedownloadLicenseRequest
 */
export type ImagesApiRedownloadLicenseRequest = {
    
    /**
    * License ID
    * @type {string}
    * @memberof ImagesApiRedownloadLicense
    */
    readonly id: string
    
} & RedownloadImage

/**
 * Request parameters for removeFromCollection operation in ImagesApi.
 * @export
 * @interface ImagesApiRemoveFromCollectionRequest
 */
export type ImagesApiRemoveFromCollectionRequest = {
    
    /**
    * Collection ID
    * @type {string}
    * @memberof ImagesApiRemoveFromCollection
    */
    readonly id: string
    
    /**
    * One or more image IDs to remove from the collection
    * @type {Array<string>}
    * @memberof ImagesApiRemoveFromCollection
    */
    readonly itemId?: Array<string>
    
}

/**
 * Request parameters for renameCollection operation in ImagesApi.
 * @export
 * @interface ImagesApiRenameCollectionRequest
 */
export type ImagesApiRenameCollectionRequest = {
    
    /**
    * Collection ID
    * @type {string}
    * @memberof ImagesApiRenameCollection
    */
    readonly id: string
    
} & CollectionUpdateRequest

/**
 * Request parameters for runMultipleSearches operation in ImagesApi.
 * @export
 * @interface ImagesApiRunMultipleSearchesRequest
 */
export type ImagesApiRunMultipleSearchesRequest = {
    /**
    * List of queries to request results for and filters to apply per query; these values override the defaults in the query parameters
    * @type {Array<SearchImage>}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly requestBody: Array<SearchImage>
    /**
    * Show images added on the specified date
    * @type {string | Date}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly addedDate?: string | Date
    /**
    * Show images added on or after the specified date
    * @type {string | Date}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly addedDateStart?: string | Date
    /**
    * Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
    * @type {number}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly aspectRatioMin?: number
    /**
    * Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
    * @type {number}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly aspectRatioMax?: number
    /**
    * Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
    * @type {number}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly aspectRatio?: number
    /**
    * Show images added before the specified date
    * @type {string | Date}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly addedDateEnd?: string | Date
    /**
    * Show images with the specified Shutterstock-defined category; specify a category name or ID
    * @type {string}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly category?: string
    /**
    * Specify either a hexadecimal color in the format \'4F21EA\' or \'grayscale\'; the API returns images that use similar colors
    * @type {string}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly color?: string
    /**
    * Show images with the specified contributor names or IDs, allows multiple
    * @type {Array<string>}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly contributor?: Array<string>
    /**
    * Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search
    * @type {ImagesRunMultipleSearchesContributorCountryParameter}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly contributorCountry?: ImagesRunMultipleSearchesContributorCountryParameter
    /**
    * Fields to display in the response; see the documentation for the fields parameter in the overview section
    * @type {string}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly fields?: string
    /**
    * (Deprecated; use height_from and height_to instead) Show images with the specified height
    * @type {number}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly height?: number
    /**
    * Show images with the specified height or larger, in pixels
    * @type {number}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly heightFrom?: number
    /**
    * Show images with the specified height or smaller, in pixels
    * @type {number}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly heightTo?: number
    /**
    * Show images of the specified type
    * @type {Array<'photo' | 'illustration' | 'vector'>}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly imageType?: Array<'photo' | 'illustration' | 'vector'>
    /**
    * Hide results with potentially unsafe keywords
    * @type {boolean}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly keywordSafeSearch?: boolean
    /**
    * Set query and result language (uses Accept-Language header if not set)
    * @type {Language}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly language?: Language
    /**
    * Show only images with the specified license
    * @type {Array<'commercial' | 'editorial' | 'enhanced'>}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly license?: Array<'commercial' | 'editorial' | 'enhanced'>
    /**
    * Show image results with the specified model IDs
    * @type {Array<string>}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly model?: Array<string>
    /**
    * Show image results with horizontal or vertical orientation
    * @type {'horizontal' | 'vertical'}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly orientation?: 'horizontal' | 'vertical'
    /**
    * Page number
    * @type {number}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly page?: number
    /**
    * Number of results per page
    * @type {number}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly perPage?: number
    /**
    * Show images of people with a signed model release
    * @type {boolean}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly peopleModelReleased?: boolean
    /**
    * Show images that feature people of the specified age category
    * @type {'infants' | 'children' | 'teenagers' | '20s' | '30s' | '40s' | '50s' | '60s' | 'older'}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly peopleAge?: 'infants' | 'children' | 'teenagers' | '20s' | '30s' | '40s' | '50s' | '60s' | 'older'
    /**
    * Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
    * @type {Array<'african' | 'african_american' | 'black' | 'brazilian' | 'chinese' | 'caucasian' | 'east_asian' | 'hispanic' | 'japanese' | 'middle_eastern' | 'native_american' | 'pacific_islander' | 'south_asian' | 'southeast_asian' | 'other' | 'NOT african' | 'NOT african_american' | 'NOT black' | 'NOT brazilian' | 'NOT chinese' | 'NOT caucasian' | 'NOT east_asian' | 'NOT hispanic' | 'NOT japanese' | 'NOT middle_eastern' | 'NOT native_american' | 'NOT pacific_islander' | 'NOT south_asian' | 'NOT southeast_asian' | 'NOT other'>}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly peopleEthnicity?: Array<'african' | 'african_american' | 'black' | 'brazilian' | 'chinese' | 'caucasian' | 'east_asian' | 'hispanic' | 'japanese' | 'middle_eastern' | 'native_american' | 'pacific_islander' | 'south_asian' | 'southeast_asian' | 'other' | 'NOT african' | 'NOT african_american' | 'NOT black' | 'NOT brazilian' | 'NOT chinese' | 'NOT caucasian' | 'NOT east_asian' | 'NOT hispanic' | 'NOT japanese' | 'NOT middle_eastern' | 'NOT native_american' | 'NOT pacific_islander' | 'NOT south_asian' | 'NOT southeast_asian' | 'NOT other'>
    /**
    * Show images with people of the specified gender
    * @type {'male' | 'female' | 'both'}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly peopleGender?: 'male' | 'female' | 'both'
    /**
    * Show images with the specified number of people
    * @type {number}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly peopleNumber?: number
    /**
    * Raise or lower search result rankings based on the result\'s relevance to a specified region; you can provide a country code or an IP address from which the API infers a country
    * @type {ImagesRunMultipleSearchesRegionParameter}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly region?: ImagesRunMultipleSearchesRegionParameter
    /**
    * Enable or disable safe search
    * @type {boolean}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly safe?: boolean
    /**
    * Sort by
    * @type {'newest' | 'popular' | 'relevance' | 'random'}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly sort?: 'newest' | 'popular' | 'relevance' | 'random'
    /**
    * Spellcheck the search query and return results on suggested spellings
    * @type {boolean}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly spellcheckQuery?: boolean
    /**
    * Amount of detail to render in the response
    * @type {'minimal' | 'full'}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly view?: 'minimal' | 'full'
    /**
    * (Deprecated; use width_from and width_to instead) Show images with the specified width
    * @type {number}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly width?: number
    /**
    * Show images with the specified width or larger, in pixels
    * @type {number}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly widthFrom?: number
    /**
    * Show images with the specified width or smaller, in pixels
    * @type {number}
    * @memberof ImagesApiRunMultipleSearches
    */
    readonly widthTo?: number
}

/**
 * Request parameters for searchImages operation in ImagesApi.
 * @export
 * @interface ImagesApiSearchImagesRequest
 */
export type ImagesApiSearchImagesRequest = {
    
    /**
    * Show images added on the specified date
    * @type {string | Date}
    * @memberof ImagesApiSearchImages
    */
    readonly addedDate?: string | Date
    
    /**
    * Show images added on or after the specified date
    * @type {string | Date}
    * @memberof ImagesApiSearchImages
    */
    readonly addedDateStart?: string | Date
    
    /**
    * Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
    * @type {number}
    * @memberof ImagesApiSearchImages
    */
    readonly aspectRatioMin?: number
    
    /**
    * Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
    * @type {number}
    * @memberof ImagesApiSearchImages
    */
    readonly aspectRatioMax?: number
    
    /**
    * Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
    * @type {number}
    * @memberof ImagesApiSearchImages
    */
    readonly aspectRatio?: number
    
    /**
    * Set to true and specify the `ai_objective` and `ai_industry` parameters to use AI-powered search; the API returns information about how well images meet the objective for the industry 
    * @type {boolean}
    * @memberof ImagesApiSearchImages
    */
    readonly aiSearch?: boolean
    
    /**
    * For AI-powered search, specify the maximum number of labels to return
    * @type {number}
    * @memberof ImagesApiSearchImages
    */
    readonly aiLabelsLimit?: number
    
    /**
    * For AI-powered search, specify the industry to target; requires that the `ai_search` parameter is set to true
    * @type {'automotive' | 'cpg' | 'finance' | 'healthcare' | 'retail' | 'technology'}
    * @memberof ImagesApiSearchImages
    */
    readonly aiIndustry?: 'automotive' | 'cpg' | 'finance' | 'healthcare' | 'retail' | 'technology'
    
    /**
    * For AI-powered search, specify the goal of the media; requires that the `ai_search` parameter is set to true
    * @type {'awareness' | 'traffic' | 'conversions'}
    * @memberof ImagesApiSearchImages
    */
    readonly aiObjective?: 'awareness' | 'traffic' | 'conversions'
    
    /**
    * Show images added before the specified date
    * @type {string | Date}
    * @memberof ImagesApiSearchImages
    */
    readonly addedDateEnd?: string | Date
    
    /**
    * Show images with the specified Shutterstock-defined category; specify a category name or ID
    * @type {string}
    * @memberof ImagesApiSearchImages
    */
    readonly category?: string
    
    /**
    * Specify either a hexadecimal color in the format \'4F21EA\' or \'grayscale\'; the API returns images that use similar colors
    * @type {string}
    * @memberof ImagesApiSearchImages
    */
    readonly color?: string
    
    /**
    * Show images with the specified contributor names or IDs, allows multiple
    * @type {Array<string>}
    * @memberof ImagesApiSearchImages
    */
    readonly contributor?: Array<string>
    
    /**
    * Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search
    * @type {ImagesRunMultipleSearchesContributorCountryParameter}
    * @memberof ImagesApiSearchImages
    */
    readonly contributorCountry?: ImagesRunMultipleSearchesContributorCountryParameter
    
    /**
    * Fields to display in the response; see the documentation for the fields parameter in the overview section
    * @type {string}
    * @memberof ImagesApiSearchImages
    */
    readonly fields?: string
    
    /**
    * (Deprecated; use height_from and height_to instead) Show images with the specified height
    * @type {number}
    * @memberof ImagesApiSearchImages
    */
    readonly height?: number
    
    /**
    * Show images with the specified height or larger, in pixels
    * @type {number}
    * @memberof ImagesApiSearchImages
    */
    readonly heightFrom?: number
    
    /**
    * Show images with the specified height or smaller, in pixels
    * @type {number}
    * @memberof ImagesApiSearchImages
    */
    readonly heightTo?: number
    
    /**
    * Show images of the specified type
    * @type {Array<'photo' | 'illustration' | 'vector'>}
    * @memberof ImagesApiSearchImages
    */
    readonly imageType?: Array<'photo' | 'illustration' | 'vector'>
    
    /**
    * Hide results with potentially unsafe keywords
    * @type {boolean}
    * @memberof ImagesApiSearchImages
    */
    readonly keywordSafeSearch?: boolean
    
    /**
    * Set query and result language (uses Accept-Language header if not set)
    * @type {Language}
    * @memberof ImagesApiSearchImages
    */
    readonly language?: Language
    
    /**
    * Show only images with the specified license
    * @type {Array<'commercial' | 'editorial' | 'enhanced'>}
    * @memberof ImagesApiSearchImages
    */
    readonly license?: Array<'commercial' | 'editorial' | 'enhanced'>
    
    /**
    * Show image results with the specified model IDs
    * @type {Array<string>}
    * @memberof ImagesApiSearchImages
    */
    readonly model?: Array<string>
    
    /**
    * Show image results with horizontal or vertical orientation
    * @type {'horizontal' | 'vertical'}
    * @memberof ImagesApiSearchImages
    */
    readonly orientation?: 'horizontal' | 'vertical'
    
    /**
    * Page number
    * @type {number}
    * @memberof ImagesApiSearchImages
    */
    readonly page?: number
    
    /**
    * Number of results per page
    * @type {number}
    * @memberof ImagesApiSearchImages
    */
    readonly perPage?: number
    
    /**
    * Show images of people with a signed model release
    * @type {boolean}
    * @memberof ImagesApiSearchImages
    */
    readonly peopleModelReleased?: boolean
    
    /**
    * Show images that feature people of the specified age category
    * @type {'infants' | 'children' | 'teenagers' | '20s' | '30s' | '40s' | '50s' | '60s' | 'older'}
    * @memberof ImagesApiSearchImages
    */
    readonly peopleAge?: 'infants' | 'children' | 'teenagers' | '20s' | '30s' | '40s' | '50s' | '60s' | 'older'
    
    /**
    * Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
    * @type {Array<'african' | 'african_american' | 'black' | 'brazilian' | 'chinese' | 'caucasian' | 'east_asian' | 'hispanic' | 'japanese' | 'middle_eastern' | 'native_american' | 'pacific_islander' | 'south_asian' | 'southeast_asian' | 'other' | 'NOT african' | 'NOT african_american' | 'NOT black' | 'NOT brazilian' | 'NOT chinese' | 'NOT caucasian' | 'NOT east_asian' | 'NOT hispanic' | 'NOT japanese' | 'NOT middle_eastern' | 'NOT native_american' | 'NOT pacific_islander' | 'NOT south_asian' | 'NOT southeast_asian' | 'NOT other'>}
    * @memberof ImagesApiSearchImages
    */
    readonly peopleEthnicity?: Array<'african' | 'african_american' | 'black' | 'brazilian' | 'chinese' | 'caucasian' | 'east_asian' | 'hispanic' | 'japanese' | 'middle_eastern' | 'native_american' | 'pacific_islander' | 'south_asian' | 'southeast_asian' | 'other' | 'NOT african' | 'NOT african_american' | 'NOT black' | 'NOT brazilian' | 'NOT chinese' | 'NOT caucasian' | 'NOT east_asian' | 'NOT hispanic' | 'NOT japanese' | 'NOT middle_eastern' | 'NOT native_american' | 'NOT pacific_islander' | 'NOT south_asian' | 'NOT southeast_asian' | 'NOT other'>
    
    /**
    * Show images with people of the specified gender
    * @type {'male' | 'female' | 'both'}
    * @memberof ImagesApiSearchImages
    */
    readonly peopleGender?: 'male' | 'female' | 'both'
    
    /**
    * Show images with the specified number of people
    * @type {number}
    * @memberof ImagesApiSearchImages
    */
    readonly peopleNumber?: number
    
    /**
    * One or more search terms separated by spaces; you can use NOT to filter out images that match a term
    * @type {string}
    * @memberof ImagesApiSearchImages
    */
    readonly query?: string
    
    /**
    * Raise or lower search result rankings based on the result\'s relevance to a specified region; you can provide a country code or an IP address from which the API infers a country
    * @type {ImagesRunMultipleSearchesRegionParameter}
    * @memberof ImagesApiSearchImages
    */
    readonly region?: ImagesRunMultipleSearchesRegionParameter
    
    /**
    * Enable or disable safe search
    * @type {boolean}
    * @memberof ImagesApiSearchImages
    */
    readonly safe?: boolean
    
    /**
    * Sort by
    * @type {'newest' | 'popular' | 'relevance' | 'random'}
    * @memberof ImagesApiSearchImages
    */
    readonly sort?: 'newest' | 'popular' | 'relevance' | 'random'
    
    /**
    * Spellcheck the search query and return results on suggested spellings
    * @type {boolean}
    * @memberof ImagesApiSearchImages
    */
    readonly spellcheckQuery?: boolean
    
    /**
    * Amount of detail to render in the response
    * @type {'minimal' | 'full'}
    * @memberof ImagesApiSearchImages
    */
    readonly view?: 'minimal' | 'full'
    
    /**
    * (Deprecated; use width_from and width_to instead) Show images with the specified width
    * @type {number}
    * @memberof ImagesApiSearchImages
    */
    readonly width?: number
    
    /**
    * Show images with the specified width or larger, in pixels
    * @type {number}
    * @memberof ImagesApiSearchImages
    */
    readonly widthFrom?: number
    
    /**
    * Show images with the specified width or smaller, in pixels
    * @type {number}
    * @memberof ImagesApiSearchImages
    */
    readonly widthTo?: number
    
}

/**
 * ImagesApiGenerated - object-oriented interface
 * @export
 * @class ImagesApiGenerated
 * @extends {BaseAPI}
 */
export class ImagesApiGenerated extends BaseAPI {
    /**
     * This endpoint adds one or more images to a collection by image IDs.
     * @summary Add images to collections
     * @param {ImagesApiAddToCollectionItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public addToCollectionItems(requestParameters: ImagesApiAddToCollectionItemsRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).addToCollectionItems(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint creates one or more image collections (lightboxes). To add images to the collections, use `POST /v2/images/collections/{id}/items`.
     * @summary Create image collections
     * @param {ImagesApiCreateCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public createCollection(requestParameters: ImagesApiCreateCollectionRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).createCollection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint deletes an image collection.
     * @summary Delete image collections
     * @param {ImagesApiDeleteCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public deleteCollection(requestParameters: ImagesApiDeleteCollectionRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).deleteCollection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns up to 10 important keywords from a block of plain text.
     * @summary Get keywords from text
     * @param {ImagesApiExtractKeywordsFromTextRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public extractKeywordsFromText(requestParameters: ImagesApiExtractKeywordsFromTextRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).extractKeywordsFromText(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gets more detailed information about a featured collection, including its cover image and timestamps for its creation and most recent update. To get the images, use `GET /v2/images/collections/featured/{id}/items`.
     * @summary Get the details of featured image collections
     * @param {ImagesApiFeaturedCollectionDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public featuredCollectionDetails(requestParameters: ImagesApiFeaturedCollectionDetailsRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).featuredCollectionDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gets more detailed information about a collection, including its cover image and timestamps for its creation and most recent update. To get the images in collections, use `GET /v2/images/collections/{id}/items`.
     * @summary Get the details of image collections
     * @param {ImagesApiGetCollectionDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public getCollectionDetails(requestParameters: ImagesApiGetCollectionDetailsRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).getCollectionDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists the IDs of images in a featured collection and the date that each was added.
     * @summary Get the contents of featured image collections
     * @param {ImagesApiGetCollectionItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public getCollectionItems(requestParameters: ImagesApiGetCollectionItemsRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).getCollectionItems(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists the IDs of images in a collection and the date that each was added.
     * @summary Get the contents of image collections
     * @param {ImagesApiGetCollectionItems0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public getCollectionItems_1(requestParameters: ImagesApiGetCollectionItems0Request, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).getCollectionItems_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint shows information about an image, including a URL to a preview image and the sizes that it is available in.
     * @summary Get details about images
     * @param {ImagesApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public getDetails(requestParameters: ImagesApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint provides autocomplete suggestions for partial search terms.
     * @summary Get suggestions for a search term
     * @param {ImagesApiGetSearchSuggestionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public getSearchSuggestions(requestParameters: ImagesApiGetSearchSuggestionsRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).getSearchSuggestions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gets licenses for one or more images. You must specify the image IDs in the body parameter and other details like the format, size, and subscription ID either in the query parameter or with each image ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
     * @summary License images
     * @param {ImagesApiLicenseImagesForMultipleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public licenseImagesForMultiple(requestParameters: ImagesApiLicenseImagesForMultipleRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).licenseImagesForMultiple(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists the categories (Shutterstock-assigned genres) that images can belong to.
     * @summary List image categories
     * @param {ImagesApiListCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public listCategories(requestParameters: ImagesApiListCategoriesRequest = {}, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).listCategories(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists your collections of images and their basic attributes.
     * @summary List image collections
     * @param {ImagesApiListCollectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public listCollections(requestParameters: ImagesApiListCollectionsRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).listCollections(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists featured collections of specific types and a name and cover image for each collection.
     * @summary List featured image collections
     * @param {ImagesApiListFeaturedCollectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public listFeaturedCollections(requestParameters: ImagesApiListFeaturedCollectionsRequest = {}, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).listFeaturedCollections(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists information about one or more images, including the available sizes.
     * @summary List images
     * @param {ImagesApiListInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public listInfo(requestParameters: ImagesApiListInfoRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).listInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists existing licenses.
     * @summary List image licenses
     * @param {ImagesApiListLicensesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public listLicenses(requestParameters: ImagesApiListLicensesRequest = {}, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).listLicenses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns images that customers put in the same collection as the specified image IDs.
     * @summary List recommended images
     * @param {ImagesApiListRecommendedImagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public listRecommendedImages(requestParameters: ImagesApiListRecommendedImagesRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).listRecommendedImages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns images that are visually similar to an image that you specify.
     * @summary List similar images
     * @param {ImagesApiListSimilarImagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public listSimilarImages(requestParameters: ImagesApiListSimilarImagesRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).listSimilarImages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint lists images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show images that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.
     * @summary List updated images
     * @param {ImagesApiListUpdatedContentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public listUpdatedContent(requestParameters: ImagesApiListUpdatedContentRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).listUpdatedContent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint redownloads images that you have already received a license for. The download links in the response are valid for 8 hours.
     * @summary Download images
     * @param {ImagesApiRedownloadLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public redownloadLicense(requestParameters: ImagesApiRedownloadLicenseRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).redownloadLicense(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint removes one or more images from a collection.
     * @summary Remove images from collections
     * @param {ImagesApiRemoveFromCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public removeFromCollection(requestParameters: ImagesApiRemoveFromCollectionRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).removeFromCollection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint sets a new name for an image collection.
     * @summary Rename image collections
     * @param {ImagesApiRenameCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public renameCollection(requestParameters: ImagesApiRenameCollectionRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).renameCollection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint runs up to 5 image searches in a single request and returns up to 20 results per search. You can provide global search parameters in the query parameters and override them for each search in the body parameter. The query and body parameters are the same as in the `GET /v2/images/search` endpoint.
     * @summary Run multiple image searches
     * @param {ImagesApiRunMultipleSearchesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public runMultipleSearches(requestParameters: ImagesApiRunMultipleSearchesRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).runMultipleSearches(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint searches for images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT. Free API accounts show results only from a limited library of media, not the full Shutterstock media library. Also, the number of search fields they can use in a request is limited.
     * @summary Search for images
     * @param {ImagesApiSearchImagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApiGenerated
     */
    public searchImages(requestParameters: ImagesApiSearchImagesRequest = {}, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration).searchImages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
